# Generated by Futhark 0.22.2
import sys
import numpy as np
import ctypes as ct
# Stub code for OpenCL setup.

import pyopencl as cl
import numpy as np
import sys

if cl.version.VERSION < (2015,2):
    raise Exception('Futhark requires at least PyOpenCL version 2015.2.  Installed version is %s.' %
                    cl.version.VERSION_TEXT)

def parse_preferred_device(s):
    pref_num = 0
    if len(s) > 1 and s[0] == '#':
        i = 1
        while i < len(s):
            if not s[i].isdigit():
                break
            else:
                pref_num = pref_num * 10 + int(s[i])
            i += 1
        while i < len(s) and s[i].isspace():
            i += 1
        return (s[i:], pref_num)
    else:
        return (s, 0)

def get_prefered_context(interactive=False, platform_pref=None, device_pref=None):
    if device_pref != None:
        (device_pref, device_num) = parse_preferred_device(device_pref)
    else:
        device_num = 0

    if interactive:
        return cl.create_some_context(interactive=True)

    def blacklisted(p, d):
        return platform_pref == None and device_pref == None and \
            p.name == "Apple" and d.name.find("Intel(R) Core(TM)") >= 0
    def platform_ok(p):
        return not platform_pref or p.name.find(platform_pref) >= 0
    def device_ok(d):
        return not device_pref or d.name.find(device_pref) >= 0

    device_matches = 0

    for p in cl.get_platforms():
        if not platform_ok(p):
            continue
        for d in p.get_devices():
            if blacklisted(p,d) or not device_ok(d):
                continue
            if device_matches == device_num:
                return cl.Context(devices=[d])
            else:
                device_matches += 1
    raise Exception('No OpenCL platform and device matching constraints found.')

def param_assignment(s):
    name, value = s.split('=')
    return (name, int(value))

def check_types(self, required_types):
    if 'f64' in required_types:
        if self.device.get_info(cl.device_info.PREFERRED_VECTOR_WIDTH_DOUBLE) == 0:
            raise Exception('Program uses double-precision floats, but this is not supported on chosen device: %s' % self.device.name)

def apply_size_heuristics(self, size_heuristics, sizes):
    for (platform_name, device_type, size, valuef) in size_heuristics:
        if sizes[size] == None \
           and self.platform.name.find(platform_name) >= 0 \
           and (self.device.type & device_type) == device_type:
               sizes[size] = valuef(self.device)
    return sizes

def initialise_opencl_object(self,
                             program_src='',
                             build_options=[],
                             command_queue=None,
                             interactive=False,
                             platform_pref=None,
                             device_pref=None,
                             default_group_size=None,
                             default_num_groups=None,
                             default_tile_size=None,
                             default_reg_tile_size=None,
                             default_threshold=None,
                             size_heuristics=[],
                             required_types=[],
                             all_sizes={},
                             user_sizes={}):
    if command_queue is None:
        self.ctx = get_prefered_context(interactive, platform_pref, device_pref)
        self.queue = cl.CommandQueue(self.ctx)
    else:
        self.ctx = command_queue.context
        self.queue = command_queue
    self.device = self.queue.device
    self.platform = self.device.platform
    self.pool = cl.tools.MemoryPool(cl.tools.ImmediateAllocator(self.queue))
    device_type = self.device.type

    check_types(self, required_types)

    max_group_size = int(self.device.max_work_group_size)
    max_tile_size = int(np.sqrt(self.device.max_work_group_size))

    self.max_group_size = max_group_size
    self.max_tile_size = max_tile_size
    self.max_threshold = 0
    self.max_num_groups = 0

    self.max_local_memory = int(self.device.local_mem_size)

    # Futhark reserves 4 bytes of local memory for its own purposes.
    self.max_local_memory -= 4

    # See comment in rts/c/opencl.h.
    if self.platform.name.find('NVIDIA CUDA') >= 0:
        self.max_local_memory -= 12
    elif self.platform.name.find('AMD') >= 0:
        self.max_local_memory -= 16

    self.free_list = {}

    self.global_failure = self.pool.allocate(np.int32().itemsize)
    cl.enqueue_fill_buffer(self.queue, self.global_failure, np.int32(-1), 0, np.int32().itemsize)
    self.global_failure_args = self.pool.allocate(np.int64().itemsize *
                                                  (self.global_failure_args_max+1))
    self.failure_is_an_option = np.int32(0)

    if 'default_group_size' in sizes:
        default_group_size = sizes['default_group_size']
        del sizes['default_group_size']

    if 'default_num_groups' in sizes:
        default_num_groups = sizes['default_num_groups']
        del sizes['default_num_groups']

    if 'default_tile_size' in sizes:
        default_tile_size = sizes['default_tile_size']
        del sizes['default_tile_size']

    if 'default_reg_tile_size' in sizes:
        default_reg_tile_size = sizes['default_reg_tile_size']
        del sizes['default_reg_tile_size']

    if 'default_threshold' in sizes:
        default_threshold = sizes['default_threshold']
        del sizes['default_threshold']

    default_group_size_set = default_group_size != None
    default_tile_size_set = default_tile_size != None
    default_sizes = apply_size_heuristics(self, size_heuristics,
                                          {'group_size': default_group_size,
                                           'tile_size': default_tile_size,
                                           'reg_tile_size': default_reg_tile_size,
                                           'num_groups': default_num_groups,
                                           'lockstep_width': None,
                                           'threshold': default_threshold})
    default_group_size = default_sizes['group_size']
    default_num_groups = default_sizes['num_groups']
    default_threshold = default_sizes['threshold']
    default_tile_size = default_sizes['tile_size']
    default_reg_tile_size = default_sizes['reg_tile_size']
    lockstep_width = default_sizes['lockstep_width']

    if default_group_size > max_group_size:
        if default_group_size_set:
            sys.stderr.write('Note: Device limits group size to {} (down from {})\n'.
                             format(max_tile_size, default_group_size))
        default_group_size = max_group_size

    if default_tile_size > max_tile_size:
        if default_tile_size_set:
            sys.stderr.write('Note: Device limits tile size to {} (down from {})\n'.
                             format(max_tile_size, default_tile_size))
        default_tile_size = max_tile_size

    for (k,v) in user_sizes.items():
        if k in all_sizes:
            all_sizes[k]['value'] = v
        else:
            raise Exception('Unknown size: {}\nKnown sizes: {}'.format(k, ' '.join(all_sizes.keys())))

    self.sizes = {}
    for (k,v) in all_sizes.items():
        if v['class'] == 'group_size':
            max_value = max_group_size
            default_value = default_group_size
        elif v['class'] == 'num_groups':
            max_value = max_group_size # Intentional!
            default_value = default_num_groups
        elif v['class'] == 'tile_size':
            max_value = max_tile_size
            default_value = default_tile_size
        elif v['class'] == 'reg_tile_size':
            max_value = None
            default_value = default_reg_tile_size
        elif v['class'].startswith('threshold'):
            max_value = None
            default_value = default_threshold
        else:
            # Bespoke sizes have no limit or default.
            max_value = None
        if v['value'] == None:
            self.sizes[k] = default_value
        elif max_value != None and v['value'] > max_value:
            sys.stderr.write('Note: Device limits {} to {} (down from {}\n'.
                             format(k, max_value, v['value']))
            self.sizes[k] = max_value
        else:
            self.sizes[k] = v['value']

    # XXX: we perform only a subset of z-encoding here.  Really, the
    # compiler should provide us with the variables to which
    # parameters are mapped.
    if (len(program_src) >= 0):
        build_options += ["-DLOCKSTEP_WIDTH={}".format(lockstep_width)]

        build_options += ["-D{}={}".format(s.
                                           replace('z', 'zz').
                                           replace('.', 'zi').
                                           replace('#', 'zh').
                                           replace('\'', 'zq'),
                                           v) for (s,v) in self.sizes.items()]

        if (self.platform.name == 'Oclgrind'):
            build_options += ['-DEMULATE_F16']

        return cl.Program(self.ctx, program_src).build(build_options)

def opencl_alloc(self, min_size, tag):
    min_size = 1 if min_size == 0 else min_size
    assert min_size > 0
    return self.pool.allocate(min_size)

def opencl_free_all(self):
    self.pool.free_held()

def sync(self):
    failure = np.empty(1, dtype=np.int32)
    cl.enqueue_copy(self.queue, failure, self.global_failure, is_blocking=True)
    self.failure_is_an_option = np.int32(0)
    if failure[0] >= 0:
        # Reset failure information.
        cl.enqueue_fill_buffer(self.queue, self.global_failure, np.int32(-1), 0, np.int32().itemsize)

        # Read failure args.
        failure_args = np.empty(self.global_failure_args_max+1, dtype=np.int64)
        cl.enqueue_copy(self.queue, failure_args, self.global_failure_args, is_blocking=True)

        raise Exception(self.failure_msgs[failure[0]].format(*failure_args))
import pyopencl.array
import time
import argparse
sizes = {}
synchronous = False
preferred_platform = None
build_options = []
preferred_device = None
default_threshold = None
default_group_size = None
default_num_groups = None
default_tile_size = None
default_reg_tile_size = None
fut_opencl_src = """
// Clang-based OpenCL implementations need this for 'static' to work.
#ifdef cl_clang_storage_class_specifiers
#pragma OPENCL EXTENSION cl_clang_storage_class_specifiers : enable
#endif
#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable

// Some OpenCL programs dislike empty progams, or programs with no kernels.
// Declare a dummy kernel to ensure they remain our friends.
__kernel void dummy_kernel(__global unsigned char *dummy, int n)
{
    const int thread_gid = get_global_id(0);
    if (thread_gid >= n) return;
}

#pragma OPENCL EXTENSION cl_khr_int64_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_int64_extended_atomics : enable

typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;

typedef uchar uint8_t;
typedef ushort uint16_t;
typedef uint uint32_t;
typedef ulong uint64_t;

// NVIDIAs OpenCL does not create device-wide memory fences (see #734), so we
// use inline assembly if we detect we are on an NVIDIA GPU.
#ifdef cl_nv_pragma_unroll
static inline void mem_fence_global() {
  asm("membar.gl;");
}
#else
static inline void mem_fence_global() {
  mem_fence(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);
}
#endif
static inline void mem_fence_local() {
  mem_fence(CLK_LOCAL_MEM_FENCE);
}
// Start of half.h.

// Conversion functions are from http://half.sourceforge.net/, but
// translated to C.
//
// Copyright (c) 2012-2021 Christian Rau
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#ifndef __OPENCL_VERSION__
#define __constant
#endif

__constant static const uint16_t base_table[512] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080, 0x0100,
  0x0200, 0x0400, 0x0800, 0x0C00, 0x1000, 0x1400, 0x1800, 0x1C00, 0x2000, 0x2400, 0x2800, 0x2C00, 0x3000, 0x3400, 0x3800, 0x3C00,
  0x4000, 0x4400, 0x4800, 0x4C00, 0x5000, 0x5400, 0x5800, 0x5C00, 0x6000, 0x6400, 0x6800, 0x6C00, 0x7000, 0x7400, 0x7800, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8001, 0x8002, 0x8004, 0x8008, 0x8010, 0x8020, 0x8040, 0x8080, 0x8100,
  0x8200, 0x8400, 0x8800, 0x8C00, 0x9000, 0x9400, 0x9800, 0x9C00, 0xA000, 0xA400, 0xA800, 0xAC00, 0xB000, 0xB400, 0xB800, 0xBC00,
  0xC000, 0xC400, 0xC800, 0xCC00, 0xD000, 0xD400, 0xD800, 0xDC00, 0xE000, 0xE400, 0xE800, 0xEC00, 0xF000, 0xF400, 0xF800, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00 };

__constant static const unsigned char shift_table[512] = {
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13 };

__constant static const uint32_t mantissa_table[2048] = {
  0x00000000, 0x33800000, 0x34000000, 0x34400000, 0x34800000, 0x34A00000, 0x34C00000, 0x34E00000, 0x35000000, 0x35100000, 0x35200000, 0x35300000, 0x35400000, 0x35500000, 0x35600000, 0x35700000,
  0x35800000, 0x35880000, 0x35900000, 0x35980000, 0x35A00000, 0x35A80000, 0x35B00000, 0x35B80000, 0x35C00000, 0x35C80000, 0x35D00000, 0x35D80000, 0x35E00000, 0x35E80000, 0x35F00000, 0x35F80000,
  0x36000000, 0x36040000, 0x36080000, 0x360C0000, 0x36100000, 0x36140000, 0x36180000, 0x361C0000, 0x36200000, 0x36240000, 0x36280000, 0x362C0000, 0x36300000, 0x36340000, 0x36380000, 0x363C0000,
  0x36400000, 0x36440000, 0x36480000, 0x364C0000, 0x36500000, 0x36540000, 0x36580000, 0x365C0000, 0x36600000, 0x36640000, 0x36680000, 0x366C0000, 0x36700000, 0x36740000, 0x36780000, 0x367C0000,
  0x36800000, 0x36820000, 0x36840000, 0x36860000, 0x36880000, 0x368A0000, 0x368C0000, 0x368E0000, 0x36900000, 0x36920000, 0x36940000, 0x36960000, 0x36980000, 0x369A0000, 0x369C0000, 0x369E0000,
  0x36A00000, 0x36A20000, 0x36A40000, 0x36A60000, 0x36A80000, 0x36AA0000, 0x36AC0000, 0x36AE0000, 0x36B00000, 0x36B20000, 0x36B40000, 0x36B60000, 0x36B80000, 0x36BA0000, 0x36BC0000, 0x36BE0000,
  0x36C00000, 0x36C20000, 0x36C40000, 0x36C60000, 0x36C80000, 0x36CA0000, 0x36CC0000, 0x36CE0000, 0x36D00000, 0x36D20000, 0x36D40000, 0x36D60000, 0x36D80000, 0x36DA0000, 0x36DC0000, 0x36DE0000,
  0x36E00000, 0x36E20000, 0x36E40000, 0x36E60000, 0x36E80000, 0x36EA0000, 0x36EC0000, 0x36EE0000, 0x36F00000, 0x36F20000, 0x36F40000, 0x36F60000, 0x36F80000, 0x36FA0000, 0x36FC0000, 0x36FE0000,
  0x37000000, 0x37010000, 0x37020000, 0x37030000, 0x37040000, 0x37050000, 0x37060000, 0x37070000, 0x37080000, 0x37090000, 0x370A0000, 0x370B0000, 0x370C0000, 0x370D0000, 0x370E0000, 0x370F0000,
  0x37100000, 0x37110000, 0x37120000, 0x37130000, 0x37140000, 0x37150000, 0x37160000, 0x37170000, 0x37180000, 0x37190000, 0x371A0000, 0x371B0000, 0x371C0000, 0x371D0000, 0x371E0000, 0x371F0000,
  0x37200000, 0x37210000, 0x37220000, 0x37230000, 0x37240000, 0x37250000, 0x37260000, 0x37270000, 0x37280000, 0x37290000, 0x372A0000, 0x372B0000, 0x372C0000, 0x372D0000, 0x372E0000, 0x372F0000,
  0x37300000, 0x37310000, 0x37320000, 0x37330000, 0x37340000, 0x37350000, 0x37360000, 0x37370000, 0x37380000, 0x37390000, 0x373A0000, 0x373B0000, 0x373C0000, 0x373D0000, 0x373E0000, 0x373F0000,
  0x37400000, 0x37410000, 0x37420000, 0x37430000, 0x37440000, 0x37450000, 0x37460000, 0x37470000, 0x37480000, 0x37490000, 0x374A0000, 0x374B0000, 0x374C0000, 0x374D0000, 0x374E0000, 0x374F0000,
  0x37500000, 0x37510000, 0x37520000, 0x37530000, 0x37540000, 0x37550000, 0x37560000, 0x37570000, 0x37580000, 0x37590000, 0x375A0000, 0x375B0000, 0x375C0000, 0x375D0000, 0x375E0000, 0x375F0000,
  0x37600000, 0x37610000, 0x37620000, 0x37630000, 0x37640000, 0x37650000, 0x37660000, 0x37670000, 0x37680000, 0x37690000, 0x376A0000, 0x376B0000, 0x376C0000, 0x376D0000, 0x376E0000, 0x376F0000,
  0x37700000, 0x37710000, 0x37720000, 0x37730000, 0x37740000, 0x37750000, 0x37760000, 0x37770000, 0x37780000, 0x37790000, 0x377A0000, 0x377B0000, 0x377C0000, 0x377D0000, 0x377E0000, 0x377F0000,
  0x37800000, 0x37808000, 0x37810000, 0x37818000, 0x37820000, 0x37828000, 0x37830000, 0x37838000, 0x37840000, 0x37848000, 0x37850000, 0x37858000, 0x37860000, 0x37868000, 0x37870000, 0x37878000,
  0x37880000, 0x37888000, 0x37890000, 0x37898000, 0x378A0000, 0x378A8000, 0x378B0000, 0x378B8000, 0x378C0000, 0x378C8000, 0x378D0000, 0x378D8000, 0x378E0000, 0x378E8000, 0x378F0000, 0x378F8000,
  0x37900000, 0x37908000, 0x37910000, 0x37918000, 0x37920000, 0x37928000, 0x37930000, 0x37938000, 0x37940000, 0x37948000, 0x37950000, 0x37958000, 0x37960000, 0x37968000, 0x37970000, 0x37978000,
  0x37980000, 0x37988000, 0x37990000, 0x37998000, 0x379A0000, 0x379A8000, 0x379B0000, 0x379B8000, 0x379C0000, 0x379C8000, 0x379D0000, 0x379D8000, 0x379E0000, 0x379E8000, 0x379F0000, 0x379F8000,
  0x37A00000, 0x37A08000, 0x37A10000, 0x37A18000, 0x37A20000, 0x37A28000, 0x37A30000, 0x37A38000, 0x37A40000, 0x37A48000, 0x37A50000, 0x37A58000, 0x37A60000, 0x37A68000, 0x37A70000, 0x37A78000,
  0x37A80000, 0x37A88000, 0x37A90000, 0x37A98000, 0x37AA0000, 0x37AA8000, 0x37AB0000, 0x37AB8000, 0x37AC0000, 0x37AC8000, 0x37AD0000, 0x37AD8000, 0x37AE0000, 0x37AE8000, 0x37AF0000, 0x37AF8000,
  0x37B00000, 0x37B08000, 0x37B10000, 0x37B18000, 0x37B20000, 0x37B28000, 0x37B30000, 0x37B38000, 0x37B40000, 0x37B48000, 0x37B50000, 0x37B58000, 0x37B60000, 0x37B68000, 0x37B70000, 0x37B78000,
  0x37B80000, 0x37B88000, 0x37B90000, 0x37B98000, 0x37BA0000, 0x37BA8000, 0x37BB0000, 0x37BB8000, 0x37BC0000, 0x37BC8000, 0x37BD0000, 0x37BD8000, 0x37BE0000, 0x37BE8000, 0x37BF0000, 0x37BF8000,
  0x37C00000, 0x37C08000, 0x37C10000, 0x37C18000, 0x37C20000, 0x37C28000, 0x37C30000, 0x37C38000, 0x37C40000, 0x37C48000, 0x37C50000, 0x37C58000, 0x37C60000, 0x37C68000, 0x37C70000, 0x37C78000,
  0x37C80000, 0x37C88000, 0x37C90000, 0x37C98000, 0x37CA0000, 0x37CA8000, 0x37CB0000, 0x37CB8000, 0x37CC0000, 0x37CC8000, 0x37CD0000, 0x37CD8000, 0x37CE0000, 0x37CE8000, 0x37CF0000, 0x37CF8000,
  0x37D00000, 0x37D08000, 0x37D10000, 0x37D18000, 0x37D20000, 0x37D28000, 0x37D30000, 0x37D38000, 0x37D40000, 0x37D48000, 0x37D50000, 0x37D58000, 0x37D60000, 0x37D68000, 0x37D70000, 0x37D78000,
  0x37D80000, 0x37D88000, 0x37D90000, 0x37D98000, 0x37DA0000, 0x37DA8000, 0x37DB0000, 0x37DB8000, 0x37DC0000, 0x37DC8000, 0x37DD0000, 0x37DD8000, 0x37DE0000, 0x37DE8000, 0x37DF0000, 0x37DF8000,
  0x37E00000, 0x37E08000, 0x37E10000, 0x37E18000, 0x37E20000, 0x37E28000, 0x37E30000, 0x37E38000, 0x37E40000, 0x37E48000, 0x37E50000, 0x37E58000, 0x37E60000, 0x37E68000, 0x37E70000, 0x37E78000,
  0x37E80000, 0x37E88000, 0x37E90000, 0x37E98000, 0x37EA0000, 0x37EA8000, 0x37EB0000, 0x37EB8000, 0x37EC0000, 0x37EC8000, 0x37ED0000, 0x37ED8000, 0x37EE0000, 0x37EE8000, 0x37EF0000, 0x37EF8000,
  0x37F00000, 0x37F08000, 0x37F10000, 0x37F18000, 0x37F20000, 0x37F28000, 0x37F30000, 0x37F38000, 0x37F40000, 0x37F48000, 0x37F50000, 0x37F58000, 0x37F60000, 0x37F68000, 0x37F70000, 0x37F78000,
  0x37F80000, 0x37F88000, 0x37F90000, 0x37F98000, 0x37FA0000, 0x37FA8000, 0x37FB0000, 0x37FB8000, 0x37FC0000, 0x37FC8000, 0x37FD0000, 0x37FD8000, 0x37FE0000, 0x37FE8000, 0x37FF0000, 0x37FF8000,
  0x38000000, 0x38004000, 0x38008000, 0x3800C000, 0x38010000, 0x38014000, 0x38018000, 0x3801C000, 0x38020000, 0x38024000, 0x38028000, 0x3802C000, 0x38030000, 0x38034000, 0x38038000, 0x3803C000,
  0x38040000, 0x38044000, 0x38048000, 0x3804C000, 0x38050000, 0x38054000, 0x38058000, 0x3805C000, 0x38060000, 0x38064000, 0x38068000, 0x3806C000, 0x38070000, 0x38074000, 0x38078000, 0x3807C000,
  0x38080000, 0x38084000, 0x38088000, 0x3808C000, 0x38090000, 0x38094000, 0x38098000, 0x3809C000, 0x380A0000, 0x380A4000, 0x380A8000, 0x380AC000, 0x380B0000, 0x380B4000, 0x380B8000, 0x380BC000,
  0x380C0000, 0x380C4000, 0x380C8000, 0x380CC000, 0x380D0000, 0x380D4000, 0x380D8000, 0x380DC000, 0x380E0000, 0x380E4000, 0x380E8000, 0x380EC000, 0x380F0000, 0x380F4000, 0x380F8000, 0x380FC000,
  0x38100000, 0x38104000, 0x38108000, 0x3810C000, 0x38110000, 0x38114000, 0x38118000, 0x3811C000, 0x38120000, 0x38124000, 0x38128000, 0x3812C000, 0x38130000, 0x38134000, 0x38138000, 0x3813C000,
  0x38140000, 0x38144000, 0x38148000, 0x3814C000, 0x38150000, 0x38154000, 0x38158000, 0x3815C000, 0x38160000, 0x38164000, 0x38168000, 0x3816C000, 0x38170000, 0x38174000, 0x38178000, 0x3817C000,
  0x38180000, 0x38184000, 0x38188000, 0x3818C000, 0x38190000, 0x38194000, 0x38198000, 0x3819C000, 0x381A0000, 0x381A4000, 0x381A8000, 0x381AC000, 0x381B0000, 0x381B4000, 0x381B8000, 0x381BC000,
  0x381C0000, 0x381C4000, 0x381C8000, 0x381CC000, 0x381D0000, 0x381D4000, 0x381D8000, 0x381DC000, 0x381E0000, 0x381E4000, 0x381E8000, 0x381EC000, 0x381F0000, 0x381F4000, 0x381F8000, 0x381FC000,
  0x38200000, 0x38204000, 0x38208000, 0x3820C000, 0x38210000, 0x38214000, 0x38218000, 0x3821C000, 0x38220000, 0x38224000, 0x38228000, 0x3822C000, 0x38230000, 0x38234000, 0x38238000, 0x3823C000,
  0x38240000, 0x38244000, 0x38248000, 0x3824C000, 0x38250000, 0x38254000, 0x38258000, 0x3825C000, 0x38260000, 0x38264000, 0x38268000, 0x3826C000, 0x38270000, 0x38274000, 0x38278000, 0x3827C000,
  0x38280000, 0x38284000, 0x38288000, 0x3828C000, 0x38290000, 0x38294000, 0x38298000, 0x3829C000, 0x382A0000, 0x382A4000, 0x382A8000, 0x382AC000, 0x382B0000, 0x382B4000, 0x382B8000, 0x382BC000,
  0x382C0000, 0x382C4000, 0x382C8000, 0x382CC000, 0x382D0000, 0x382D4000, 0x382D8000, 0x382DC000, 0x382E0000, 0x382E4000, 0x382E8000, 0x382EC000, 0x382F0000, 0x382F4000, 0x382F8000, 0x382FC000,
  0x38300000, 0x38304000, 0x38308000, 0x3830C000, 0x38310000, 0x38314000, 0x38318000, 0x3831C000, 0x38320000, 0x38324000, 0x38328000, 0x3832C000, 0x38330000, 0x38334000, 0x38338000, 0x3833C000,
  0x38340000, 0x38344000, 0x38348000, 0x3834C000, 0x38350000, 0x38354000, 0x38358000, 0x3835C000, 0x38360000, 0x38364000, 0x38368000, 0x3836C000, 0x38370000, 0x38374000, 0x38378000, 0x3837C000,
  0x38380000, 0x38384000, 0x38388000, 0x3838C000, 0x38390000, 0x38394000, 0x38398000, 0x3839C000, 0x383A0000, 0x383A4000, 0x383A8000, 0x383AC000, 0x383B0000, 0x383B4000, 0x383B8000, 0x383BC000,
  0x383C0000, 0x383C4000, 0x383C8000, 0x383CC000, 0x383D0000, 0x383D4000, 0x383D8000, 0x383DC000, 0x383E0000, 0x383E4000, 0x383E8000, 0x383EC000, 0x383F0000, 0x383F4000, 0x383F8000, 0x383FC000,
  0x38400000, 0x38404000, 0x38408000, 0x3840C000, 0x38410000, 0x38414000, 0x38418000, 0x3841C000, 0x38420000, 0x38424000, 0x38428000, 0x3842C000, 0x38430000, 0x38434000, 0x38438000, 0x3843C000,
  0x38440000, 0x38444000, 0x38448000, 0x3844C000, 0x38450000, 0x38454000, 0x38458000, 0x3845C000, 0x38460000, 0x38464000, 0x38468000, 0x3846C000, 0x38470000, 0x38474000, 0x38478000, 0x3847C000,
  0x38480000, 0x38484000, 0x38488000, 0x3848C000, 0x38490000, 0x38494000, 0x38498000, 0x3849C000, 0x384A0000, 0x384A4000, 0x384A8000, 0x384AC000, 0x384B0000, 0x384B4000, 0x384B8000, 0x384BC000,
  0x384C0000, 0x384C4000, 0x384C8000, 0x384CC000, 0x384D0000, 0x384D4000, 0x384D8000, 0x384DC000, 0x384E0000, 0x384E4000, 0x384E8000, 0x384EC000, 0x384F0000, 0x384F4000, 0x384F8000, 0x384FC000,
  0x38500000, 0x38504000, 0x38508000, 0x3850C000, 0x38510000, 0x38514000, 0x38518000, 0x3851C000, 0x38520000, 0x38524000, 0x38528000, 0x3852C000, 0x38530000, 0x38534000, 0x38538000, 0x3853C000,
  0x38540000, 0x38544000, 0x38548000, 0x3854C000, 0x38550000, 0x38554000, 0x38558000, 0x3855C000, 0x38560000, 0x38564000, 0x38568000, 0x3856C000, 0x38570000, 0x38574000, 0x38578000, 0x3857C000,
  0x38580000, 0x38584000, 0x38588000, 0x3858C000, 0x38590000, 0x38594000, 0x38598000, 0x3859C000, 0x385A0000, 0x385A4000, 0x385A8000, 0x385AC000, 0x385B0000, 0x385B4000, 0x385B8000, 0x385BC000,
  0x385C0000, 0x385C4000, 0x385C8000, 0x385CC000, 0x385D0000, 0x385D4000, 0x385D8000, 0x385DC000, 0x385E0000, 0x385E4000, 0x385E8000, 0x385EC000, 0x385F0000, 0x385F4000, 0x385F8000, 0x385FC000,
  0x38600000, 0x38604000, 0x38608000, 0x3860C000, 0x38610000, 0x38614000, 0x38618000, 0x3861C000, 0x38620000, 0x38624000, 0x38628000, 0x3862C000, 0x38630000, 0x38634000, 0x38638000, 0x3863C000,
  0x38640000, 0x38644000, 0x38648000, 0x3864C000, 0x38650000, 0x38654000, 0x38658000, 0x3865C000, 0x38660000, 0x38664000, 0x38668000, 0x3866C000, 0x38670000, 0x38674000, 0x38678000, 0x3867C000,
  0x38680000, 0x38684000, 0x38688000, 0x3868C000, 0x38690000, 0x38694000, 0x38698000, 0x3869C000, 0x386A0000, 0x386A4000, 0x386A8000, 0x386AC000, 0x386B0000, 0x386B4000, 0x386B8000, 0x386BC000,
  0x386C0000, 0x386C4000, 0x386C8000, 0x386CC000, 0x386D0000, 0x386D4000, 0x386D8000, 0x386DC000, 0x386E0000, 0x386E4000, 0x386E8000, 0x386EC000, 0x386F0000, 0x386F4000, 0x386F8000, 0x386FC000,
  0x38700000, 0x38704000, 0x38708000, 0x3870C000, 0x38710000, 0x38714000, 0x38718000, 0x3871C000, 0x38720000, 0x38724000, 0x38728000, 0x3872C000, 0x38730000, 0x38734000, 0x38738000, 0x3873C000,
  0x38740000, 0x38744000, 0x38748000, 0x3874C000, 0x38750000, 0x38754000, 0x38758000, 0x3875C000, 0x38760000, 0x38764000, 0x38768000, 0x3876C000, 0x38770000, 0x38774000, 0x38778000, 0x3877C000,
  0x38780000, 0x38784000, 0x38788000, 0x3878C000, 0x38790000, 0x38794000, 0x38798000, 0x3879C000, 0x387A0000, 0x387A4000, 0x387A8000, 0x387AC000, 0x387B0000, 0x387B4000, 0x387B8000, 0x387BC000,
  0x387C0000, 0x387C4000, 0x387C8000, 0x387CC000, 0x387D0000, 0x387D4000, 0x387D8000, 0x387DC000, 0x387E0000, 0x387E4000, 0x387E8000, 0x387EC000, 0x387F0000, 0x387F4000, 0x387F8000, 0x387FC000,
  0x38000000, 0x38002000, 0x38004000, 0x38006000, 0x38008000, 0x3800A000, 0x3800C000, 0x3800E000, 0x38010000, 0x38012000, 0x38014000, 0x38016000, 0x38018000, 0x3801A000, 0x3801C000, 0x3801E000,
  0x38020000, 0x38022000, 0x38024000, 0x38026000, 0x38028000, 0x3802A000, 0x3802C000, 0x3802E000, 0x38030000, 0x38032000, 0x38034000, 0x38036000, 0x38038000, 0x3803A000, 0x3803C000, 0x3803E000,
  0x38040000, 0x38042000, 0x38044000, 0x38046000, 0x38048000, 0x3804A000, 0x3804C000, 0x3804E000, 0x38050000, 0x38052000, 0x38054000, 0x38056000, 0x38058000, 0x3805A000, 0x3805C000, 0x3805E000,
  0x38060000, 0x38062000, 0x38064000, 0x38066000, 0x38068000, 0x3806A000, 0x3806C000, 0x3806E000, 0x38070000, 0x38072000, 0x38074000, 0x38076000, 0x38078000, 0x3807A000, 0x3807C000, 0x3807E000,
  0x38080000, 0x38082000, 0x38084000, 0x38086000, 0x38088000, 0x3808A000, 0x3808C000, 0x3808E000, 0x38090000, 0x38092000, 0x38094000, 0x38096000, 0x38098000, 0x3809A000, 0x3809C000, 0x3809E000,
  0x380A0000, 0x380A2000, 0x380A4000, 0x380A6000, 0x380A8000, 0x380AA000, 0x380AC000, 0x380AE000, 0x380B0000, 0x380B2000, 0x380B4000, 0x380B6000, 0x380B8000, 0x380BA000, 0x380BC000, 0x380BE000,
  0x380C0000, 0x380C2000, 0x380C4000, 0x380C6000, 0x380C8000, 0x380CA000, 0x380CC000, 0x380CE000, 0x380D0000, 0x380D2000, 0x380D4000, 0x380D6000, 0x380D8000, 0x380DA000, 0x380DC000, 0x380DE000,
  0x380E0000, 0x380E2000, 0x380E4000, 0x380E6000, 0x380E8000, 0x380EA000, 0x380EC000, 0x380EE000, 0x380F0000, 0x380F2000, 0x380F4000, 0x380F6000, 0x380F8000, 0x380FA000, 0x380FC000, 0x380FE000,
  0x38100000, 0x38102000, 0x38104000, 0x38106000, 0x38108000, 0x3810A000, 0x3810C000, 0x3810E000, 0x38110000, 0x38112000, 0x38114000, 0x38116000, 0x38118000, 0x3811A000, 0x3811C000, 0x3811E000,
  0x38120000, 0x38122000, 0x38124000, 0x38126000, 0x38128000, 0x3812A000, 0x3812C000, 0x3812E000, 0x38130000, 0x38132000, 0x38134000, 0x38136000, 0x38138000, 0x3813A000, 0x3813C000, 0x3813E000,
  0x38140000, 0x38142000, 0x38144000, 0x38146000, 0x38148000, 0x3814A000, 0x3814C000, 0x3814E000, 0x38150000, 0x38152000, 0x38154000, 0x38156000, 0x38158000, 0x3815A000, 0x3815C000, 0x3815E000,
  0x38160000, 0x38162000, 0x38164000, 0x38166000, 0x38168000, 0x3816A000, 0x3816C000, 0x3816E000, 0x38170000, 0x38172000, 0x38174000, 0x38176000, 0x38178000, 0x3817A000, 0x3817C000, 0x3817E000,
  0x38180000, 0x38182000, 0x38184000, 0x38186000, 0x38188000, 0x3818A000, 0x3818C000, 0x3818E000, 0x38190000, 0x38192000, 0x38194000, 0x38196000, 0x38198000, 0x3819A000, 0x3819C000, 0x3819E000,
  0x381A0000, 0x381A2000, 0x381A4000, 0x381A6000, 0x381A8000, 0x381AA000, 0x381AC000, 0x381AE000, 0x381B0000, 0x381B2000, 0x381B4000, 0x381B6000, 0x381B8000, 0x381BA000, 0x381BC000, 0x381BE000,
  0x381C0000, 0x381C2000, 0x381C4000, 0x381C6000, 0x381C8000, 0x381CA000, 0x381CC000, 0x381CE000, 0x381D0000, 0x381D2000, 0x381D4000, 0x381D6000, 0x381D8000, 0x381DA000, 0x381DC000, 0x381DE000,
  0x381E0000, 0x381E2000, 0x381E4000, 0x381E6000, 0x381E8000, 0x381EA000, 0x381EC000, 0x381EE000, 0x381F0000, 0x381F2000, 0x381F4000, 0x381F6000, 0x381F8000, 0x381FA000, 0x381FC000, 0x381FE000,
  0x38200000, 0x38202000, 0x38204000, 0x38206000, 0x38208000, 0x3820A000, 0x3820C000, 0x3820E000, 0x38210000, 0x38212000, 0x38214000, 0x38216000, 0x38218000, 0x3821A000, 0x3821C000, 0x3821E000,
  0x38220000, 0x38222000, 0x38224000, 0x38226000, 0x38228000, 0x3822A000, 0x3822C000, 0x3822E000, 0x38230000, 0x38232000, 0x38234000, 0x38236000, 0x38238000, 0x3823A000, 0x3823C000, 0x3823E000,
  0x38240000, 0x38242000, 0x38244000, 0x38246000, 0x38248000, 0x3824A000, 0x3824C000, 0x3824E000, 0x38250000, 0x38252000, 0x38254000, 0x38256000, 0x38258000, 0x3825A000, 0x3825C000, 0x3825E000,
  0x38260000, 0x38262000, 0x38264000, 0x38266000, 0x38268000, 0x3826A000, 0x3826C000, 0x3826E000, 0x38270000, 0x38272000, 0x38274000, 0x38276000, 0x38278000, 0x3827A000, 0x3827C000, 0x3827E000,
  0x38280000, 0x38282000, 0x38284000, 0x38286000, 0x38288000, 0x3828A000, 0x3828C000, 0x3828E000, 0x38290000, 0x38292000, 0x38294000, 0x38296000, 0x38298000, 0x3829A000, 0x3829C000, 0x3829E000,
  0x382A0000, 0x382A2000, 0x382A4000, 0x382A6000, 0x382A8000, 0x382AA000, 0x382AC000, 0x382AE000, 0x382B0000, 0x382B2000, 0x382B4000, 0x382B6000, 0x382B8000, 0x382BA000, 0x382BC000, 0x382BE000,
  0x382C0000, 0x382C2000, 0x382C4000, 0x382C6000, 0x382C8000, 0x382CA000, 0x382CC000, 0x382CE000, 0x382D0000, 0x382D2000, 0x382D4000, 0x382D6000, 0x382D8000, 0x382DA000, 0x382DC000, 0x382DE000,
  0x382E0000, 0x382E2000, 0x382E4000, 0x382E6000, 0x382E8000, 0x382EA000, 0x382EC000, 0x382EE000, 0x382F0000, 0x382F2000, 0x382F4000, 0x382F6000, 0x382F8000, 0x382FA000, 0x382FC000, 0x382FE000,
  0x38300000, 0x38302000, 0x38304000, 0x38306000, 0x38308000, 0x3830A000, 0x3830C000, 0x3830E000, 0x38310000, 0x38312000, 0x38314000, 0x38316000, 0x38318000, 0x3831A000, 0x3831C000, 0x3831E000,
  0x38320000, 0x38322000, 0x38324000, 0x38326000, 0x38328000, 0x3832A000, 0x3832C000, 0x3832E000, 0x38330000, 0x38332000, 0x38334000, 0x38336000, 0x38338000, 0x3833A000, 0x3833C000, 0x3833E000,
  0x38340000, 0x38342000, 0x38344000, 0x38346000, 0x38348000, 0x3834A000, 0x3834C000, 0x3834E000, 0x38350000, 0x38352000, 0x38354000, 0x38356000, 0x38358000, 0x3835A000, 0x3835C000, 0x3835E000,
  0x38360000, 0x38362000, 0x38364000, 0x38366000, 0x38368000, 0x3836A000, 0x3836C000, 0x3836E000, 0x38370000, 0x38372000, 0x38374000, 0x38376000, 0x38378000, 0x3837A000, 0x3837C000, 0x3837E000,
  0x38380000, 0x38382000, 0x38384000, 0x38386000, 0x38388000, 0x3838A000, 0x3838C000, 0x3838E000, 0x38390000, 0x38392000, 0x38394000, 0x38396000, 0x38398000, 0x3839A000, 0x3839C000, 0x3839E000,
  0x383A0000, 0x383A2000, 0x383A4000, 0x383A6000, 0x383A8000, 0x383AA000, 0x383AC000, 0x383AE000, 0x383B0000, 0x383B2000, 0x383B4000, 0x383B6000, 0x383B8000, 0x383BA000, 0x383BC000, 0x383BE000,
  0x383C0000, 0x383C2000, 0x383C4000, 0x383C6000, 0x383C8000, 0x383CA000, 0x383CC000, 0x383CE000, 0x383D0000, 0x383D2000, 0x383D4000, 0x383D6000, 0x383D8000, 0x383DA000, 0x383DC000, 0x383DE000,
  0x383E0000, 0x383E2000, 0x383E4000, 0x383E6000, 0x383E8000, 0x383EA000, 0x383EC000, 0x383EE000, 0x383F0000, 0x383F2000, 0x383F4000, 0x383F6000, 0x383F8000, 0x383FA000, 0x383FC000, 0x383FE000,
  0x38400000, 0x38402000, 0x38404000, 0x38406000, 0x38408000, 0x3840A000, 0x3840C000, 0x3840E000, 0x38410000, 0x38412000, 0x38414000, 0x38416000, 0x38418000, 0x3841A000, 0x3841C000, 0x3841E000,
  0x38420000, 0x38422000, 0x38424000, 0x38426000, 0x38428000, 0x3842A000, 0x3842C000, 0x3842E000, 0x38430000, 0x38432000, 0x38434000, 0x38436000, 0x38438000, 0x3843A000, 0x3843C000, 0x3843E000,
  0x38440000, 0x38442000, 0x38444000, 0x38446000, 0x38448000, 0x3844A000, 0x3844C000, 0x3844E000, 0x38450000, 0x38452000, 0x38454000, 0x38456000, 0x38458000, 0x3845A000, 0x3845C000, 0x3845E000,
  0x38460000, 0x38462000, 0x38464000, 0x38466000, 0x38468000, 0x3846A000, 0x3846C000, 0x3846E000, 0x38470000, 0x38472000, 0x38474000, 0x38476000, 0x38478000, 0x3847A000, 0x3847C000, 0x3847E000,
  0x38480000, 0x38482000, 0x38484000, 0x38486000, 0x38488000, 0x3848A000, 0x3848C000, 0x3848E000, 0x38490000, 0x38492000, 0x38494000, 0x38496000, 0x38498000, 0x3849A000, 0x3849C000, 0x3849E000,
  0x384A0000, 0x384A2000, 0x384A4000, 0x384A6000, 0x384A8000, 0x384AA000, 0x384AC000, 0x384AE000, 0x384B0000, 0x384B2000, 0x384B4000, 0x384B6000, 0x384B8000, 0x384BA000, 0x384BC000, 0x384BE000,
  0x384C0000, 0x384C2000, 0x384C4000, 0x384C6000, 0x384C8000, 0x384CA000, 0x384CC000, 0x384CE000, 0x384D0000, 0x384D2000, 0x384D4000, 0x384D6000, 0x384D8000, 0x384DA000, 0x384DC000, 0x384DE000,
  0x384E0000, 0x384E2000, 0x384E4000, 0x384E6000, 0x384E8000, 0x384EA000, 0x384EC000, 0x384EE000, 0x384F0000, 0x384F2000, 0x384F4000, 0x384F6000, 0x384F8000, 0x384FA000, 0x384FC000, 0x384FE000,
  0x38500000, 0x38502000, 0x38504000, 0x38506000, 0x38508000, 0x3850A000, 0x3850C000, 0x3850E000, 0x38510000, 0x38512000, 0x38514000, 0x38516000, 0x38518000, 0x3851A000, 0x3851C000, 0x3851E000,
  0x38520000, 0x38522000, 0x38524000, 0x38526000, 0x38528000, 0x3852A000, 0x3852C000, 0x3852E000, 0x38530000, 0x38532000, 0x38534000, 0x38536000, 0x38538000, 0x3853A000, 0x3853C000, 0x3853E000,
  0x38540000, 0x38542000, 0x38544000, 0x38546000, 0x38548000, 0x3854A000, 0x3854C000, 0x3854E000, 0x38550000, 0x38552000, 0x38554000, 0x38556000, 0x38558000, 0x3855A000, 0x3855C000, 0x3855E000,
  0x38560000, 0x38562000, 0x38564000, 0x38566000, 0x38568000, 0x3856A000, 0x3856C000, 0x3856E000, 0x38570000, 0x38572000, 0x38574000, 0x38576000, 0x38578000, 0x3857A000, 0x3857C000, 0x3857E000,
  0x38580000, 0x38582000, 0x38584000, 0x38586000, 0x38588000, 0x3858A000, 0x3858C000, 0x3858E000, 0x38590000, 0x38592000, 0x38594000, 0x38596000, 0x38598000, 0x3859A000, 0x3859C000, 0x3859E000,
  0x385A0000, 0x385A2000, 0x385A4000, 0x385A6000, 0x385A8000, 0x385AA000, 0x385AC000, 0x385AE000, 0x385B0000, 0x385B2000, 0x385B4000, 0x385B6000, 0x385B8000, 0x385BA000, 0x385BC000, 0x385BE000,
  0x385C0000, 0x385C2000, 0x385C4000, 0x385C6000, 0x385C8000, 0x385CA000, 0x385CC000, 0x385CE000, 0x385D0000, 0x385D2000, 0x385D4000, 0x385D6000, 0x385D8000, 0x385DA000, 0x385DC000, 0x385DE000,
  0x385E0000, 0x385E2000, 0x385E4000, 0x385E6000, 0x385E8000, 0x385EA000, 0x385EC000, 0x385EE000, 0x385F0000, 0x385F2000, 0x385F4000, 0x385F6000, 0x385F8000, 0x385FA000, 0x385FC000, 0x385FE000,
  0x38600000, 0x38602000, 0x38604000, 0x38606000, 0x38608000, 0x3860A000, 0x3860C000, 0x3860E000, 0x38610000, 0x38612000, 0x38614000, 0x38616000, 0x38618000, 0x3861A000, 0x3861C000, 0x3861E000,
  0x38620000, 0x38622000, 0x38624000, 0x38626000, 0x38628000, 0x3862A000, 0x3862C000, 0x3862E000, 0x38630000, 0x38632000, 0x38634000, 0x38636000, 0x38638000, 0x3863A000, 0x3863C000, 0x3863E000,
  0x38640000, 0x38642000, 0x38644000, 0x38646000, 0x38648000, 0x3864A000, 0x3864C000, 0x3864E000, 0x38650000, 0x38652000, 0x38654000, 0x38656000, 0x38658000, 0x3865A000, 0x3865C000, 0x3865E000,
  0x38660000, 0x38662000, 0x38664000, 0x38666000, 0x38668000, 0x3866A000, 0x3866C000, 0x3866E000, 0x38670000, 0x38672000, 0x38674000, 0x38676000, 0x38678000, 0x3867A000, 0x3867C000, 0x3867E000,
  0x38680000, 0x38682000, 0x38684000, 0x38686000, 0x38688000, 0x3868A000, 0x3868C000, 0x3868E000, 0x38690000, 0x38692000, 0x38694000, 0x38696000, 0x38698000, 0x3869A000, 0x3869C000, 0x3869E000,
  0x386A0000, 0x386A2000, 0x386A4000, 0x386A6000, 0x386A8000, 0x386AA000, 0x386AC000, 0x386AE000, 0x386B0000, 0x386B2000, 0x386B4000, 0x386B6000, 0x386B8000, 0x386BA000, 0x386BC000, 0x386BE000,
  0x386C0000, 0x386C2000, 0x386C4000, 0x386C6000, 0x386C8000, 0x386CA000, 0x386CC000, 0x386CE000, 0x386D0000, 0x386D2000, 0x386D4000, 0x386D6000, 0x386D8000, 0x386DA000, 0x386DC000, 0x386DE000,
  0x386E0000, 0x386E2000, 0x386E4000, 0x386E6000, 0x386E8000, 0x386EA000, 0x386EC000, 0x386EE000, 0x386F0000, 0x386F2000, 0x386F4000, 0x386F6000, 0x386F8000, 0x386FA000, 0x386FC000, 0x386FE000,
  0x38700000, 0x38702000, 0x38704000, 0x38706000, 0x38708000, 0x3870A000, 0x3870C000, 0x3870E000, 0x38710000, 0x38712000, 0x38714000, 0x38716000, 0x38718000, 0x3871A000, 0x3871C000, 0x3871E000,
  0x38720000, 0x38722000, 0x38724000, 0x38726000, 0x38728000, 0x3872A000, 0x3872C000, 0x3872E000, 0x38730000, 0x38732000, 0x38734000, 0x38736000, 0x38738000, 0x3873A000, 0x3873C000, 0x3873E000,
  0x38740000, 0x38742000, 0x38744000, 0x38746000, 0x38748000, 0x3874A000, 0x3874C000, 0x3874E000, 0x38750000, 0x38752000, 0x38754000, 0x38756000, 0x38758000, 0x3875A000, 0x3875C000, 0x3875E000,
  0x38760000, 0x38762000, 0x38764000, 0x38766000, 0x38768000, 0x3876A000, 0x3876C000, 0x3876E000, 0x38770000, 0x38772000, 0x38774000, 0x38776000, 0x38778000, 0x3877A000, 0x3877C000, 0x3877E000,
  0x38780000, 0x38782000, 0x38784000, 0x38786000, 0x38788000, 0x3878A000, 0x3878C000, 0x3878E000, 0x38790000, 0x38792000, 0x38794000, 0x38796000, 0x38798000, 0x3879A000, 0x3879C000, 0x3879E000,
  0x387A0000, 0x387A2000, 0x387A4000, 0x387A6000, 0x387A8000, 0x387AA000, 0x387AC000, 0x387AE000, 0x387B0000, 0x387B2000, 0x387B4000, 0x387B6000, 0x387B8000, 0x387BA000, 0x387BC000, 0x387BE000,
  0x387C0000, 0x387C2000, 0x387C4000, 0x387C6000, 0x387C8000, 0x387CA000, 0x387CC000, 0x387CE000, 0x387D0000, 0x387D2000, 0x387D4000, 0x387D6000, 0x387D8000, 0x387DA000, 0x387DC000, 0x387DE000,
  0x387E0000, 0x387E2000, 0x387E4000, 0x387E6000, 0x387E8000, 0x387EA000, 0x387EC000, 0x387EE000, 0x387F0000, 0x387F2000, 0x387F4000, 0x387F6000, 0x387F8000, 0x387FA000, 0x387FC000, 0x387FE000 };
__constant static const uint32_t exponent_table[64] = {
  0x00000000, 0x00800000, 0x01000000, 0x01800000, 0x02000000, 0x02800000, 0x03000000, 0x03800000, 0x04000000, 0x04800000, 0x05000000, 0x05800000, 0x06000000, 0x06800000, 0x07000000, 0x07800000,
  0x08000000, 0x08800000, 0x09000000, 0x09800000, 0x0A000000, 0x0A800000, 0x0B000000, 0x0B800000, 0x0C000000, 0x0C800000, 0x0D000000, 0x0D800000, 0x0E000000, 0x0E800000, 0x0F000000, 0x47800000,
  0x80000000, 0x80800000, 0x81000000, 0x81800000, 0x82000000, 0x82800000, 0x83000000, 0x83800000, 0x84000000, 0x84800000, 0x85000000, 0x85800000, 0x86000000, 0x86800000, 0x87000000, 0x87800000,
  0x88000000, 0x88800000, 0x89000000, 0x89800000, 0x8A000000, 0x8A800000, 0x8B000000, 0x8B800000, 0x8C000000, 0x8C800000, 0x8D000000, 0x8D800000, 0x8E000000, 0x8E800000, 0x8F000000, 0xC7800000 };
__constant static const unsigned short offset_table[64] = {
  0, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
  0, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024 };

static uint16_t float2halfbits(float value) {
  union { float x; uint32_t y; } u;
  u.x = value;
  uint32_t bits = u.y;

  uint16_t hbits = base_table[bits>>23] + (uint16_t)((bits&0x7FFFFF)>>shift_table[bits>>23]);;

  return hbits;
}

static float halfbits2float(uint16_t value) {
  uint32_t bits = mantissa_table[offset_table[value>>10]+(value&0x3FF)] + exponent_table[value>>10];

  union { uint32_t x; float y; } u;
  u.x = bits;
  return u.y;
}

static uint16_t halfbitsnextafter(uint16_t from, uint16_t to) {
  int fabs = from & 0x7FFF, tabs = to & 0x7FFF;
  if(fabs > 0x7C00 || tabs > 0x7C00) {
    return ((from&0x7FFF)>0x7C00) ? (from|0x200) : (to|0x200);
  }
  if(from == to || !(fabs|tabs)) {
    return to;
  }
  if(!fabs) {
    return (to&0x8000)+1;
  }
  unsigned int out =
    from +
    (((from>>15)^(unsigned int)((from^(0x8000|(0x8000-(from>>15))))<(to^(0x8000|(0x8000-(to>>15))))))<<1)
    - 1;
  return out;
}

// End of half.h.
// Start of scalar.h.

// Implementation of the primitive scalar operations.  Very
// repetitive.  This code is inserted directly into both CUDA and
// OpenCL programs, as well as the CPU code, so it has some #ifdefs to
// work everywhere.  Some operations are defined as macros because
// this allows us to use them as constant expressions in things like
// array sizes and static initialisers.

// Some of the #ifdefs are because OpenCL uses type-generic functions
// for some operations (e.g. sqrt), while C and CUDA sensibly use
// distinct functions for different precisions (e.g. sqrtf() and
// sqrt()).  This is quite annoying.  Due to C's unfortunate casting
// rules, it is also really easy to accidentally implement
// floating-point functions in the wrong precision, so be careful.

// Double-precision definitions are only included if the preprocessor
// macro FUTHARK_F64_ENABLED is set.

static inline uint8_t add8(uint8_t x, uint8_t y) {
  return x + y;
}

static inline uint16_t add16(uint16_t x, uint16_t y) {
  return x + y;
}

static inline uint32_t add32(uint32_t x, uint32_t y) {
  return x + y;
}

static inline uint64_t add64(uint64_t x, uint64_t y) {
  return x + y;
}

static inline uint8_t sub8(uint8_t x, uint8_t y) {
  return x - y;
}

static inline uint16_t sub16(uint16_t x, uint16_t y) {
  return x - y;
}

static inline uint32_t sub32(uint32_t x, uint32_t y) {
  return x - y;
}

static inline uint64_t sub64(uint64_t x, uint64_t y) {
  return x - y;
}

static inline uint8_t mul8(uint8_t x, uint8_t y) {
  return x * y;
}

static inline uint16_t mul16(uint16_t x, uint16_t y) {
  return x * y;
}

static inline uint32_t mul32(uint32_t x, uint32_t y) {
  return x * y;
}

static inline uint64_t mul64(uint64_t x, uint64_t y) {
  return x * y;
}

#if ISPC

static inline uint8_t udiv8(uint8_t x, uint8_t y) {
  // This strange pattern is used to prevent the ISPC compiler from
  // causing SIGFPEs and bogus results on divisions where inactive lanes
  // have 0-valued divisors. It ensures that any inactive lane instead
  // has a divisor of 1. https://github.com/ispc/ispc/issues/2292
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

static inline uint16_t udiv16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x / ys;
}

static inline uint32_t udiv32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  

  return x / ys;
}

static inline uint64_t udiv64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  

  return x / ys;
}

static inline uint8_t udiv_up8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  

  return (x + y - 1) / ys;
}

static inline uint16_t udiv_up16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return (x + y - 1) / ys;
}

static inline uint32_t udiv_up32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return (x + y - 1) / ys;
}

static inline uint64_t udiv_up64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return (x + y - 1) / ys;
}

static inline uint8_t umod8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline uint16_t umod16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  

  return x % ys;
}

static inline uint32_t umod32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline uint64_t umod64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline uint8_t udiv_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline uint16_t udiv_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline uint32_t udiv_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline uint64_t udiv_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline uint8_t udiv_up_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : (x + y - 1) / ys;
}

static inline uint16_t udiv_up_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : (x + y - 1) / ys;
}

static inline uint32_t udiv_up_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : (x + y - 1) / ys;
}

static inline uint64_t udiv_up_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : (x + y - 1) / ys;
}

static inline uint8_t umod_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline uint16_t umod_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline uint32_t umod_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline uint64_t umod_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline int8_t sdiv8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int8_t q = x / ys;
  int8_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int16_t sdiv16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int16_t q = x / ys;
  int16_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int32_t sdiv32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  int32_t q = x / ys;
  int32_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int64_t sdiv64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int64_t q = x / ys;
  int64_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int8_t sdiv_up8(int8_t x, int8_t y) {
  return sdiv8(x + y - 1, y);
}

static inline int16_t sdiv_up16(int16_t x, int16_t y) {
  return sdiv16(x + y - 1, y);
}

static inline int32_t sdiv_up32(int32_t x, int32_t y) {
  return sdiv32(x + y - 1, y);
}

static inline int64_t sdiv_up64(int64_t x, int64_t y) {
  return sdiv64(x + y - 1, y);
}

static inline int8_t smod8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int8_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int16_t smod16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int16_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int32_t smod32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int32_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int64_t smod64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  int64_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int8_t sdiv_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : sdiv8(x, y);
}

static inline int16_t sdiv_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : sdiv16(x, y);
}

static inline int32_t sdiv_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : sdiv32(x, y);
}

static inline int64_t sdiv_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : sdiv64(x, y);
}

static inline int8_t sdiv_up_safe8(int8_t x, int8_t y) {
  return sdiv_safe8(x + y - 1, y);
}

static inline int16_t sdiv_up_safe16(int16_t x, int16_t y) {
  return sdiv_safe16(x + y - 1, y);
}

static inline int32_t sdiv_up_safe32(int32_t x, int32_t y) {
  return sdiv_safe32(x + y - 1, y);
}

static inline int64_t sdiv_up_safe64(int64_t x, int64_t y) {
  return sdiv_safe64(x + y - 1, y);
}

static inline int8_t smod_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : smod8(x, y);
}

static inline int16_t smod_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : smod16(x, y);
}

static inline int32_t smod_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : smod32(x, y);
}

static inline int64_t smod_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : smod64(x, y);
}

static inline int8_t squot8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x / ys;
}

static inline int16_t squot16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x / ys;
}

static inline int32_t squot32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x / ys;
}

static inline int64_t squot64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x / ys;
}

static inline int8_t srem8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline int16_t srem16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline int32_t srem32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline int64_t srem64(int64_t x, int64_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return x % ys;
}

static inline int8_t squot_safe8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline int16_t squot_safe16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline int32_t squot_safe32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline int64_t squot_safe64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x / ys;
}

static inline int8_t srem_safe8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline int16_t srem_safe16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline int32_t srem_safe32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

static inline int64_t srem_safe64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  
  return y == 0 ? 0 : x % ys;
}

#else

static inline uint8_t udiv8(uint8_t x, uint8_t y) {
  return x / y;
}

static inline uint16_t udiv16(uint16_t x, uint16_t y) {
  return x / y;
}

static inline uint32_t udiv32(uint32_t x, uint32_t y) {
  return x / y;
}

static inline uint64_t udiv64(uint64_t x, uint64_t y) {
  return x / y;
}

static inline uint8_t udiv_up8(uint8_t x, uint8_t y) {
  return (x + y - 1) / y;
}

static inline uint16_t udiv_up16(uint16_t x, uint16_t y) {
  return (x + y - 1) / y;
}

static inline uint32_t udiv_up32(uint32_t x, uint32_t y) {
  return (x + y - 1) / y;
}

static inline uint64_t udiv_up64(uint64_t x, uint64_t y) {
  return (x + y - 1) / y;
}

static inline uint8_t umod8(uint8_t x, uint8_t y) {
  return x % y;
}

static inline uint16_t umod16(uint16_t x, uint16_t y) {
  return x % y;
}

static inline uint32_t umod32(uint32_t x, uint32_t y) {
  return x % y;
}

static inline uint64_t umod64(uint64_t x, uint64_t y) {
  return x % y;
}

static inline uint8_t udiv_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : x / y;
}

static inline uint16_t udiv_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : x / y;
}

static inline uint32_t udiv_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : x / y;
}

static inline uint64_t udiv_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : x / y;
}

static inline uint8_t udiv_up_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

static inline uint16_t udiv_up_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

static inline uint32_t udiv_up_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

static inline uint64_t udiv_up_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

static inline uint8_t umod_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : x % y;
}

static inline uint16_t umod_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : x % y;
}

static inline uint32_t umod_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : x % y;
}

static inline uint64_t umod_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : x % y;
}

static inline int8_t sdiv8(int8_t x, int8_t y) {
  int8_t q = x / y;
  int8_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int16_t sdiv16(int16_t x, int16_t y) {
  int16_t q = x / y;
  int16_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int32_t sdiv32(int32_t x, int32_t y) {
  int32_t q = x / y;
  int32_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int64_t sdiv64(int64_t x, int64_t y) {
  int64_t q = x / y;
  int64_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

static inline int8_t sdiv_up8(int8_t x, int8_t y) {
  return sdiv8(x + y - 1, y);
}

static inline int16_t sdiv_up16(int16_t x, int16_t y) {
  return sdiv16(x + y - 1, y);
}

static inline int32_t sdiv_up32(int32_t x, int32_t y) {
  return sdiv32(x + y - 1, y);
}

static inline int64_t sdiv_up64(int64_t x, int64_t y) {
  return sdiv64(x + y - 1, y);
}

static inline int8_t smod8(int8_t x, int8_t y) {
  int8_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int16_t smod16(int16_t x, int16_t y) {
  int16_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int32_t smod32(int32_t x, int32_t y) {
  int32_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int64_t smod64(int64_t x, int64_t y) {
  int64_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

static inline int8_t sdiv_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : sdiv8(x, y);
}

static inline int16_t sdiv_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : sdiv16(x, y);
}

static inline int32_t sdiv_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : sdiv32(x, y);
}

static inline int64_t sdiv_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : sdiv64(x, y);
}

static inline int8_t sdiv_up_safe8(int8_t x, int8_t y) {
  return sdiv_safe8(x + y - 1, y);
}

static inline int16_t sdiv_up_safe16(int16_t x, int16_t y) {
  return sdiv_safe16(x + y - 1, y);
}

static inline int32_t sdiv_up_safe32(int32_t x, int32_t y) {
  return sdiv_safe32(x + y - 1, y);
}

static inline int64_t sdiv_up_safe64(int64_t x, int64_t y) {
  return sdiv_safe64(x + y - 1, y);
}

static inline int8_t smod_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : smod8(x, y);
}

static inline int16_t smod_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : smod16(x, y);
}

static inline int32_t smod_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : smod32(x, y);
}

static inline int64_t smod_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : smod64(x, y);
}

static inline int8_t squot8(int8_t x, int8_t y) {
  return x / y;
}

static inline int16_t squot16(int16_t x, int16_t y) {
  return x / y;
}

static inline int32_t squot32(int32_t x, int32_t y) {
  return x / y;
}

static inline int64_t squot64(int64_t x, int64_t y) {
  return x / y;
}

static inline int8_t srem8(int8_t x, int8_t y) {
  return x % y;
}

static inline int16_t srem16(int16_t x, int16_t y) {
  return x % y;
}

static inline int32_t srem32(int32_t x, int32_t y) {
  return x % y;
}

static inline int64_t srem64(int64_t x, int64_t y) {
  return x % y;
}

static inline int8_t squot_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : x / y;
}

static inline int16_t squot_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : x / y;
}

static inline int32_t squot_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : x / y;
}

static inline int64_t squot_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : x / y;
}

static inline int8_t srem_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : x % y;
}

static inline int16_t srem_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : x % y;
}

static inline int32_t srem_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : x % y;
}

static inline int64_t srem_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : x % y;
}

#endif

static inline int8_t smin8(int8_t x, int8_t y) {
  return x < y ? x : y;
}

static inline int16_t smin16(int16_t x, int16_t y) {
  return x < y ? x : y;
}

static inline int32_t smin32(int32_t x, int32_t y) {
  return x < y ? x : y;
}

static inline int64_t smin64(int64_t x, int64_t y) {
  return x < y ? x : y;
}

static inline uint8_t umin8(uint8_t x, uint8_t y) {
  return x < y ? x : y;
}

static inline uint16_t umin16(uint16_t x, uint16_t y) {
  return x < y ? x : y;
}

static inline uint32_t umin32(uint32_t x, uint32_t y) {
  return x < y ? x : y;
}

static inline uint64_t umin64(uint64_t x, uint64_t y) {
  return x < y ? x : y;
}

static inline int8_t smax8(int8_t x, int8_t y) {
  return x < y ? y : x;
}

static inline int16_t smax16(int16_t x, int16_t y) {
  return x < y ? y : x;
}

static inline int32_t smax32(int32_t x, int32_t y) {
  return x < y ? y : x;
}

static inline int64_t smax64(int64_t x, int64_t y) {
  return x < y ? y : x;
}

static inline uint8_t umax8(uint8_t x, uint8_t y) {
  return x < y ? y : x;
}

static inline uint16_t umax16(uint16_t x, uint16_t y) {
  return x < y ? y : x;
}

static inline uint32_t umax32(uint32_t x, uint32_t y) {
  return x < y ? y : x;
}

static inline uint64_t umax64(uint64_t x, uint64_t y) {
  return x < y ? y : x;
}

static inline uint8_t shl8(uint8_t x, uint8_t y) {
  return (uint8_t)(x << y);
}

static inline uint16_t shl16(uint16_t x, uint16_t y) {
  return (uint16_t)(x << y);
}

static inline uint32_t shl32(uint32_t x, uint32_t y) {
  return x << y;
}

static inline uint64_t shl64(uint64_t x, uint64_t y) {
  return x << y;
}

static inline uint8_t lshr8(uint8_t x, uint8_t y) {
  return x >> y;
}

static inline uint16_t lshr16(uint16_t x, uint16_t y) {
  return x >> y;
}

static inline uint32_t lshr32(uint32_t x, uint32_t y) {
  return x >> y;
}

static inline uint64_t lshr64(uint64_t x, uint64_t y) {
  return x >> y;
}

static inline int8_t ashr8(int8_t x, int8_t y) {
  return x >> y;
}

static inline int16_t ashr16(int16_t x, int16_t y) {
  return x >> y;
}

static inline int32_t ashr32(int32_t x, int32_t y) {
  return x >> y;
}

static inline int64_t ashr64(int64_t x, int64_t y) {
  return x >> y;
}

static inline uint8_t and8(uint8_t x, uint8_t y) {
  return x & y;
}

static inline uint16_t and16(uint16_t x, uint16_t y) {
  return x & y;
}

static inline uint32_t and32(uint32_t x, uint32_t y) {
  return x & y;
}

static inline uint64_t and64(uint64_t x, uint64_t y) {
  return x & y;
}

static inline uint8_t or8(uint8_t x, uint8_t y) {
  return x | y;
}

static inline uint16_t or16(uint16_t x, uint16_t y) {
  return x | y;
}

static inline uint32_t or32(uint32_t x, uint32_t y) {
  return x | y;
}

static inline uint64_t or64(uint64_t x, uint64_t y) {
  return x | y;
}

static inline uint8_t xor8(uint8_t x, uint8_t y) {
  return x ^ y;
}

static inline uint16_t xor16(uint16_t x, uint16_t y) {
  return x ^ y;
}

static inline uint32_t xor32(uint32_t x, uint32_t y) {
  return x ^ y;
}

static inline uint64_t xor64(uint64_t x, uint64_t y) {
  return x ^ y;
}

static inline bool ult8(uint8_t x, uint8_t y) {
  return x < y;
}

static inline bool ult16(uint16_t x, uint16_t y) {
  return x < y;
}

static inline bool ult32(uint32_t x, uint32_t y) {
  return x < y;
}

static inline bool ult64(uint64_t x, uint64_t y) {
  return x < y;
}

static inline bool ule8(uint8_t x, uint8_t y) {
  return x <= y;
}

static inline bool ule16(uint16_t x, uint16_t y) {
  return x <= y;
}

static inline bool ule32(uint32_t x, uint32_t y) {
  return x <= y;
}

static inline bool ule64(uint64_t x, uint64_t y) {
  return x <= y;
}

static inline bool slt8(int8_t x, int8_t y) {
  return x < y;
}

static inline bool slt16(int16_t x, int16_t y) {
  return x < y;
}

static inline bool slt32(int32_t x, int32_t y) {
  return x < y;
}

static inline bool slt64(int64_t x, int64_t y) {
  return x < y;
}

static inline bool sle8(int8_t x, int8_t y) {
  return x <= y;
}

static inline bool sle16(int16_t x, int16_t y) {
  return x <= y;
}

static inline bool sle32(int32_t x, int32_t y) {
  return x <= y;
}

static inline bool sle64(int64_t x, int64_t y) {
  return x <= y;
}

static inline uint8_t pow8(uint8_t x, uint8_t y) {
  uint8_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

static inline uint16_t pow16(uint16_t x, uint16_t y) {
  uint16_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

static inline uint32_t pow32(uint32_t x, uint32_t y) {
  uint32_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

static inline uint64_t pow64(uint64_t x, uint64_t y) {
  uint64_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

static inline bool itob_i8_bool(int8_t x) {
  return x != 0;
}

static inline bool itob_i16_bool(int16_t x) {
  return x != 0;
}

static inline bool itob_i32_bool(int32_t x) {
  return x != 0;
}

static inline bool itob_i64_bool(int64_t x) {
  return x != 0;
}

static inline int8_t btoi_bool_i8(bool x) {
  return x;
}

static inline int16_t btoi_bool_i16(bool x) {
  return x;
}

static inline int32_t btoi_bool_i32(bool x) {
  return x;
}

static inline int64_t btoi_bool_i64(bool x) {
  return x;
}

#define sext_i8_i8(x) ((int8_t) (int8_t) (x))
#define sext_i8_i16(x) ((int16_t) (int8_t) (x))
#define sext_i8_i32(x) ((int32_t) (int8_t) (x))
#define sext_i8_i64(x) ((int64_t) (int8_t) (x))
#define sext_i16_i8(x) ((int8_t) (int16_t) (x))
#define sext_i16_i16(x) ((int16_t) (int16_t) (x))
#define sext_i16_i32(x) ((int32_t) (int16_t) (x))
#define sext_i16_i64(x) ((int64_t) (int16_t) (x))
#define sext_i32_i8(x) ((int8_t) (int32_t) (x))
#define sext_i32_i16(x) ((int16_t) (int32_t) (x))
#define sext_i32_i32(x) ((int32_t) (int32_t) (x))
#define sext_i32_i64(x) ((int64_t) (int32_t) (x))
#define sext_i64_i8(x) ((int8_t) (int64_t) (x))
#define sext_i64_i16(x) ((int16_t) (int64_t) (x))
#define sext_i64_i32(x) ((int32_t) (int64_t) (x))
#define sext_i64_i64(x) ((int64_t) (int64_t) (x))
#define zext_i8_i8(x) ((int8_t) (uint8_t) (x))
#define zext_i8_i16(x) ((int16_t) (uint8_t) (x))
#define zext_i8_i32(x) ((int32_t) (uint8_t) (x))
#define zext_i8_i64(x) ((int64_t) (uint8_t) (x))
#define zext_i16_i8(x) ((int8_t) (uint16_t) (x))
#define zext_i16_i16(x) ((int16_t) (uint16_t) (x))
#define zext_i16_i32(x) ((int32_t) (uint16_t) (x))
#define zext_i16_i64(x) ((int64_t) (uint16_t) (x))
#define zext_i32_i8(x) ((int8_t) (uint32_t) (x))
#define zext_i32_i16(x) ((int16_t) (uint32_t) (x))
#define zext_i32_i32(x) ((int32_t) (uint32_t) (x))
#define zext_i32_i64(x) ((int64_t) (uint32_t) (x))
#define zext_i64_i8(x) ((int8_t) (uint64_t) (x))
#define zext_i64_i16(x) ((int16_t) (uint64_t) (x))
#define zext_i64_i32(x) ((int32_t) (uint64_t) (x))
#define zext_i64_i64(x) ((int64_t) (uint64_t) (x))

static int8_t abs8(int8_t x) {
  return (int8_t)abs(x);
}

static int16_t abs16(int16_t x) {
  return (int16_t)abs(x);
}

static int32_t abs32(int32_t x) {
  return abs(x);
}

static int64_t abs64(int64_t x) {
#if defined(__OPENCL_VERSION__) || defined(ISPC)
  return abs(x);
#else
  return llabs(x);
#endif
}

#if defined(__OPENCL_VERSION__)
static int32_t futrts_popc8(int8_t x) {
  return popcount(x);
}

static int32_t futrts_popc16(int16_t x) {
  return popcount(x);
}

static int32_t futrts_popc32(int32_t x) {
  return popcount(x);
}

static int32_t futrts_popc64(int64_t x) {
  return popcount(x);
}
#elif defined(__CUDA_ARCH__)

static int32_t futrts_popc8(int8_t x) {
  return __popc(zext_i8_i32(x));
}

static int32_t futrts_popc16(int16_t x) {
  return __popc(zext_i16_i32(x));
}

static int32_t futrts_popc32(int32_t x) {
  return __popc(x);
}

static int32_t futrts_popc64(int64_t x) {
  return __popcll(x);
}

#else // Not OpenCL or CUDA, but plain C.

static int32_t futrts_popc8(uint8_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

static int32_t futrts_popc16(uint16_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

static int32_t futrts_popc32(uint32_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

static int32_t futrts_popc64(uint64_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}
#endif

#if defined(__OPENCL_VERSION__)
static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b) {
  return mul_hi(a, b);
}

static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b) {
  return mul_hi(a, b);
}

static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b) {
  return mul_hi(a, b);
}

static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b) {
  return mul_hi(a, b);
}

#elif defined(__CUDA_ARCH__)

static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b) {
  uint16_t aa = a;
  uint16_t bb = b;

  return aa * bb >> 8;
}

static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b) {
  uint32_t aa = a;
  uint32_t bb = b;

  return aa * bb >> 16;
}

static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b) {
  return mulhi(a, b);
}

static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b) {
  return mul64hi(a, b);
}

#elif ISPC

static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b) {
  uint16_t aa = a;
  uint16_t bb = b;

  return aa * bb >> 8;
}

static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b) {
  uint32_t aa = a;
  uint32_t bb = b;

  return aa * bb >> 16;
}

static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b) {
  uint64_t aa = a;
  uint64_t bb = b;

  return aa * bb >> 32;
}

static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b) {
  uint64_t ah = a >> 32;
  uint64_t al = a & 0xffffffff;
  uint64_t bh = b >> 32;
  uint64_t bl = b & 0xffffffff;

  uint64_t p1 = al * bl;
  uint64_t p2 = al * bh;
  uint64_t p3 = ah * bl;
  uint64_t p4 = ah * bh;

  uint64_t p1h = p1 >> 32;
  uint64_t p2h = p2 >> 32;
  uint64_t p3h = p3 >> 32;
  uint64_t p2l = p2 & 0xffffffff;
  uint64_t p3l = p3 & 0xffffffff;

  uint64_t l = p1h + p2l  + p3l;
  uint64_t m = (p2 >> 32) + (p3 >> 32);
  uint64_t h = (l >> 32) + m + p4;

  return h;
}

#else // Not OpenCL, ISPC, or CUDA, but plain C.

static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b) {
  uint16_t aa = a;
  uint16_t bb = b;

  return aa * bb >> 8;
}

static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b) {
  uint32_t aa = a;
  uint32_t bb = b;

  return aa * bb >> 16;
}

static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b) {
  uint64_t aa = a;
  uint64_t bb = b;

  return aa * bb >> 32;
}

static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b) {
  __uint128_t aa = a;
  __uint128_t bb = b;

  return aa * bb >> 64;
}
#endif

#if defined(__OPENCL_VERSION__)
static uint8_t futrts_mad_hi8(uint8_t a, uint8_t b, uint8_t c) {
  return mad_hi(a, b, c);
}

static uint16_t futrts_mad_hi16(uint16_t a, uint16_t b, uint16_t c) {
  return mad_hi(a, b, c);
}

static uint32_t futrts_mad_hi32(uint32_t a, uint32_t b, uint32_t c) {
  return mad_hi(a, b, c);
}

static uint64_t futrts_mad_hi64(uint64_t a, uint64_t b, uint64_t c) {
  return mad_hi(a, b, c);
}

#else // Not OpenCL

static uint8_t futrts_mad_hi8(uint8_t a, uint8_t b, uint8_t c) {
  return futrts_mul_hi8(a, b) + c;
}

static uint16_t futrts_mad_hi16(uint16_t a, uint16_t b, uint16_t c) {
  return futrts_mul_hi16(a, b) + c;
}

static uint32_t futrts_mad_hi32(uint32_t a, uint32_t b, uint32_t c) {
  return futrts_mul_hi32(a, b) + c;
}

static uint64_t futrts_mad_hi64(uint64_t a, uint64_t b, uint64_t c) {
  return futrts_mul_hi64(a, b) + c;
}
#endif

#if defined(__OPENCL_VERSION__)
static int32_t futrts_clzz8(int8_t x) {
  return clz(x);
}

static int32_t futrts_clzz16(int16_t x) {
  return clz(x);
}

static int32_t futrts_clzz32(int32_t x) {
  return clz(x);
}

static int32_t futrts_clzz64(int64_t x) {
  return clz(x);
}

#elif defined(__CUDA_ARCH__)

static int32_t futrts_clzz8(int8_t x) {
  return __clz(zext_i8_i32(x)) - 24;
}

static int32_t futrts_clzz16(int16_t x) {
  return __clz(zext_i16_i32(x)) - 16;
}

static int32_t futrts_clzz32(int32_t x) {
  return __clz(x);
}

static int32_t futrts_clzz64(int64_t x) {
  return __clzll(x);
}

#elif ISPC

static int32_t futrts_clzz8(int8_t x) {
  return count_leading_zeros((int32_t)(uint8_t)x)-24;
}

static int32_t futrts_clzz16(int16_t x) {
  return count_leading_zeros((int32_t)(uint16_t)x)-16;
}

static int32_t futrts_clzz32(int32_t x) {
  return count_leading_zeros(x);
}

static int32_t futrts_clzz64(int64_t x) {
  return count_leading_zeros(x);
}

#else // Not OpenCL, ISPC or CUDA, but plain C.

static int32_t futrts_clzz8(int8_t x) {
  return x == 0 ? 8 : __builtin_clz((uint32_t)zext_i8_i32(x)) - 24;
}

static int32_t futrts_clzz16(int16_t x) {
  return x == 0 ? 16 : __builtin_clz((uint32_t)zext_i16_i32(x)) - 16;
}

static int32_t futrts_clzz32(int32_t x) {
  return x == 0 ? 32 : __builtin_clz((uint32_t)x);
}

static int32_t futrts_clzz64(int64_t x) {
  return x == 0 ? 64 : __builtin_clzll((uint64_t)x);
}
#endif

#if defined(__OPENCL_VERSION__)
static int32_t futrts_ctzz8(int8_t x) {
  int i = 0;
  for (; i < 8 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

static int32_t futrts_ctzz16(int16_t x) {
  int i = 0;
  for (; i < 16 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

static int32_t futrts_ctzz32(int32_t x) {
  int i = 0;
  for (; i < 32 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

static int32_t futrts_ctzz64(int64_t x) {
  int i = 0;
  for (; i < 64 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

#elif defined(__CUDA_ARCH__)

static int32_t futrts_ctzz8(int8_t x) {
  int y = __ffs(x);
  return y == 0 ? 8 : y - 1;
}

static int32_t futrts_ctzz16(int16_t x) {
  int y = __ffs(x);
  return y == 0 ? 16 : y - 1;
}

static int32_t futrts_ctzz32(int32_t x) {
  int y = __ffs(x);
  return y == 0 ? 32 : y - 1;
}

static int32_t futrts_ctzz64(int64_t x) {
  int y = __ffsll(x);
  return y == 0 ? 64 : y - 1;
}

#elif ISPC

static int32_t futrts_ctzz8(int8_t x) {
  return x == 0 ? 8 : count_trailing_zeros((int32_t)x);
}

static int32_t futrts_ctzz16(int16_t x) {
  return x == 0 ? 16 : count_trailing_zeros((int32_t)x);
}

static int32_t futrts_ctzz32(int32_t x) {
  return count_trailing_zeros(x);
}

static int32_t futrts_ctzz64(int64_t x) {
  return count_trailing_zeros(x);
}

#else // Not OpenCL or CUDA, but plain C.

static int32_t futrts_ctzz8(int8_t x) {
  return x == 0 ? 8 : __builtin_ctz((uint32_t)x);
}

static int32_t futrts_ctzz16(int16_t x) {
  return x == 0 ? 16 : __builtin_ctz((uint32_t)x);
}

static int32_t futrts_ctzz32(int32_t x) {
  return x == 0 ? 32 : __builtin_ctz((uint32_t)x);
}

static int32_t futrts_ctzz64(int64_t x) {
  return x == 0 ? 64 : __builtin_ctzll((uint64_t)x);
}
#endif

static inline float fdiv32(float x, float y) {
  return x / y;
}

static inline float fadd32(float x, float y) {
  return x + y;
}

static inline float fsub32(float x, float y) {
  return x - y;
}

static inline float fmul32(float x, float y) {
  return x * y;
}

static inline bool cmplt32(float x, float y) {
  return x < y;
}

static inline bool cmple32(float x, float y) {
  return x <= y;
}

static inline float sitofp_i8_f32(int8_t x) {
  return (float) x;
}

static inline float sitofp_i16_f32(int16_t x) {
  return (float) x;
}

static inline float sitofp_i32_f32(int32_t x) {
  return (float) x;
}

static inline float sitofp_i64_f32(int64_t x) {
  return (float) x;
}

static inline float uitofp_i8_f32(uint8_t x) {
  return (float) x;
}

static inline float uitofp_i16_f32(uint16_t x) {
  return (float) x;
}

static inline float uitofp_i32_f32(uint32_t x) {
  return (float) x;
}

static inline float uitofp_i64_f32(uint64_t x) {
  return (float) x;
}

#ifdef __OPENCL_VERSION__
static inline float fabs32(float x) {
  return fabs(x);
}

static inline float fmax32(float x, float y) {
  return fmax(x, y);
}

static inline float fmin32(float x, float y) {
  return fmin(x, y);
}

static inline float fpow32(float x, float y) {
  return pow(x, y);
}

#elif ISPC

static inline float fabs32(float x) {
  return abs(x);
}

static inline float fmax32(float x, float y) {
  return isnan(x) ? y : isnan(y) ? x : max(x, y);
}

static inline float fmin32(float x, float y) {
  return isnan(x) ? y : isnan(y) ? x : min(x, y);
}

static inline float fpow32(float a, float b) {
  float ret;
  foreach_active (i) {
      uniform float r = __stdlib_powf(extract(a, i), extract(b, i));
      ret = insert(ret, i, r);
  }
  return ret;
}

#else // Not OpenCL, but CUDA or plain C.

static inline float fabs32(float x) {
  return fabsf(x);
}

static inline float fmax32(float x, float y) {
  return fmaxf(x, y);
}

static inline float fmin32(float x, float y) {
  return fminf(x, y);
}

static inline float fpow32(float x, float y) {
  return powf(x, y);
}
#endif

static inline bool futrts_isnan32(float x) {
  return isnan(x);
}

#if ISPC

static inline bool futrts_isinf32(float x) {
  return !isnan(x) && isnan(x - x);
}

static inline bool futrts_isfinite32(float x) {
  return !isnan(x) && !futrts_isinf32(x);
}

#else

static inline bool futrts_isinf32(float x) {
  return isinf(x);
}

#endif

static inline int8_t fptosi_f32_i8(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

static inline int16_t fptosi_f32_i16(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

static inline int32_t fptosi_f32_i32(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

static inline int64_t fptosi_f32_i64(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int64_t) x;
  };
}

static inline uint8_t fptoui_f32_i8(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

static inline uint16_t fptoui_f32_i16(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

static inline uint32_t fptoui_f32_i32(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

static inline uint64_t fptoui_f32_i64(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

static inline bool ftob_f32_bool(float x) {
  return x != 0;
}

static inline float btof_bool_f32(bool x) {
  return x ? 1 : 0;
}

#ifdef __OPENCL_VERSION__
static inline float futrts_log32(float x) {
  return log(x);
}

static inline float futrts_log2_32(float x) {
  return log2(x);
}

static inline float futrts_log10_32(float x) {
  return log10(x);
}

static inline float futrts_sqrt32(float x) {
  return sqrt(x);
}

static inline float futrts_cbrt32(float x) {
  return cbrt(x);
}

static inline float futrts_exp32(float x) {
  return exp(x);
}

static inline float futrts_cos32(float x) {
  return cos(x);
}

static inline float futrts_sin32(float x) {
  return sin(x);
}

static inline float futrts_tan32(float x) {
  return tan(x);
}

static inline float futrts_acos32(float x) {
  return acos(x);
}

static inline float futrts_asin32(float x) {
  return asin(x);
}

static inline float futrts_atan32(float x) {
  return atan(x);
}

static inline float futrts_cosh32(float x) {
  return cosh(x);
}

static inline float futrts_sinh32(float x) {
  return sinh(x);
}

static inline float futrts_tanh32(float x) {
  return tanh(x);
}

static inline float futrts_acosh32(float x) {
  return acosh(x);
}

static inline float futrts_asinh32(float x) {
  return asinh(x);
}

static inline float futrts_atanh32(float x) {
  return atanh(x);
}

static inline float futrts_atan2_32(float x, float y) {
  return atan2(x, y);
}

static inline float futrts_hypot32(float x, float y) {
  return hypot(x, y);
}

static inline float futrts_gamma32(float x) {
  return tgamma(x);
}

static inline float futrts_lgamma32(float x) {
  return lgamma(x);
}

static inline float futrts_erf32(float x) {
  return erf(x);
}

static inline float futrts_erfc32(float x) {
  return erfc(x);
}

static inline float fmod32(float x, float y) {
  return fmod(x, y);
}

static inline float futrts_round32(float x) {
  return rint(x);
}

static inline float futrts_floor32(float x) {
  return floor(x);
}

static inline float futrts_ceil32(float x) {
  return ceil(x);
}

static inline float futrts_nextafter32(float x, float y) {
  return nextafter(x, y);
}

static inline float futrts_lerp32(float v0, float v1, float t) {
  return mix(v0, v1, t);
}

static inline float futrts_mad32(float a, float b, float c) {
  return mad(a, b, c);
}

static inline float futrts_fma32(float a, float b, float c) {
  return fma(a, b, c);
}

#elif ISPC

static inline float futrts_log32(float x) {
  return futrts_isfinite32(x) || (futrts_isinf32(x) && x < 0)? log(x) : x;
}

static inline float futrts_log2_32(float x) {
  return futrts_log32(x) / log(2.0f);
}

static inline float futrts_log10_32(float x) {
  return futrts_log32(x) / log(10.0f);
}

static inline float futrts_sqrt32(float x) {
  return sqrt(x);
}

extern "C" unmasked uniform float cbrtf(uniform float);
static inline float futrts_cbrt32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = cbrtf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline float futrts_exp32(float x) {
  return exp(x);
}

static inline float futrts_cos32(float x) {
  return cos(x);
}

static inline float futrts_sin32(float x) {
  return sin(x);
}

static inline float futrts_tan32(float x) {
  return tan(x);
}

static inline float futrts_acos32(float x) {
  return acos(x);
}

static inline float futrts_asin32(float x) {
  return asin(x);
}

static inline float futrts_atan32(float x) {
  return atan(x);
}

static inline float futrts_cosh32(float x) {
  return (exp(x)+exp(-x)) / 2.0f;
}

static inline float futrts_sinh32(float x) {
  return (exp(x)-exp(-x)) / 2.0f;
}

static inline float futrts_tanh32(float x) {
  return futrts_sinh32(x)/futrts_cosh32(x);
}

static inline float futrts_acosh32(float x) {
  float f = x+sqrt(x*x-1);
  if(futrts_isfinite32(f)) return log(f);
  return f;
}

static inline float futrts_asinh32(float x) {
  float f = x+sqrt(x*x+1);
  if(futrts_isfinite32(f)) return log(f);
  return f;

}

static inline float futrts_atanh32(float x) {
  float f = (1+x)/(1-x);
  if(futrts_isfinite32(f)) return log(f)/2.0f;
  return f;

}

static inline float futrts_atan2_32(float x, float y) {
  return (x == 0.0f && y == 0.0f) ? 0.0f : atan2(x, y);
}

static inline float futrts_hypot32(float x, float y) {
  if (futrts_isfinite32(x) && futrts_isfinite32(y)) {
    x = abs(x);
    y = abs(y);
    float a;
    float b;
    if (x >= y){
        a = x;
        b = y;
    } else {
        a = y;
        b = x;
    }
    if(b == 0){
      return a;
    }

    int e;
    float an;
    float bn;
    an = frexp (a, &e);
    bn = ldexp (b, - e);
    float cn;
    cn = sqrt (an * an + bn * bn);
    return ldexp (cn, e);
  } else {
    if (futrts_isinf32(x) || futrts_isinf32(y)) return INFINITY;
    else return x + y;
  }

}

extern "C" unmasked uniform float tgammaf(uniform float x);
static inline float futrts_gamma32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = tgammaf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float lgammaf(uniform float x);
static inline float futrts_lgamma32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = lgammaf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float erff(uniform float x);
static inline float futrts_erf32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = erff(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float erfcf(uniform float x);
static inline float futrts_erfc32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = erfcf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline float fmod32(float x, float y) {
  return x - y * trunc(x/y);
}

static inline float futrts_round32(float x) {
  return round(x);
}

static inline float futrts_floor32(float x) {
  return floor(x);
}

static inline float futrts_ceil32(float x) {
  return ceil(x);
}

extern "C" unmasked uniform float nextafterf(uniform float x, uniform float y);
static inline float futrts_nextafter32(float x, float y) {
  float res;
  foreach_active (i) {
    uniform float r = nextafterf(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline float futrts_lerp32(float v0, float v1, float t) {
  return v0 + (v1 - v0) * t;
}

static inline float futrts_mad32(float a, float b, float c) {
  return a * b + c;
}

static inline float futrts_fma32(float a, float b, float c) {
  return a * b + c;
}

#else // Not OpenCL or ISPC, but CUDA or plain C.

static inline float futrts_log32(float x) {
  return logf(x);
}

static inline float futrts_log2_32(float x) {
  return log2f(x);
}

static inline float futrts_log10_32(float x) {
  return log10f(x);
}

static inline float futrts_sqrt32(float x) {
  return sqrtf(x);
}

static inline float futrts_cbrt32(float x) {
  return cbrtf(x);
}

static inline float futrts_exp32(float x) {
  return expf(x);
}

static inline float futrts_cos32(float x) {
  return cosf(x);
}

static inline float futrts_sin32(float x) {
  return sinf(x);
}

static inline float futrts_tan32(float x) {
  return tanf(x);
}

static inline float futrts_acos32(float x) {
  return acosf(x);
}

static inline float futrts_asin32(float x) {
  return asinf(x);
}

static inline float futrts_atan32(float x) {
  return atanf(x);
}

static inline float futrts_cosh32(float x) {
  return coshf(x);
}

static inline float futrts_sinh32(float x) {
  return sinhf(x);
}

static inline float futrts_tanh32(float x) {
  return tanhf(x);
}

static inline float futrts_acosh32(float x) {
  return acoshf(x);
}

static inline float futrts_asinh32(float x) {
  return asinhf(x);
}

static inline float futrts_atanh32(float x) {
  return atanhf(x);
}

static inline float futrts_atan2_32(float x, float y) {
  return atan2f(x, y);
}

static inline float futrts_hypot32(float x, float y) {
  return hypotf(x, y);
}

static inline float futrts_gamma32(float x) {
  return tgammaf(x);
}

static inline float futrts_lgamma32(float x) {
  return lgammaf(x);
}

static inline float futrts_erf32(float x) {
  return erff(x);
}

static inline float futrts_erfc32(float x) {
  return erfcf(x);
}

static inline float fmod32(float x, float y) {
  return fmodf(x, y);
}

static inline float futrts_round32(float x) {
  return rintf(x);
}

static inline float futrts_floor32(float x) {
  return floorf(x);
}

static inline float futrts_ceil32(float x) {
  return ceilf(x);
}

static inline float futrts_nextafter32(float x, float y) {
  return nextafterf(x, y);
}

static inline float futrts_lerp32(float v0, float v1, float t) {
  return v0 + (v1 - v0) * t;
}

static inline float futrts_mad32(float a, float b, float c) {
  return a * b + c;
}

static inline float futrts_fma32(float a, float b, float c) {
  return fmaf(a, b, c);
}
#endif

#if ISPC
static inline int32_t futrts_to_bits32(float x) {
  return intbits(x);
}

static inline float futrts_from_bits32(int32_t x) {
  return floatbits(x);
}
#else
static inline int32_t futrts_to_bits32(float x) {
  union {
    float f;
    int32_t t;
  } p;

  p.f = x;
  return p.t;
}

static inline float futrts_from_bits32(int32_t x) {
  union {
    int32_t f;
    float t;
  } p;

  p.f = x;
  return p.t;
}
#endif

static inline float fsignum32(float x) {
  return futrts_isnan32(x) ? x : (x > 0 ? 1 : 0) - (x < 0 ? 1 : 0);
}

#ifdef FUTHARK_F64_ENABLED

#if ISPC
static inline bool futrts_isinf64(float x) {
  return !isnan(x) && isnan(x - x);
}

static inline bool futrts_isfinite64(float x) {
  return !isnan(x) && !futrts_isinf64(x);
}

static inline double fdiv64(double x, double y) {
  return x / y;
}

static inline double fadd64(double x, double y) {
  return x + y;
}

static inline double fsub64(double x, double y) {
  return x - y;
}

static inline double fmul64(double x, double y) {
  return x * y;
}

static inline bool cmplt64(double x, double y) {
  return x < y;
}

static inline bool cmple64(double x, double y) {
  return x <= y;
}

static inline double sitofp_i8_f64(int8_t x) {
  return (double) x;
}

static inline double sitofp_i16_f64(int16_t x) {
  return (double) x;
}

static inline double sitofp_i32_f64(int32_t x) {
  return (double) x;
}

static inline double sitofp_i64_f64(int64_t x) {
  return (double) x;
}

static inline double uitofp_i8_f64(uint8_t x) {
  return (double) x;
}

static inline double uitofp_i16_f64(uint16_t x) {
  return (double) x;
}

static inline double uitofp_i32_f64(uint32_t x) {
  return (double) x;
}

static inline double uitofp_i64_f64(uint64_t x) {
  return (double) x;
}

static inline double fabs64(double x) {
  return abs(x);
}

static inline double fmax64(double x, double y) {
  return isnan(x) ? y : isnan(y) ? x : max(x, y);
}

static inline double fmin64(double x, double y) {
  return isnan(x) ? y : isnan(y) ? x : min(x, y);
}

static inline double fpow64(double a, double b) {
  float ret;
  foreach_active (i) {
      uniform float r = __stdlib_powf(extract(a, i), extract(b, i));
      ret = insert(ret, i, r);
  }
  return ret;
}

static inline double futrts_log64(double x) {
  return futrts_isfinite64(x) || (futrts_isinf64(x) && x < 0)? log(x) : x;
}

static inline double futrts_log2_64(double x) {
  return futrts_log64(x)/log(2.0d);
}

static inline double futrts_log10_64(double x) {
  return futrts_log64(x)/log(10.0d);
}

static inline double futrts_sqrt64(double x) {
  return sqrt(x);
}

extern "C" unmasked uniform double cbrt(uniform double);
static inline double futrts_cbrt64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = cbrtf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline double futrts_exp64(double x) {
  return exp(x);
}

static inline double futrts_cos64(double x) {
  return cos(x);
}

static inline double futrts_sin64(double x) {
  return sin(x);
}

static inline double futrts_tan64(double x) {
  return tan(x);
}

static inline double futrts_acos64(double x) {
  return acos(x);
}

static inline double futrts_asin64(double x) {
  return asin(x);
}

static inline double futrts_atan64(double x) {
  return atan(x);
}

static inline double futrts_cosh64(double x) {
  return (exp(x)+exp(-x)) / 2.0d;
}

static inline double futrts_sinh64(double x) {
  return (exp(x)-exp(-x)) / 2.0d;
}

static inline double futrts_tanh64(double x) {
  return futrts_sinh64(x)/futrts_cosh64(x);
}

static inline double futrts_acosh64(double x) {
  double f = x+sqrt(x*x-1.0d);
  if(futrts_isfinite64(f)) return log(f);
  return f;
}

static inline double futrts_asinh64(double x) {
  double f = x+sqrt(x*x+1.0d);
  if(futrts_isfinite64(f)) return log(f);
  return f;
}

static inline double futrts_atanh64(double x) {
  double f = (1.0d+x)/(1.0d-x);
  if(futrts_isfinite64(f)) return log(f)/2.0d;
  return f;

}

static inline double futrts_atan2_64(double x, double y) {
  return atan2(x, y);
}

extern "C" unmasked uniform double hypot(uniform double x, uniform double y);
static inline double futrts_hypot64(double x, double y) {
  double res;
  foreach_active (i) {
    uniform double r = hypot(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double tgamma(uniform double x);
static inline double futrts_gamma64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = tgamma(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double lgamma(uniform double x);
static inline double futrts_lgamma64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = lgamma(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double erf(uniform double x);
static inline double futrts_erf64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = erf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double erfc(uniform double x);
static inline double futrts_erfc64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = erfc(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline double futrts_fma64(double a, double b, double c) {
  return a * b + c;
}

static inline double futrts_round64(double x) {
  return round(x);
}

static inline double futrts_ceil64(double x) {
  return ceil(x);
}

extern "C" unmasked uniform double nextafter(uniform float x, uniform double y);
static inline float futrts_nextafter64(double x, double y) {
  double res;
  foreach_active (i) {
    uniform double r = nextafter(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline double futrts_floor64(double x) {
  return floor(x);
}

static inline bool futrts_isnan64(double x) {
  return isnan(x);
}

static inline int8_t fptosi_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

static inline int16_t fptosi_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

static inline int32_t fptosi_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

static inline int64_t fptosi_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int64_t) x;
  }
}

static inline uint8_t fptoui_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

static inline uint16_t fptoui_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

static inline uint32_t fptoui_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

static inline uint64_t fptoui_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

static inline bool ftob_f64_bool(double x) {
  return x != 0.0;
}

static inline double btof_bool_f64(bool x) {
  return x ? 1.0 : 0.0;
}

static inline int64_t futrts_to_bits64(double x) {
  int64_t res;
  foreach_active (i) {
    uniform double tmp = extract(x, i);
    uniform int64_t r = *((uniform int64_t* uniform)&tmp);
    res = insert(res, i, r);
  }
  return res;
}

static inline double futrts_from_bits64(int64_t x) {
  double res;
  foreach_active (i) {
    uniform int64_t tmp = extract(x, i);
    uniform double r = *((uniform double* uniform)&tmp);
    res = insert(res, i, r);
  }
  return res;
}

static inline double fmod64(double x, double y) {
  return x - y * trunc(x/y);
}

static inline double fsignum64(double x) {
  return futrts_isnan64(x) ? x : (x > 0 ? 1.0d : 0.0d) - (x < 0 ? 1.0d : 0.0d);
}

static inline double futrts_lerp64(double v0, double v1, double t) {
  return v0 + (v1 - v0) * t;
}

static inline double futrts_mad64(double a, double b, double c) {
  return a * b + c;
}

static inline float fpconv_f32_f32(float x) {
  return (float) x;
}

static inline double fpconv_f32_f64(float x) {
  return (double) x;
}

static inline float fpconv_f64_f32(double x) {
  return (float) x;
}

static inline double fpconv_f64_f64(double x) {
  return (double) x;
}

#else

static inline double fdiv64(double x, double y) {
  return x / y;
}

static inline double fadd64(double x, double y) {
  return x + y;
}

static inline double fsub64(double x, double y) {
  return x - y;
}

static inline double fmul64(double x, double y) {
  return x * y;
}

static inline bool cmplt64(double x, double y) {
  return x < y;
}

static inline bool cmple64(double x, double y) {
  return x <= y;
}

static inline double sitofp_i8_f64(int8_t x) {
  return (double) x;
}

static inline double sitofp_i16_f64(int16_t x) {
  return (double) x;
}

static inline double sitofp_i32_f64(int32_t x) {
  return (double) x;
}

static inline double sitofp_i64_f64(int64_t x) {
  return (double) x;
}

static inline double uitofp_i8_f64(uint8_t x) {
  return (double) x;
}

static inline double uitofp_i16_f64(uint16_t x) {
  return (double) x;
}

static inline double uitofp_i32_f64(uint32_t x) {
  return (double) x;
}

static inline double uitofp_i64_f64(uint64_t x) {
  return (double) x;
}

static inline double fabs64(double x) {
  return fabs(x);
}

static inline double fmax64(double x, double y) {
  return fmax(x, y);
}

static inline double fmin64(double x, double y) {
  return fmin(x, y);
}

static inline double fpow64(double x, double y) {
  return pow(x, y);
}

static inline double futrts_log64(double x) {
  return log(x);
}

static inline double futrts_log2_64(double x) {
  return log2(x);
}

static inline double futrts_log10_64(double x) {
  return log10(x);
}

static inline double futrts_sqrt64(double x) {
  return sqrt(x);
}

static inline double futrts_cbrt64(double x) {
  return cbrt(x);
}

static inline double futrts_exp64(double x) {
  return exp(x);
}

static inline double futrts_cos64(double x) {
  return cos(x);
}

static inline double futrts_sin64(double x) {
  return sin(x);
}

static inline double futrts_tan64(double x) {
  return tan(x);
}

static inline double futrts_acos64(double x) {
  return acos(x);
}

static inline double futrts_asin64(double x) {
  return asin(x);
}

static inline double futrts_atan64(double x) {
  return atan(x);
}

static inline double futrts_cosh64(double x) {
  return cosh(x);
}

static inline double futrts_sinh64(double x) {
  return sinh(x);
}

static inline double futrts_tanh64(double x) {
  return tanh(x);
}

static inline double futrts_acosh64(double x) {
  return acosh(x);
}

static inline double futrts_asinh64(double x) {
  return asinh(x);
}

static inline double futrts_atanh64(double x) {
  return atanh(x);
}

static inline double futrts_atan2_64(double x, double y) {
  return atan2(x, y);
}

static inline double futrts_hypot64(double x, double y) {
  return hypot(x, y);
}

static inline double futrts_gamma64(double x) {
  return tgamma(x);
}

static inline double futrts_lgamma64(double x) {
  return lgamma(x);
}

static inline double futrts_erf64(double x) {
  return erf(x);
}

static inline double futrts_erfc64(double x) {
  return erfc(x);
}

static inline double futrts_fma64(double a, double b, double c) {
  return fma(a, b, c);
}

static inline double futrts_round64(double x) {
  return rint(x);
}

static inline double futrts_ceil64(double x) {
  return ceil(x);
}

static inline float futrts_nextafter64(float x, float y) {
  return nextafter(x, y);
}

static inline double futrts_floor64(double x) {
  return floor(x);
}

static inline bool futrts_isnan64(double x) {
  return isnan(x);
}

static inline bool futrts_isinf64(double x) {
  return isinf(x);
}

static inline int8_t fptosi_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

static inline int16_t fptosi_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

static inline int32_t fptosi_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

static inline int64_t fptosi_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int64_t) x;
  }
}

static inline uint8_t fptoui_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

static inline uint16_t fptoui_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

static inline uint32_t fptoui_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

static inline uint64_t fptoui_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

static inline bool ftob_f64_bool(double x) {
  return x != 0;
}

static inline double btof_bool_f64(bool x) {
  return x ? 1 : 0;
}

static inline int64_t futrts_to_bits64(double x) {
  union {
    double f;
    int64_t t;
  } p;

  p.f = x;
  return p.t;
}

static inline double futrts_from_bits64(int64_t x) {
  union {
    int64_t f;
    double t;
  } p;

  p.f = x;
  return p.t;
}

static inline double fmod64(double x, double y) {
  return fmod(x, y);
}

static inline double fsignum64(double x) {
  return futrts_isnan64(x) ? x : (x > 0) - (x < 0);
}

static inline double futrts_lerp64(double v0, double v1, double t) {
#ifdef __OPENCL_VERSION__
  return mix(v0, v1, t);
#else
  return v0 + (v1 - v0) * t;
#endif
}

static inline double futrts_mad64(double a, double b, double c) {
#ifdef __OPENCL_VERSION__
  return mad(a, b, c);
#else
  return a * b + c;
#endif
}

static inline float fpconv_f32_f32(float x) {
  return (float) x;
}

static inline double fpconv_f32_f64(float x) {
  return (double) x;
}

static inline float fpconv_f64_f32(double x) {
  return (float) x;
}

static inline double fpconv_f64_f64(double x) {
  return (double) x;
}

#endif

#endif

// End of scalar.h.
// Start of scalar_f16.h.

// Half-precision is emulated if needed (e.g. in straight C) with the
// native type used if possible.  The emulation works by typedef'ing
// 'float' to 'f16', and then implementing all operations on single
// precision.  To cut down on duplication, we use the same code for
// those Futhark functions that require just operators or casts.  The
// in-memory representation for arrays will still be 16 bits even
// under emulation, so the compiler will have to be careful when
// generating reads or writes.

#if !defined(cl_khr_fp16) && !(defined(__CUDA_ARCH__) && __CUDA_ARCH__ >= 600) && !(defined(ISPC))
#define EMULATE_F16
#endif

#if !defined(EMULATE_F16) && defined(__OPENCL_VERSION__)
#pragma OPENCL EXTENSION cl_khr_fp16 : enable
#endif

#ifdef EMULATE_F16

// Note that the half-precision storage format is still 16 bits - the
// compiler will have to be real careful!
typedef float f16;

#elif ISPC
typedef float16 f16;

#else

#ifdef __CUDA_ARCH__
#include <cuda_fp16.h>
#endif

typedef half f16;

#endif

// Some of these functions convert to single precision because half
// precision versions are not available.

static inline f16 fadd16(f16 x, f16 y) {
  return x + y;
}

static inline f16 fsub16(f16 x, f16 y) {
  return x - y;
}

static inline f16 fmul16(f16 x, f16 y) {
  return x * y;
}

static inline bool cmplt16(f16 x, f16 y) {
  return x < y;
}

static inline bool cmple16(f16 x, f16 y) {
  return x <= y;
}

static inline f16 sitofp_i8_f16(int8_t x) {
  return (f16) x;
}

static inline f16 sitofp_i16_f16(int16_t x) {
  return (f16) x;
}

static inline f16 sitofp_i32_f16(int32_t x) {
  return (f16) x;
}

static inline f16 sitofp_i64_f16(int64_t x) {
  return (f16) x;
}

static inline f16 uitofp_i8_f16(uint8_t x) {
  return (f16) x;
}

static inline f16 uitofp_i16_f16(uint16_t x) {
  return (f16) x;
}

static inline f16 uitofp_i32_f16(uint32_t x) {
  return (f16) x;
}

static inline f16 uitofp_i64_f16(uint64_t x) {
  return (f16) x;
}

static inline int8_t fptosi_f16_i8(f16 x) {
  return (int8_t) (float) x;
}

static inline int16_t fptosi_f16_i16(f16 x) {
  return (int16_t) x;
}

static inline int32_t fptosi_f16_i32(f16 x) {
  return (int32_t) x;
}

static inline int64_t fptosi_f16_i64(f16 x) {
  return (int64_t) x;
}

static inline uint8_t fptoui_f16_i8(f16 x) {
  return (uint8_t) (float) x;
}

static inline uint16_t fptoui_f16_i16(f16 x) {
  return (uint16_t) x;
}

static inline uint32_t fptoui_f16_i32(f16 x) {
  return (uint32_t) x;
}

static inline uint64_t fptoui_f16_i64(f16 x) {
  return (uint64_t) x;
}

static inline bool ftob_f16_bool(f16 x) {
  return x != (f16)0;
}

static inline f16 btof_bool_f16(bool x) {
  return x ? 1 : 0;
}

#ifndef EMULATE_F16
static inline bool futrts_isnan16(f16 x) {
  return isnan((float)x);
}

#ifdef __OPENCL_VERSION__

static inline f16 fabs16(f16 x) {
  return fabs(x);
}

static inline f16 fmax16(f16 x, f16 y) {
  return fmax(x, y);
}

static inline f16 fmin16(f16 x, f16 y) {
  return fmin(x, y);
}

static inline f16 fpow16(f16 x, f16 y) {
  return pow(x, y);
}

#elif ISPC
static inline f16 fabs16(f16 x) {
  return abs(x);
}

static inline f16 fmax16(f16 x, f16 y) {
  return futrts_isnan16(x) ? y : futrts_isnan16(y) ? x : max(x, y);
}

static inline f16 fmin16(f16 x, f16 y) {
  return futrts_isnan16(x) ? y : futrts_isnan16(y) ? x : min(x, y);
}

static inline f16 fpow16(f16 x, f16 y) {
  return pow(x, y);
}
#else // Assuming CUDA.

static inline f16 fabs16(f16 x) {
  return fabsf(x);
}

static inline f16 fmax16(f16 x, f16 y) {
  return fmaxf(x, y);
}

static inline f16 fmin16(f16 x, f16 y) {
  return fminf(x, y);
}

static inline f16 fpow16(f16 x, f16 y) {
  return powf(x, y);
}
#endif

#if ISPC
static inline bool futrts_isinf16(float x) {
  return !futrts_isnan16(x) && futrts_isnan16(x - x);
}
static inline bool futrts_isfinite16(float x) {
  return !futrts_isnan16(x) && !futrts_isinf16(x);
}

#else

static inline bool futrts_isinf16(f16 x) {
  return isinf((float)x);
}
#endif

#ifdef __OPENCL_VERSION__
static inline f16 futrts_log16(f16 x) {
  return log(x);
}

static inline f16 futrts_log2_16(f16 x) {
  return log2(x);
}

static inline f16 futrts_log10_16(f16 x) {
  return log10(x);
}

static inline f16 futrts_sqrt16(f16 x) {
  return sqrt(x);
}

static inline f16 futrts_cbrt16(f16 x) {
  return cbrt(x);
}

static inline f16 futrts_exp16(f16 x) {
  return exp(x);
}

static inline f16 futrts_cos16(f16 x) {
  return cos(x);
}

static inline f16 futrts_sin16(f16 x) {
  return sin(x);
}

static inline f16 futrts_tan16(f16 x) {
  return tan(x);
}

static inline f16 futrts_acos16(f16 x) {
  return acos(x);
}

static inline f16 futrts_asin16(f16 x) {
  return asin(x);
}

static inline f16 futrts_atan16(f16 x) {
  return atan(x);
}

static inline f16 futrts_cosh16(f16 x) {
  return cosh(x);
}

static inline f16 futrts_sinh16(f16 x) {
  return sinh(x);
}

static inline f16 futrts_tanh16(f16 x) {
  return tanh(x);
}

static inline f16 futrts_acosh16(f16 x) {
  return acosh(x);
}

static inline f16 futrts_asinh16(f16 x) {
  return asinh(x);
}

static inline f16 futrts_atanh16(f16 x) {
  return atanh(x);
}

static inline f16 futrts_atan2_16(f16 x, f16 y) {
  return atan2(x, y);
}

static inline f16 futrts_hypot16(f16 x, f16 y) {
  return hypot(x, y);
}

static inline f16 futrts_gamma16(f16 x) {
  return tgamma(x);
}

static inline f16 futrts_lgamma16(f16 x) {
  return lgamma(x);
}

static inline f16 futrts_erf16(f16 x) {
  return erf(x);
}

static inline f16 futrts_erfc16(f16 x) {
  return erfc(x);
}

static inline f16 fmod16(f16 x, f16 y) {
  return fmod(x, y);
}

static inline f16 futrts_round16(f16 x) {
  return rint(x);
}

static inline f16 futrts_floor16(f16 x) {
  return floor(x);
}

static inline f16 futrts_ceil16(f16 x) {
  return ceil(x);
}

static inline f16 futrts_nextafter16(f16 x, f16 y) {
  return nextafter(x, y);
}

static inline f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return mix(v0, v1, t);
}

static inline f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return mad(a, b, c);
}

static inline f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return fma(a, b, c);
}
#elif ISPC

static inline f16 futrts_log16(f16 x) {
  return futrts_isfinite16(x) || (futrts_isinf16(x) && x < 0) ? log(x) : x;
}

static inline f16 futrts_log2_16(f16 x) {
  return futrts_log16(x) / log(2.0f16);
}

static inline f16 futrts_log10_16(f16 x) {
  return futrts_log16(x) / log(10.0f16);
}

static inline f16 futrts_sqrt16(f16 x) {
  return (float16)sqrt((float)x);
}

static inline f16 futrts_exp16(f16 x) {
  return exp(x);
}

static inline f16 futrts_cos16(f16 x) {
  return (float16)cos((float)x);
}

static inline f16 futrts_sin16(f16 x) {
  return (float16)sin((float)x);
}

static inline f16 futrts_tan16(f16 x) {
  return (float16)tan((float)x);
}

static inline f16 futrts_acos16(f16 x) {
  return (float16)acos((float)x);
}

static inline f16 futrts_asin16(f16 x) {
  return (float16)asin((float)x);
}

static inline f16 futrts_atan16(f16 x) {
  return (float16)atan((float)x);
}

static inline f16 futrts_cosh16(f16 x) {
  return (exp(x)+exp(-x)) / 2.0f16;
}

static inline f16 futrts_sinh16(f16 x) {
  return (exp(x)-exp(-x)) / 2.0f16;
}

static inline f16 futrts_tanh16(f16 x) {
  return futrts_sinh16(x)/futrts_cosh16(x);
}

static inline f16 futrts_acosh16(f16 x) {
  float16 f = x+(float16)sqrt((float)(x*x-1));
  if(futrts_isfinite16(f)) return log(f);
  return f;
}

static inline f16 futrts_asinh16(f16 x) {
  float16 f = x+(float16)sqrt((float)(x*x+1));
  if(futrts_isfinite16(f)) return log(f);
  return f;
}

static inline f16 futrts_atanh16(f16 x) {
  float16 f = (1+x)/(1-x);
  if(futrts_isfinite16(f)) return log(f)/2.0f16;
  return f;
}

static inline f16 futrts_atan2_16(f16 x, f16 y) {
  return (float16)atan2((float)x, (float)y);
}

static inline f16 futrts_hypot16(f16 x, f16 y) {
  return (float16)futrts_hypot32((float)x, (float)y);
}

extern "C" unmasked uniform float tgammaf(uniform float x);
static inline f16 futrts_gamma16(f16 x) {
  f16 res;
  foreach_active (i) {
    uniform f16 r = (f16)tgammaf(extract((float)x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float lgammaf(uniform float x);
static inline f16 futrts_lgamma16(f16 x) {
  f16 res;
  foreach_active (i) {
    uniform f16 r = (f16)lgammaf(extract((float)x, i));
    res = insert(res, i, r);
  }
  return res;
}

static inline f16 futrts_cbrt16(f16 x) {
  f16 res = (f16)futrts_cbrt32((float)x);
  return res;
}

static inline f16 futrts_erf16(f16 x) {
  f16 res = (f16)futrts_erf32((float)x);
  return res;
}

static inline f16 futrts_erfc16(f16 x) {
  f16 res = (f16)futrts_erfc32((float)x);
  return res;
}

static inline f16 fmod16(f16 x, f16 y) {
  return x - y * (float16)trunc((float) (x/y));
}

static inline f16 futrts_round16(f16 x) {
  return (float16)round((float)x);
}

static inline f16 futrts_floor16(f16 x) {
  return (float16)floor((float)x);
}

static inline f16 futrts_ceil16(f16 x) {
  return (float16)ceil((float)x);
}

static inline f16 futrts_nextafter16(f16 x, f16 y) {
  return (float16)futrts_nextafter32((float)x, (float) y);
}

static inline f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return v0 + (v1 - v0) * t;
}

static inline f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

static inline f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

#else // Assume CUDA.

static inline f16 futrts_log16(f16 x) {
  return hlog(x);
}

static inline f16 futrts_log2_16(f16 x) {
  return hlog2(x);
}

static inline f16 futrts_log10_16(f16 x) {
  return hlog10(x);
}

static inline f16 futrts_sqrt16(f16 x) {
  return hsqrt(x);
}

static inline f16 futrts_cbrt16(f16 x) {
  return cbrtf(x);
}

static inline f16 futrts_exp16(f16 x) {
  return hexp(x);
}

static inline f16 futrts_cos16(f16 x) {
  return hcos(x);
}

static inline f16 futrts_sin16(f16 x) {
  return hsin(x);
}

static inline f16 futrts_tan16(f16 x) {
  return tanf(x);
}

static inline f16 futrts_acos16(f16 x) {
  return acosf(x);
}

static inline f16 futrts_asin16(f16 x) {
  return asinf(x);
}

static inline f16 futrts_atan16(f16 x) {
  return atanf(x);
}

static inline f16 futrts_cosh16(f16 x) {
  return coshf(x);
}

static inline f16 futrts_sinh16(f16 x) {
  return sinhf(x);
}

static inline f16 futrts_tanh16(f16 x) {
  return tanhf(x);
}

static inline f16 futrts_acosh16(f16 x) {
  return acoshf(x);
}

static inline f16 futrts_asinh16(f16 x) {
  return asinhf(x);
}

static inline f16 futrts_atanh16(f16 x) {
  return atanhf(x);
}

static inline f16 futrts_atan2_16(f16 x, f16 y) {
  return atan2f(x, y);
}

static inline f16 futrts_hypot16(f16 x, f16 y) {
  return hypotf(x, y);
}

static inline f16 futrts_gamma16(f16 x) {
  return tgammaf(x);
}

static inline f16 futrts_lgamma16(f16 x) {
  return lgammaf(x);
}

static inline f16 futrts_erf16(f16 x) {
  return erff(x);
}

static inline f16 futrts_erfc16(f16 x) {
  return erfcf(x);
}

static inline f16 fmod16(f16 x, f16 y) {
  return fmodf(x, y);
}

static inline f16 futrts_round16(f16 x) {
  return rintf(x);
}

static inline f16 futrts_floor16(f16 x) {
  return hfloor(x);
}

static inline f16 futrts_ceil16(f16 x) {
  return hceil(x);
}

static inline f16 futrts_nextafter16(f16 x, f16 y) {
  return __ushort_as_half(halfbitsnextafter(__half_as_ushort(x), __half_as_ushort(y)));
}

static inline f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return v0 + (v1 - v0) * t;
}

static inline f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

static inline f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return fmaf(a, b, c);
}

#endif

// The CUDA __half type cannot be put in unions for some reason, so we
// use bespoke conversion functions instead.
#ifdef __CUDA_ARCH__
static inline int16_t futrts_to_bits16(f16 x) {
  return __half_as_ushort(x);
}
static inline f16 futrts_from_bits16(int16_t x) {
  return __ushort_as_half(x);
}
#elif ISPC

static inline int16_t futrts_to_bits16(f16 x) {
  varying int16_t y = *((varying int16_t * uniform)&x);
  return y;
}

static inline f16 futrts_from_bits16(int16_t x) {
  varying f16 y = *((varying f16 * uniform)&x);
  return y;
}
#else
static inline int16_t futrts_to_bits16(f16 x) {
  union {
    f16 f;
    int16_t t;
  } p;

  p.f = x;
  return p.t;
}

static inline f16 futrts_from_bits16(int16_t x) {
  union {
    int16_t f;
    f16 t;
  } p;

  p.f = x;
  return p.t;
}
#endif

#else // No native f16 - emulate.

static inline f16 fabs16(f16 x) {
  return fabs32(x);
}

static inline f16 fmax16(f16 x, f16 y) {
  return fmax32(x, y);
}

static inline f16 fmin16(f16 x, f16 y) {
  return fmin32(x, y);
}

static inline f16 fpow16(f16 x, f16 y) {
  return fpow32(x, y);
}

static inline bool futrts_isnan16(f16 x) {
  return futrts_isnan32(x);
}

static inline bool futrts_isinf16(f16 x) {
  return futrts_isinf32(x);
}

static inline f16 futrts_log16(f16 x) {
  return futrts_log32(x);
}

static inline f16 futrts_log2_16(f16 x) {
  return futrts_log2_32(x);
}

static inline f16 futrts_log10_16(f16 x) {
  return futrts_log10_32(x);
}

static inline f16 futrts_sqrt16(f16 x) {
  return futrts_sqrt32(x);
}

static inline f16 futrts_cbrt16(f16 x) {
  return futrts_cbrt32(x);
}

static inline f16 futrts_exp16(f16 x) {
  return futrts_exp32(x);
}

static inline f16 futrts_cos16(f16 x) {
  return futrts_cos32(x);
}

static inline f16 futrts_sin16(f16 x) {
  return futrts_sin32(x);
}

static inline f16 futrts_tan16(f16 x) {
  return futrts_tan32(x);
}

static inline f16 futrts_acos16(f16 x) {
  return futrts_acos32(x);
}

static inline f16 futrts_asin16(f16 x) {
  return futrts_asin32(x);
}

static inline f16 futrts_atan16(f16 x) {
  return futrts_atan32(x);
}

static inline f16 futrts_cosh16(f16 x) {
  return futrts_cosh32(x);
}

static inline f16 futrts_sinh16(f16 x) {
  return futrts_sinh32(x);
}

static inline f16 futrts_tanh16(f16 x) {
  return futrts_tanh32(x);
}

static inline f16 futrts_acosh16(f16 x) {
  return futrts_acosh32(x);
}

static inline f16 futrts_asinh16(f16 x) {
  return futrts_asinh32(x);
}

static inline f16 futrts_atanh16(f16 x) {
  return futrts_atanh32(x);
}

static inline f16 futrts_atan2_16(f16 x, f16 y) {
  return futrts_atan2_32(x, y);
}

static inline f16 futrts_hypot16(f16 x, f16 y) {
  return futrts_hypot32(x, y);
}

static inline f16 futrts_gamma16(f16 x) {
  return futrts_gamma32(x);
}

static inline f16 futrts_lgamma16(f16 x) {
  return futrts_lgamma32(x);
}

static inline f16 futrts_erf16(f16 x) {
  return futrts_erf32(x);
}

static inline f16 futrts_erfc16(f16 x) {
  return futrts_erfc32(x);
}

static inline f16 fmod16(f16 x, f16 y) {
  return fmod32(x, y);
}

static inline f16 futrts_round16(f16 x) {
  return futrts_round32(x);
}

static inline f16 futrts_floor16(f16 x) {
  return futrts_floor32(x);
}

static inline f16 futrts_ceil16(f16 x) {
  return futrts_ceil32(x);
}

static inline f16 futrts_nextafter16(f16 x, f16 y) {
  return halfbits2float(halfbitsnextafter(float2halfbits(x), float2halfbits(y)));
}

static inline f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return futrts_lerp32(v0, v1, t);
}

static inline f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return futrts_mad32(a, b, c);
}

static inline f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return futrts_fma32(a, b, c);
}

// Even when we are using an OpenCL that does not support cl_khr_fp16,
// it must still support vload_half for actually creating a
// half-precision number, which can then be efficiently converted to a
// float.  Similarly for vstore_half.
#ifdef __OPENCL_VERSION__

static inline int16_t futrts_to_bits16(f16 x) {
  int16_t y;
  // Violating strict aliasing here.
  vstore_half((float)x, 0, (half*)&y);
  return y;
}

static inline f16 futrts_from_bits16(int16_t x) {
  return (f16)vload_half(0, (half*)&x);
}

#else

static inline int16_t futrts_to_bits16(f16 x) {
  return (int16_t)float2halfbits(x);
}

static inline f16 futrts_from_bits16(int16_t x) {
  return halfbits2float((uint16_t)x);
}

static inline f16 fsignum16(f16 x) {
  return futrts_isnan16(x) ? x : (x > 0 ? 1 : 0) - (x < 0 ? 1 : 0);
}

#endif

#endif

static inline float fpconv_f16_f16(f16 x) {
  return x;
}

static inline float fpconv_f16_f32(f16 x) {
  return x;
}

static inline f16 fpconv_f32_f16(float x) {
  return (f16) x;
}

#ifdef FUTHARK_F64_ENABLED

static inline double fpconv_f16_f64(f16 x) {
  return (double) x;
}

#if ISPC
static inline f16 fpconv_f64_f16(double x) {
  return (f16) ((float)x);
}
#else
static inline f16 fpconv_f64_f16(double x) {
  return (f16) x;
}
#endif
#endif


// End of scalar_f16.h.
// Start of atomics.h

inline int32_t atomic_xchg_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xchg_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_cmpxchg_i32_global(volatile __global int32_t *p,
                                         int32_t cmp, int32_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

inline int32_t atomic_cmpxchg_i32_local(volatile __local int32_t *p,
                                        int32_t cmp, int32_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

inline int32_t atomic_add_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

inline int32_t atomic_add_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

inline float atomic_fadd_f32_global(volatile __global float *p, float x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i32_global((volatile __global int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline float atomic_fadd_f32_local(volatile __local float *p, float x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i32_local((volatile __local int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline int32_t atomic_smax_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline int32_t atomic_smax_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline int32_t atomic_smin_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline int32_t atomic_smin_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline uint32_t atomic_umax_i32_global(volatile __global uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline uint32_t atomic_umax_i32_local(volatile __local uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline uint32_t atomic_umin_i32_global(volatile __global uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline uint32_t atomic_umin_i32_local(volatile __local uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline int32_t atomic_and_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

inline int32_t atomic_and_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

inline int32_t atomic_or_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

inline int32_t atomic_or_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

inline int32_t atomic_xor_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xor_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

// Start of 64 bit atomics

inline int64_t atomic_xchg_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

inline int64_t atomic_xchg_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

inline int64_t atomic_cmpxchg_i64_global(volatile __global int64_t *p,
                                         int64_t cmp, int64_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((uint64_t*)p, cmp, val);
#else
  return atom_cmpxchg(p, cmp, val);
#endif
}

inline int64_t atomic_cmpxchg_i64_local(volatile __local int64_t *p,
                                        int64_t cmp, int64_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((uint64_t*)p, cmp, val);
#else
  return atom_cmpxchg(p, cmp, val);
#endif
}

inline int64_t atomic_add_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((uint64_t*)p, x);
#else
  return atom_add(p, x);
#endif
}

inline int64_t atomic_add_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((uint64_t*)p, x);
#else
  return atom_add(p, x);
#endif
}

#ifdef FUTHARK_F64_ENABLED

inline double atomic_fadd_f64_global(volatile __global double *p, double x) {
#if defined(FUTHARK_CUDA) && __CUDA_ARCH__ >= 600
  return atomicAdd((double*)p, x);
#else
  union { int64_t i; double f; } old;
  union { int64_t i; double f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i64_global((volatile __global int64_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline double atomic_fadd_f64_local(volatile __local double *p, double x) {
#if defined(FUTHARK_CUDA) && __CUDA_ARCH__ >= 600
  return atomicAdd((double*)p, x);
#else
  union { int64_t i; double f; } old;
  union { int64_t i; double f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i64_local((volatile __local int64_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

#endif

inline int64_t atomic_smax_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

inline int64_t atomic_smax_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

inline int64_t atomic_smin_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

inline int64_t atomic_smin_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

inline uint64_t atomic_umax_i64_global(volatile __global uint64_t *p, uint64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

inline uint64_t atomic_umax_i64_local(volatile __local uint64_t *p, uint64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

inline uint64_t atomic_umin_i64_global(volatile __global uint64_t *p, uint64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

inline uint64_t atomic_umin_i64_local(volatile __local uint64_t *p, uint64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

inline int64_t atomic_and_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int64_t*)p, x);
#else
  return atom_and(p, x);
#endif
}

inline int64_t atomic_and_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int64_t*)p, x);
#else
  return atom_and(p, x);
#endif
}

inline int64_t atomic_or_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int64_t*)p, x);
#else
  return atom_or(p, x);
#endif
}

inline int64_t atomic_or_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int64_t*)p, x);
#else
  return atom_or(p, x);
#endif
}

inline int64_t atomic_xor_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

inline int64_t atomic_xor_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

// End of atomics.h



__kernel void cluster_2Dzigpuseq_24517(__global int *global_failure, __global unsigned char *sigma_mem_24283, __global unsigned char *mem_24291, __global unsigned char *mem_24293)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24519;
    int64_t group_sizze_24522;
    int32_t wave_sizze_24521;
    int32_t group_tid_24520;
    
    local_tid_24519 = get_local_id(0);
    group_sizze_24522 = get_local_size(0);
    wave_sizze_24521 = LOCKSTEP_WIDTH;
    group_tid_24520 = get_group_id(0);
    
    int32_t global_tid_24518 = group_tid_24520 * group_sizze_24522 + local_tid_24519;
    int32_t tid_24517 = global_tid_24518;
    float from_array_res_24247 = ((__global float *) sigma_mem_24283)[(int64_t) 0];
    float from_array_res_24249 = ((__global float *) sigma_mem_24283)[(int64_t) 1];
    
    ((__global float *) mem_24291)[(int64_t) 0] = from_array_res_24247;
    ((__global float *) mem_24293)[(int64_t) 0] = from_array_res_24249;
    
  error_0:
    return;
}
__kernel void cluster_2Dziscan_stage1_23023(__global int *global_failure, __local volatile int64_t *scan_arr_mem_24570_backing_aligned_0, int64_t n_15983, int32_t num_threads_24564, __global unsigned char *mem_24291, __global unsigned char *mem_24293, __global unsigned char *ext_mem_24309, __global unsigned char *ext_mem_24310, __global unsigned char *mem_24314, __global unsigned char *mem_24317)
{
    #define segscan_group_sizze_23018 (cluster_2Dzisegscan_group_sizze_23017)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict scan_arr_mem_24570_backing_0 = (__local volatile unsigned char *) scan_arr_mem_24570_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24566;
    int64_t group_sizze_24569;
    int32_t wave_sizze_24568;
    int32_t group_tid_24567;
    
    local_tid_24566 = get_local_id(0);
    group_sizze_24569 = get_local_size(0);
    wave_sizze_24568 = LOCKSTEP_WIDTH;
    group_tid_24567 = get_group_id(0);
    
    int32_t global_tid_24565 = group_tid_24567 * group_sizze_24569 + local_tid_24566;
    int32_t phys_tid_23023 = global_tid_24565;
    __local unsigned char *scan_arr_mem_24570;
    
    scan_arr_mem_24570 = (__local unsigned char *) scan_arr_mem_24570_backing_0;
    
    int64_t x_21137;
    int64_t y_21138;
    
    x_21137 = (int64_t) 0;
    for (int64_t j_24572 = 0; j_24572 < sdiv_up64(n_15983, sext_i32_i64(num_threads_24564)); j_24572++) {
        int64_t chunk_offset_24573 = segscan_group_sizze_23018 * j_24572 + sext_i32_i64(group_tid_24567) * (segscan_group_sizze_23018 * sdiv_up64(n_15983, sext_i32_i64(num_threads_24564)));
        int64_t flat_idx_24574 = chunk_offset_24573 + sext_i32_i64(local_tid_24566);
        int64_t gtid_23022 = flat_idx_24574;
        
        // threads in bounds read input
        {
            if (slt64(gtid_23022, n_15983)) {
                float from_array_res_24255 = ((__global float *) mem_24291)[(int64_t) 0];
                float from_array_res_24256 = ((__global float *) mem_24293)[(int64_t) 0];
                float x_22552 = ((__global float *) ext_mem_24310)[gtid_23022];
                float x_22553 = ((__global float *) ext_mem_24309)[gtid_23022];
                bool defunc_2_reduce_res_22680;
                bool redout_24234 = 1;
                
                for (int64_t i_24235 = 0; i_24235 < n_15983; i_24235++) {
                    float x_22644 = ((__global float *) ext_mem_24310)[i_24235];
                    float x_22645 = ((__global float *) ext_mem_24309)[i_24235];
                    float defunc_1_f_res_22646 = x_22552 - x_22644;
                    float defunc_1_f_res_22647 = x_22553 - x_22645;
                    float defunc_1_f_res_22648 = defunc_1_f_res_22646 / from_array_res_24255;
                    float defunc_1_f_res_22649 = defunc_1_f_res_22647 / from_array_res_24256;
                    float defunc_1_f_res_22650 = defunc_1_f_res_22648 * defunc_1_f_res_22648;
                    float defunc_1_f_res_22651 = defunc_1_f_res_22649 * defunc_1_f_res_22649;
                    float defunc_1_f_res_22652 = defunc_1_f_res_22650 + defunc_1_f_res_22651;
                    float defunc_0_g_res_22653 = futrts_sqrt32(defunc_1_f_res_22652);
                    bool zgze_res_22654 = 0.5F <= defunc_0_g_res_22653;
                    bool defunc_0_f_res_f_res_22655 = sle64(gtid_23022, i_24235);
                    bool x_22656 = !zgze_res_22654;
                    bool y_22657 = defunc_0_f_res_f_res_22655 && x_22656;
                    bool defunc_0_f_res_22658 = zgze_res_22654 || y_22657;
                    bool x_22574 = defunc_0_f_res_22658 && redout_24234;
                    bool redout_tmp_24575 = x_22574;
                    
                    redout_24234 = redout_tmp_24575;
                }
                defunc_2_reduce_res_22680 = redout_24234;
                
                bool cond_neg_22576 = !defunc_2_reduce_res_22680;
                int64_t defunc_1_lifted_lambda_res_22577 = btoi_bool_i64(cond_neg_22576);
                bool is_i_22578 = defunc_1_lifted_lambda_res_22577 == (int64_t) 0;
                bool cond_neg_22579 = !is_i_22578;
                int64_t part_res_22580 = btoi_bool_i64(cond_neg_22579);
                int64_t part_res_22581 = btoi_bool_i64(is_i_22578);
                
                // write to-scan values to parameters
                {
                    y_21138 = part_res_22581;
                }
                // write mapped values results to global memory
                {
                    ((__global int64_t *) mem_24317)[gtid_23022] = part_res_22580;
                }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!slt64(gtid_23022, n_15983)) {
                    y_21138 = (int64_t) 0;
                }
            }
            // combine with carry and write to local memory
            {
                int64_t zz_21139 = x_21137 + y_21138;
                
                ((__local int64_t *) scan_arr_mem_24570)[sext_i32_i64(local_tid_24566)] = zz_21139;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t x_24576;
            int64_t y_24577;
            int64_t x_24579;
            int64_t y_24580;
            bool ltid_in_bounds_24582 = slt64(sext_i32_i64(local_tid_24566), segscan_group_sizze_23018);
            int32_t skip_threads_24583;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_24582) {
                    y_24577 = ((volatile __local int64_t *) scan_arr_mem_24570)[sext_i32_i64(local_tid_24566)];
                    if ((local_tid_24566 - squot32(local_tid_24566, 32) * 32) == 0) {
                        x_24576 = y_24577;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_24583 = 1;
                while (slt32(skip_threads_24583, 32)) {
                    bool thread_active_24584 = sle32(skip_threads_24583, local_tid_24566 - squot32(local_tid_24566, 32) * 32) && ltid_in_bounds_24582;
                    
                    if (thread_active_24584) {
                        // read operands
                        {
                            x_24576 = ((volatile __local int64_t *) scan_arr_mem_24570)[sext_i32_i64(local_tid_24566) - sext_i32_i64(skip_threads_24583)];
                        }
                    }
                    // perform operation
                    {
                        if (thread_active_24584) {
                            int64_t zz_24578 = x_24576 + y_24577;
                            
                            x_24576 = zz_24578;
                        }
                    }
                    if (sle32(wave_sizze_24568, skip_threads_24583)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_24584) {
                        // write result
                        {
                            ((volatile __local int64_t *) scan_arr_mem_24570)[sext_i32_i64(local_tid_24566)] = x_24576;
                            y_24577 = x_24576;
                        }
                    }
                    if (sle32(wave_sizze_24568, skip_threads_24583)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_24583 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_24566 - squot32(local_tid_24566, 32) * 32) == 31 && ltid_in_bounds_24582) {
                    ((volatile __local int64_t *) scan_arr_mem_24570)[sext_i32_i64(squot32(local_tid_24566, 32))] = x_24576;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_24585;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_24566, 32) == 0 && ltid_in_bounds_24582) {
                        y_24580 = ((volatile __local int64_t *) scan_arr_mem_24570)[sext_i32_i64(local_tid_24566)];
                        if ((local_tid_24566 - squot32(local_tid_24566, 32) * 32) == 0) {
                            x_24579 = y_24580;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_24585 = 1;
                    while (slt32(skip_threads_24585, 32)) {
                        bool thread_active_24586 = sle32(skip_threads_24585, local_tid_24566 - squot32(local_tid_24566, 32) * 32) && (squot32(local_tid_24566, 32) == 0 && ltid_in_bounds_24582);
                        
                        if (thread_active_24586) {
                            // read operands
                            {
                                x_24579 = ((volatile __local int64_t *) scan_arr_mem_24570)[sext_i32_i64(local_tid_24566) - sext_i32_i64(skip_threads_24585)];
                            }
                        }
                        // perform operation
                        {
                            if (thread_active_24586) {
                                int64_t zz_24581 = x_24579 + y_24580;
                                
                                x_24579 = zz_24581;
                            }
                        }
                        if (sle32(wave_sizze_24568, skip_threads_24585)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (thread_active_24586) {
                            // write result
                            {
                                ((volatile __local int64_t *) scan_arr_mem_24570)[sext_i32_i64(local_tid_24566)] = x_24579;
                                y_24580 = x_24579;
                            }
                        }
                        if (sle32(wave_sizze_24568, skip_threads_24585)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_24585 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            bool no_carry_in_24587 = squot32(local_tid_24566, 32) == 0 || !ltid_in_bounds_24582;
            
            // carry-in for every block except the first
            {
                // read operands
                {
                    if (!no_carry_in_24587) {
                        y_24577 = x_24576;
                        x_24576 = ((__local int64_t *) scan_arr_mem_24570)[sext_i32_i64(squot32(local_tid_24566, 32)) - (int64_t) 1];
                    }
                }
                // perform operation
                {
                    if (!no_carry_in_24587) {
                        int64_t zz_24578 = x_24576 + y_24577;
                        
                        x_24576 = zz_24578;
                    }
                }
                // write final result
                {
                    if (!no_carry_in_24587) {
                        ((__local int64_t *) scan_arr_mem_24570)[sext_i32_i64(local_tid_24566)] = x_24576;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_24566, 32) == 0 && ltid_in_bounds_24582) {
                    ((__local int64_t *) scan_arr_mem_24570)[sext_i32_i64(local_tid_24566)] = y_24577;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_23022, n_15983)) {
                    int64_t tmp_24588 = ((__local int64_t *) scan_arr_mem_24570)[sext_i32_i64(local_tid_24566)];
                    
                    ((__global int64_t *) mem_24314)[gtid_23022] = tmp_24588;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_24589 = 0;
                bool should_load_carry_24590 = local_tid_24566 == 0 && !crosses_segment_24589;
                
                if (should_load_carry_24590) {
                    x_21137 = ((__local int64_t *) scan_arr_mem_24570)[segscan_group_sizze_23018 - (int64_t) 1];
                }
                if (!should_load_carry_24590) {
                    x_21137 = (int64_t) 0;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_23018
}
__kernel void cluster_2Dziscan_stage2_23023(__global int *global_failure, __local volatile int64_t *scan_arr_mem_24596_backing_aligned_0, int64_t n_15983, int64_t stage1_num_groups_24563, int32_t num_threads_24564, __global unsigned char *mem_24314)
{
    #define segscan_group_sizze_23018 (cluster_2Dzisegscan_group_sizze_23017)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict scan_arr_mem_24596_backing_0 = (__local volatile unsigned char *) scan_arr_mem_24596_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24592;
    int64_t group_sizze_24595;
    int32_t wave_sizze_24594;
    int32_t group_tid_24593;
    
    local_tid_24592 = get_local_id(0);
    group_sizze_24595 = get_local_size(0);
    wave_sizze_24594 = LOCKSTEP_WIDTH;
    group_tid_24593 = get_group_id(0);
    
    int32_t global_tid_24591 = group_tid_24593 * group_sizze_24595 + local_tid_24592;
    int32_t phys_tid_23023 = global_tid_24591;
    __local unsigned char *scan_arr_mem_24596;
    
    scan_arr_mem_24596 = (__local unsigned char *) scan_arr_mem_24596_backing_0;
    
    int64_t flat_idx_24598 = (sext_i32_i64(local_tid_24592) + (int64_t) 1) * (segscan_group_sizze_23018 * sdiv_up64(n_15983, sext_i32_i64(num_threads_24564))) - (int64_t) 1;
    int64_t gtid_23022 = flat_idx_24598;
    
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_23022, n_15983)) {
            int64_t tmp_24599 = ((__global int64_t *) mem_24314)[gtid_23022];
            
            ((__local int64_t *) scan_arr_mem_24596)[sext_i32_i64(local_tid_24592)] = tmp_24599;
        } else {
            ((__local int64_t *) scan_arr_mem_24596)[sext_i32_i64(local_tid_24592)] = (int64_t) 0;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t x_21137;
    int64_t y_21138;
    int64_t x_24600;
    int64_t y_24601;
    bool ltid_in_bounds_24603 = slt64(sext_i32_i64(local_tid_24592), stage1_num_groups_24563);
    int32_t skip_threads_24604;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_24603) {
            y_21138 = ((volatile __local int64_t *) scan_arr_mem_24596)[sext_i32_i64(local_tid_24592)];
            if ((local_tid_24592 - squot32(local_tid_24592, 32) * 32) == 0) {
                x_21137 = y_21138;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_24604 = 1;
        while (slt32(skip_threads_24604, 32)) {
            bool thread_active_24605 = sle32(skip_threads_24604, local_tid_24592 - squot32(local_tid_24592, 32) * 32) && ltid_in_bounds_24603;
            
            if (thread_active_24605) {
                // read operands
                {
                    x_21137 = ((volatile __local int64_t *) scan_arr_mem_24596)[sext_i32_i64(local_tid_24592) - sext_i32_i64(skip_threads_24604)];
                }
            }
            // perform operation
            {
                if (thread_active_24605) {
                    int64_t zz_21139 = x_21137 + y_21138;
                    
                    x_21137 = zz_21139;
                }
            }
            if (sle32(wave_sizze_24594, skip_threads_24604)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_24605) {
                // write result
                {
                    ((volatile __local int64_t *) scan_arr_mem_24596)[sext_i32_i64(local_tid_24592)] = x_21137;
                    y_21138 = x_21137;
                }
            }
            if (sle32(wave_sizze_24594, skip_threads_24604)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_24604 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_24592 - squot32(local_tid_24592, 32) * 32) == 31 && ltid_in_bounds_24603) {
            ((volatile __local int64_t *) scan_arr_mem_24596)[sext_i32_i64(squot32(local_tid_24592, 32))] = x_21137;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_24606;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_24592, 32) == 0 && ltid_in_bounds_24603) {
                y_24601 = ((volatile __local int64_t *) scan_arr_mem_24596)[sext_i32_i64(local_tid_24592)];
                if ((local_tid_24592 - squot32(local_tid_24592, 32) * 32) == 0) {
                    x_24600 = y_24601;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_24606 = 1;
            while (slt32(skip_threads_24606, 32)) {
                bool thread_active_24607 = sle32(skip_threads_24606, local_tid_24592 - squot32(local_tid_24592, 32) * 32) && (squot32(local_tid_24592, 32) == 0 && ltid_in_bounds_24603);
                
                if (thread_active_24607) {
                    // read operands
                    {
                        x_24600 = ((volatile __local int64_t *) scan_arr_mem_24596)[sext_i32_i64(local_tid_24592) - sext_i32_i64(skip_threads_24606)];
                    }
                }
                // perform operation
                {
                    if (thread_active_24607) {
                        int64_t zz_24602 = x_24600 + y_24601;
                        
                        x_24600 = zz_24602;
                    }
                }
                if (sle32(wave_sizze_24594, skip_threads_24606)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_24607) {
                    // write result
                    {
                        ((volatile __local int64_t *) scan_arr_mem_24596)[sext_i32_i64(local_tid_24592)] = x_24600;
                        y_24601 = x_24600;
                    }
                }
                if (sle32(wave_sizze_24594, skip_threads_24606)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_24606 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    bool no_carry_in_24608 = squot32(local_tid_24592, 32) == 0 || !ltid_in_bounds_24603;
    
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_24608) {
                y_21138 = x_21137;
                x_21137 = ((__local int64_t *) scan_arr_mem_24596)[sext_i32_i64(squot32(local_tid_24592, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            if (!no_carry_in_24608) {
                int64_t zz_21139 = x_21137 + y_21138;
                
                x_21137 = zz_21139;
            }
        }
        // write final result
        {
            if (!no_carry_in_24608) {
                ((__local int64_t *) scan_arr_mem_24596)[sext_i32_i64(local_tid_24592)] = x_21137;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_24592, 32) == 0 && ltid_in_bounds_24603) {
            ((__local int64_t *) scan_arr_mem_24596)[sext_i32_i64(local_tid_24592)] = y_21138;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_23022, n_15983)) {
            int64_t tmp_24609 = ((__local int64_t *) scan_arr_mem_24596)[sext_i32_i64(local_tid_24592)];
            
            ((__global int64_t *) mem_24314)[gtid_23022] = tmp_24609;
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_23018
}
__kernel void cluster_2Dziscan_stage3_23023(__global int *global_failure, int64_t n_15983, int64_t num_groups_23020, int32_t num_threads_24564, int32_t required_groups_24610, __global unsigned char *mem_24314)
{
    #define segscan_group_sizze_23018 (cluster_2Dzisegscan_group_sizze_23017)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24612;
    int64_t group_sizze_24615;
    int32_t wave_sizze_24614;
    int32_t group_tid_24613;
    
    local_tid_24612 = get_local_id(0);
    group_sizze_24615 = get_local_size(0);
    wave_sizze_24614 = LOCKSTEP_WIDTH;
    group_tid_24613 = get_group_id(0);
    
    int32_t global_tid_24611 = group_tid_24613 * group_sizze_24615 + local_tid_24612;
    int32_t phys_tid_23023 = global_tid_24611;
    int32_t phys_group_id_24616;
    
    phys_group_id_24616 = get_group_id(0);
    
    int32_t iterations_24617 = sdiv_up32(required_groups_24610 - phys_group_id_24616, sext_i64_i32(num_groups_23020));
    
    for (int32_t i_24618 = 0; i_24618 < iterations_24617; i_24618++) {
        int32_t virt_group_id_24619 = phys_group_id_24616 + i_24618 * sext_i64_i32(num_groups_23020);
        int64_t flat_idx_24620 = sext_i32_i64(virt_group_id_24619) * segscan_group_sizze_23018 + sext_i32_i64(local_tid_24612);
        int64_t gtid_23022 = flat_idx_24620;
        int64_t orig_group_24621 = squot64(flat_idx_24620, segscan_group_sizze_23018 * sdiv_up64(n_15983, sext_i32_i64(num_threads_24564)));
        int64_t carry_in_flat_idx_24622 = orig_group_24621 * (segscan_group_sizze_23018 * sdiv_up64(n_15983, sext_i32_i64(num_threads_24564))) - (int64_t) 1;
        
        if (slt64(gtid_23022, n_15983)) {
            if (!(orig_group_24621 == (int64_t) 0 || flat_idx_24620 == (orig_group_24621 + (int64_t) 1) * (segscan_group_sizze_23018 * sdiv_up64(n_15983, sext_i32_i64(num_threads_24564))) - (int64_t) 1)) {
                int64_t x_21137;
                int64_t y_21138;
                
                x_21137 = ((__global int64_t *) mem_24314)[carry_in_flat_idx_24622];
                y_21138 = ((__global int64_t *) mem_24314)[gtid_23022];
                
                int64_t zz_21139 = x_21137 + y_21138;
                
                x_21137 = zz_21139;
                ((__global int64_t *) mem_24314)[gtid_23022] = x_21137;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_23018
}
__kernel void cluster_2Dzisegmap_22967(__global int *global_failure, int64_t n_15983, __global unsigned char *data_mem_24282, __global unsigned char *mem_24291, __global unsigned char *mem_24293, __global unsigned char *mem_24297, __global unsigned char *mem_24300)
{
    #define segmap_group_sizze_22962 (cluster_2Dzisegmap_group_sizze_22910)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24548;
    int64_t group_sizze_24551;
    int32_t wave_sizze_24550;
    int32_t group_tid_24549;
    
    local_tid_24548 = get_local_id(0);
    group_sizze_24551 = get_local_size(0);
    wave_sizze_24550 = LOCKSTEP_WIDTH;
    group_tid_24549 = get_group_id(0);
    
    int32_t global_tid_24547 = group_tid_24549 * group_sizze_24551 + local_tid_24548;
    int32_t phys_tid_22967 = global_tid_24547;
    int64_t global_tid_24552 = sext_i32_i64(group_tid_24549) * segmap_group_sizze_22962 + sext_i32_i64(local_tid_24548);
    int64_t slice_24553 = n_15983;
    int64_t gtid_22966 = global_tid_24552;
    int64_t remnant_24554 = global_tid_24552 - gtid_22966;
    
    if (slt64(gtid_22966, n_15983)) {
        float from_array_res_24253 = ((__global float *) mem_24291)[(int64_t) 0];
        float from_array_res_24254 = ((__global float *) mem_24293)[(int64_t) 0];
        float x_22968 = ((__global float *) data_mem_24282)[gtid_22966 * (int64_t) 2];
        float x_22969 = ((__global float *) data_mem_24282)[gtid_22966 * (int64_t) 2 + (int64_t) 1];
        bool defunc_0_f_res_22970;
        float defunc_0_f_res_22971;
        float defunc_0_f_res_22972;
        bool loop_while_22973;
        float mean_22974;
        float mean_22975;
        
        loop_while_22973 = 1;
        mean_22974 = x_22968;
        mean_22975 = x_22969;
        while (loop_while_22973) {
            float defunc_0_f_res_22976;
            float defunc_0_f_res_22977;
            float defunc_2_reduce_res_22978;
            float redout_24230;
            float redout_24231;
            float redout_24232;
            
            redout_24230 = 0.0F;
            redout_24231 = 0.0F;
            redout_24232 = 0.0F;
            for (int64_t i_24233 = 0; i_24233 < n_15983; i_24233++) {
                float x_22988 = ((__global float *) data_mem_24282)[i_24233 * (int64_t) 2];
                float x_22989 = ((__global float *) data_mem_24282)[i_24233 * (int64_t) 2 + (int64_t) 1];
                float defunc_1_f_res_22990 = mean_22974 - x_22988;
                float defunc_1_f_res_22991 = mean_22975 - x_22989;
                float defunc_1_f_res_22992 = defunc_1_f_res_22990 / from_array_res_24253;
                float defunc_1_f_res_22993 = defunc_1_f_res_22991 / from_array_res_24254;
                float defunc_1_f_res_22994 = defunc_1_f_res_22992 * defunc_1_f_res_22992;
                float defunc_1_f_res_22995 = defunc_1_f_res_22993 * defunc_1_f_res_22993;
                float defunc_1_f_res_22996 = defunc_1_f_res_22994 + defunc_1_f_res_22995;
                float zt_res_22997 = 0.5F * defunc_1_f_res_22996;
                float neg_res_22998 = 0.0F - zt_res_22997;
                float exp_res_22999 = futrts_exp32(neg_res_22998);
                float zt_res_23000 = x_22988 * exp_res_22999;
                float zt_res_23001 = x_22989 * exp_res_22999;
                float defunc_1_f_res_22983 = zt_res_23000 + redout_24230;
                float defunc_1_f_res_22984 = zt_res_23001 + redout_24231;
                float defunc_1_op_res_22987 = exp_res_22999 + redout_24232;
                float redout_tmp_24558 = defunc_1_f_res_22983;
                float redout_tmp_24559 = defunc_1_f_res_22984;
                float redout_tmp_24560 = defunc_1_op_res_22987;
                
                redout_24230 = redout_tmp_24558;
                redout_24231 = redout_tmp_24559;
                redout_24232 = redout_tmp_24560;
            }
            defunc_0_f_res_22976 = redout_24230;
            defunc_0_f_res_22977 = redout_24231;
            defunc_2_reduce_res_22978 = redout_24232;
            
            float zs_res_23002 = 1.0F / defunc_2_reduce_res_22978;
            float zt_res_23003 = defunc_0_f_res_22976 * zs_res_23002;
            float zt_res_23004 = defunc_0_f_res_22977 * zs_res_23002;
            float defunc_1_f_res_23005 = zt_res_23003 - mean_22974;
            float defunc_1_f_res_23006 = zt_res_23004 - mean_22975;
            float defunc_1_f_res_23007 = defunc_1_f_res_23005 / from_array_res_24253;
            float defunc_1_f_res_23008 = defunc_1_f_res_23006 / from_array_res_24254;
            float defunc_1_f_res_23009 = defunc_1_f_res_23007 * defunc_1_f_res_23007;
            float defunc_1_f_res_23010 = defunc_1_f_res_23008 * defunc_1_f_res_23008;
            float defunc_1_f_res_23011 = defunc_1_f_res_23009 + defunc_1_f_res_23010;
            float defunc_0_g_res_23012 = futrts_sqrt32(defunc_1_f_res_23011);
            bool zg_res_23013 = 1.0e-2F < defunc_0_g_res_23012;
            bool loop_while_tmp_24555 = zg_res_23013;
            float mean_tmp_24556 = zt_res_23003;
            float mean_tmp_24557 = zt_res_23004;
            
            loop_while_22973 = loop_while_tmp_24555;
            mean_22974 = mean_tmp_24556;
            mean_22975 = mean_tmp_24557;
        }
        defunc_0_f_res_22970 = loop_while_22973;
        defunc_0_f_res_22971 = mean_22974;
        defunc_0_f_res_22972 = mean_22975;
        ((__global float *) mem_24297)[gtid_22966] = defunc_0_f_res_22971;
        ((__global float *) mem_24300)[gtid_22966] = defunc_0_f_res_22972;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_22962
}
__kernel void cluster_2Dzisegmap_23025(__global int *global_failure, int64_t n_15983, __global unsigned char *mem_24286, __global unsigned char *mem_24289, __global unsigned char *ext_mem_24309, __global unsigned char *ext_mem_24310, __global unsigned char *mem_24314, __global unsigned char *mem_24317)
{
    #define segmap_group_sizze_23028 (cluster_2Dzisegmap_group_sizze_23027)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24625;
    int64_t group_sizze_24628;
    int32_t wave_sizze_24627;
    int32_t group_tid_24626;
    
    local_tid_24625 = get_local_id(0);
    group_sizze_24628 = get_local_size(0);
    wave_sizze_24627 = LOCKSTEP_WIDTH;
    group_tid_24626 = get_group_id(0);
    
    int32_t global_tid_24624 = group_tid_24626 * group_sizze_24628 + local_tid_24625;
    int32_t phys_tid_23025 = global_tid_24624;
    int64_t global_tid_24629 = sext_i32_i64(group_tid_24626) * segmap_group_sizze_23028 + sext_i32_i64(local_tid_24625);
    int64_t slice_24630 = n_15983;
    int64_t write_i_23024 = global_tid_24629;
    int64_t remnant_24631 = global_tid_24629 - write_i_23024;
    
    if (slt64(write_i_23024, n_15983)) {
        int64_t c_21153 = ((__global int64_t *) mem_24317)[write_i_23024];
        int64_t offset_21154 = ((__global int64_t *) mem_24314)[write_i_23024];
        float v_21156 = ((__global float *) ext_mem_24310)[write_i_23024];
        float v_21157 = ((__global float *) ext_mem_24309)[write_i_23024];
        bool is_this_one_21158 = c_21153 == (int64_t) 0;
        int64_t this_offset_21159 = (int64_t) -1 + offset_21154;
        int64_t total_res_21160;
        
        if (is_this_one_21158 == 1) {
            total_res_21160 = this_offset_21159;
        } else {
            total_res_21160 = (int64_t) -1;
        }
        if (sle64((int64_t) 0, total_res_21160) && slt64(total_res_21160, n_15983)) {
            ((__global float *) mem_24286)[total_res_21160] = v_21156;
        }
        if (sle64((int64_t) 0, total_res_21160) && slt64(total_res_21160, n_15983)) {
            ((__global float *) mem_24289)[total_res_21160] = v_21157;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_23028
}
__kernel void cluster_2Dzisegmap_23174(__global int *global_failure, int64_t partition_sizze_21146, int64_t num_groups_23170, int32_t virt_num_groups_24750, __global unsigned char *mem_24286, __global unsigned char *mem_24289, __global unsigned char *mem_24380)
{
    #define segmap_group_sizze_23169 (cluster_2Dzisegmap_group_sizze_23158)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24752;
    int64_t group_sizze_24755;
    int32_t wave_sizze_24754;
    int32_t group_tid_24753;
    
    local_tid_24752 = get_local_id(0);
    group_sizze_24755 = get_local_size(0);
    wave_sizze_24754 = LOCKSTEP_WIDTH;
    group_tid_24753 = get_group_id(0);
    
    int32_t global_tid_24751 = group_tid_24753 * group_sizze_24755 + local_tid_24752;
    int32_t phys_tid_23174 = global_tid_24751;
    int32_t phys_group_id_24756;
    
    phys_group_id_24756 = get_group_id(0);
    
    int32_t iterations_24757 = sdiv_up32(virt_num_groups_24750 - phys_group_id_24756, sext_i64_i32(num_groups_23170));
    
    for (int32_t i_24758 = 0; i_24758 < iterations_24757; i_24758++) {
        int32_t virt_group_id_24759 = phys_group_id_24756 + i_24758 * sext_i64_i32(num_groups_23170);
        int64_t global_tid_24760 = sext_i32_i64(virt_group_id_24759) * segmap_group_sizze_23169 + sext_i32_i64(local_tid_24752);
        int64_t slice_24761 = partition_sizze_21146;
        int64_t gtid_23173 = global_tid_24760;
        int64_t remnant_24762 = global_tid_24760 - gtid_23173;
        
        if (slt64(gtid_23173, partition_sizze_21146)) {
            float x_23175 = ((__global float *) mem_24286)[gtid_23173];
            float x_23176 = ((__global float *) mem_24289)[gtid_23173];
            float mem_24377[(int64_t) 2];
            
            mem_24377[(int64_t) 0] = x_23175;
            mem_24377[(int64_t) 1] = x_23176;
            for (int64_t i_24763 = 0; i_24763 < (int64_t) 2; i_24763++) {
                float tmp_24764 = mem_24377[i_24763];
                
                ((__global float *) mem_24380)[gtid_23173 + i_24763 * partition_sizze_21146] = tmp_24764;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_23169
}
__kernel void cluster_2Dzisegmap_intragroup_22858(__global int *global_failure, __local volatile int64_t *red_arr_mem_24542_backing_aligned_0, __local volatile int64_t *red_arr_mem_24540_backing_aligned_1, __local volatile int64_t *red_arr_mem_24538_backing_aligned_2, int64_t n_15983, __global unsigned char *data_mem_24282, __global unsigned char *mem_24291, __global unsigned char *mem_24293, __global unsigned char *mem_24305, __global unsigned char *mem_24308)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict red_arr_mem_24542_backing_2 = (__local volatile unsigned char *) red_arr_mem_24542_backing_aligned_0;
    __local volatile unsigned char *restrict red_arr_mem_24540_backing_1 = (__local volatile unsigned char *) red_arr_mem_24540_backing_aligned_1;
    __local volatile unsigned char *restrict red_arr_mem_24538_backing_0 = (__local volatile unsigned char *) red_arr_mem_24538_backing_aligned_2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24526;
    int64_t group_sizze_24529;
    int32_t wave_sizze_24528;
    int32_t group_tid_24527;
    
    local_tid_24526 = get_local_id(0);
    group_sizze_24529 = get_local_size(0);
    wave_sizze_24528 = LOCKSTEP_WIDTH;
    group_tid_24527 = get_group_id(0);
    
    int32_t global_tid_24525 = group_tid_24527 * group_sizze_24529 + local_tid_24526;
    int32_t phys_tid_22858 = group_tid_24527;
    int64_t slice_24531 = n_15983;
    int64_t ltid_pre_24530 = sext_i32_i64(local_tid_24526);
    int64_t remnant_24532 = sext_i32_i64(local_tid_24526) - ltid_pre_24530;
    int64_t slice_24533 = n_15983;
    int64_t gtid_22857 = sext_i32_i64(group_tid_24527);
    int64_t remnant_24534 = sext_i32_i64(group_tid_24527) - gtid_22857;
    float from_array_res_24251 = ((__global float *) mem_24291)[(int64_t) 0];
    float from_array_res_24252 = ((__global float *) mem_24293)[(int64_t) 0];
    float x_22859 = ((__global float *) data_mem_24282)[gtid_22857 * (int64_t) 2];
    float x_22860 = ((__global float *) data_mem_24282)[gtid_22857 * (int64_t) 2 + (int64_t) 1];
    bool defunc_0_f_res_22861;
    float defunc_0_f_res_22862;
    float defunc_0_f_res_22863;
    bool loop_while_22864;
    float mean_22865;
    float mean_22866;
    
    loop_while_22864 = 1;
    mean_22865 = x_22859;
    mean_22866 = x_22860;
    while (loop_while_22864) {
        float defunc_0_f_res_22867;
        float defunc_0_f_res_22868;
        float defunc_2_reduce_res_22869;
        int32_t phys_tid_22871 = local_tid_24526;
        __local unsigned char *red_arr_mem_24538;
        
        red_arr_mem_24538 = (__local unsigned char *) red_arr_mem_24538_backing_0;
        
        __local unsigned char *red_arr_mem_24540;
        
        red_arr_mem_24540 = (__local unsigned char *) red_arr_mem_24540_backing_1;
        
        __local unsigned char *red_arr_mem_24542;
        
        red_arr_mem_24542 = (__local unsigned char *) red_arr_mem_24542_backing_2;
        
        int64_t gtid_22870 = sext_i32_i64(sext_i64_i32(ltid_pre_24530));
        float x_22881 = ((__global float *) data_mem_24282)[gtid_22870 * (int64_t) 2];
        float x_22882 = ((__global float *) data_mem_24282)[gtid_22870 * (int64_t) 2 + (int64_t) 1];
        float defunc_1_f_res_22883 = mean_22865 - x_22881;
        float defunc_1_f_res_22884 = mean_22866 - x_22882;
        float defunc_1_f_res_22885 = defunc_1_f_res_22883 / from_array_res_24251;
        float defunc_1_f_res_22886 = defunc_1_f_res_22884 / from_array_res_24252;
        float defunc_1_f_res_22887 = defunc_1_f_res_22885 * defunc_1_f_res_22885;
        float defunc_1_f_res_22888 = defunc_1_f_res_22886 * defunc_1_f_res_22886;
        float defunc_1_f_res_22889 = defunc_1_f_res_22887 + defunc_1_f_res_22888;
        float zt_res_22890 = 0.5F * defunc_1_f_res_22889;
        float neg_res_22891 = 0.0F - zt_res_22890;
        float exp_res_22892 = futrts_exp32(neg_res_22891);
        float zt_res_22893 = x_22881 * exp_res_22892;
        float zt_res_22894 = x_22882 * exp_res_22892;
        
        ((__local float *) red_arr_mem_24538)[gtid_22870] = zt_res_22893;
        ((__local float *) red_arr_mem_24540)[gtid_22870] = zt_res_22894;
        ((__local float *) red_arr_mem_24542)[gtid_22870] = exp_res_22892;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_24544;
        int32_t skip_waves_24545 = 1;
        float x_22872;
        float x_22873;
        float x_22874;
        float x_22875;
        float x_22876;
        float x_22877;
        
        offset_24544 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_24526, sext_i64_i32(n_15983))) {
                x_22872 = ((__local float *) red_arr_mem_24538)[sext_i32_i64(local_tid_24526 + offset_24544)];
                x_22873 = ((__local float *) red_arr_mem_24540)[sext_i32_i64(local_tid_24526 + offset_24544)];
                x_22874 = ((__local float *) red_arr_mem_24542)[sext_i32_i64(local_tid_24526 + offset_24544)];
            }
        }
        offset_24544 = 1;
        while (slt32(offset_24544, wave_sizze_24528)) {
            if (slt32(local_tid_24526 + offset_24544, sext_i64_i32(n_15983)) && ((local_tid_24526 - squot32(local_tid_24526, wave_sizze_24528) * wave_sizze_24528) & (2 * offset_24544 - 1)) == 0) {
                // read array element
                {
                    x_22875 = ((volatile __local float *) red_arr_mem_24538)[sext_i32_i64(local_tid_24526 + offset_24544)];
                    x_22876 = ((volatile __local float *) red_arr_mem_24540)[sext_i32_i64(local_tid_24526 + offset_24544)];
                    x_22877 = ((volatile __local float *) red_arr_mem_24542)[sext_i32_i64(local_tid_24526 + offset_24544)];
                }
                // apply reduction operation
                {
                    float defunc_1_f_res_22878 = x_22872 + x_22875;
                    float defunc_1_f_res_22879 = x_22873 + x_22876;
                    float defunc_1_op_res_22880 = x_22874 + x_22877;
                    
                    x_22872 = defunc_1_f_res_22878;
                    x_22873 = defunc_1_f_res_22879;
                    x_22874 = defunc_1_op_res_22880;
                }
                // write result of operation
                {
                    ((volatile __local float *) red_arr_mem_24538)[sext_i32_i64(local_tid_24526)] = x_22872;
                    ((volatile __local float *) red_arr_mem_24540)[sext_i32_i64(local_tid_24526)] = x_22873;
                    ((volatile __local float *) red_arr_mem_24542)[sext_i32_i64(local_tid_24526)] = x_22874;
                }
            }
            offset_24544 *= 2;
        }
        while (slt32(skip_waves_24545, squot32(sext_i64_i32(n_15983) + wave_sizze_24528 - 1, wave_sizze_24528))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_24544 = skip_waves_24545 * wave_sizze_24528;
            if (slt32(local_tid_24526 + offset_24544, sext_i64_i32(n_15983)) && ((local_tid_24526 - squot32(local_tid_24526, wave_sizze_24528) * wave_sizze_24528) == 0 && (squot32(local_tid_24526, wave_sizze_24528) & (2 * skip_waves_24545 - 1)) == 0)) {
                // read array element
                {
                    x_22875 = ((__local float *) red_arr_mem_24538)[sext_i32_i64(local_tid_24526 + offset_24544)];
                    x_22876 = ((__local float *) red_arr_mem_24540)[sext_i32_i64(local_tid_24526 + offset_24544)];
                    x_22877 = ((__local float *) red_arr_mem_24542)[sext_i32_i64(local_tid_24526 + offset_24544)];
                }
                // apply reduction operation
                {
                    float defunc_1_f_res_22878 = x_22872 + x_22875;
                    float defunc_1_f_res_22879 = x_22873 + x_22876;
                    float defunc_1_op_res_22880 = x_22874 + x_22877;
                    
                    x_22872 = defunc_1_f_res_22878;
                    x_22873 = defunc_1_f_res_22879;
                    x_22874 = defunc_1_op_res_22880;
                }
                // write result of operation
                {
                    ((__local float *) red_arr_mem_24538)[sext_i32_i64(local_tid_24526)] = x_22872;
                    ((__local float *) red_arr_mem_24540)[sext_i32_i64(local_tid_24526)] = x_22873;
                    ((__local float *) red_arr_mem_24542)[sext_i32_i64(local_tid_24526)] = x_22874;
                }
            }
            skip_waves_24545 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        defunc_0_f_res_22867 = ((__local float *) red_arr_mem_24538)[(int64_t) 0];
        defunc_0_f_res_22868 = ((__local float *) red_arr_mem_24540)[(int64_t) 0];
        defunc_2_reduce_res_22869 = ((__local float *) red_arr_mem_24542)[(int64_t) 0];
        
        float zs_res_22895 = 1.0F / defunc_2_reduce_res_22869;
        float zt_res_22896 = defunc_0_f_res_22867 * zs_res_22895;
        float zt_res_22897 = defunc_0_f_res_22868 * zs_res_22895;
        float defunc_1_f_res_22898 = zt_res_22896 - mean_22865;
        float defunc_1_f_res_22899 = zt_res_22897 - mean_22866;
        float defunc_1_f_res_22900 = defunc_1_f_res_22898 / from_array_res_24251;
        float defunc_1_f_res_22901 = defunc_1_f_res_22899 / from_array_res_24252;
        float defunc_1_f_res_22902 = defunc_1_f_res_22900 * defunc_1_f_res_22900;
        float defunc_1_f_res_22903 = defunc_1_f_res_22901 * defunc_1_f_res_22901;
        float defunc_1_f_res_22904 = defunc_1_f_res_22902 + defunc_1_f_res_22903;
        float defunc_0_g_res_22905 = futrts_sqrt32(defunc_1_f_res_22904);
        bool zg_res_22906 = 1.0e-2F < defunc_0_g_res_22905;
        bool loop_while_tmp_24535 = zg_res_22906;
        float mean_tmp_24536 = zt_res_22896;
        float mean_tmp_24537 = zt_res_22897;
        
        loop_while_22864 = loop_while_tmp_24535;
        mean_22865 = mean_tmp_24536;
        mean_22866 = mean_tmp_24537;
    }
    defunc_0_f_res_22861 = loop_while_22864;
    defunc_0_f_res_22862 = mean_22865;
    defunc_0_f_res_22863 = mean_22866;
    if (local_tid_24526 == 0) {
        ((__global float *) mem_24305)[gtid_22857] = defunc_0_f_res_22862;
    }
    if (local_tid_24526 == 0) {
        ((__global float *) mem_24308)[gtid_22857] = defunc_0_f_res_22863;
    }
    
  error_2:
    return;
}
__kernel void cluster_2Dzisegmap_intragroup_23798(__global int *global_failure, __local volatile int64_t *color_24495_backing_aligned_0, __local volatile int64_t *color_24494_backing_aligned_1, __local volatile int64_t *color_24493_backing_aligned_2, int64_t n_15983, int64_t partition_sizze_21146, int64_t segmap_usable_groups_23064, int64_t num_whole_tiles_23818, int64_t residual_input_23978, unsigned char cond_23979_bits, int64_t binop_x_23995, __global unsigned char *data_mem_24282, __global unsigned char *mem_24286, __global unsigned char *mem_24289, __global unsigned char *mem_24291, __global unsigned char *mem_24293, __global unsigned char *mem_24374)
{
    bool cond_23979 = cond_23979_bits;
    
    #define segmap_group_sizze_23063 (cluster_2Dzisegmap_group_sizze_23035)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict color_24495_backing_2 = (__local volatile unsigned char *) color_24495_backing_aligned_0;
    __local volatile unsigned char *restrict color_24494_backing_1 = (__local volatile unsigned char *) color_24494_backing_aligned_1;
    __local volatile unsigned char *restrict color_24493_backing_0 = (__local volatile unsigned char *) color_24493_backing_aligned_2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24636;
    int64_t group_sizze_24639;
    int32_t wave_sizze_24638;
    int32_t group_tid_24637;
    
    local_tid_24636 = get_local_id(0);
    group_sizze_24639 = get_local_size(0);
    wave_sizze_24638 = LOCKSTEP_WIDTH;
    group_tid_24637 = get_group_id(0);
    
    int32_t global_tid_24635 = group_tid_24637 * group_sizze_24639 + local_tid_24636;
    int32_t gid_flat_23798 = group_tid_24637;
    int64_t slice_24641 = segmap_group_sizze_23063;
    int64_t ltid_pre_24640 = sext_i32_i64(local_tid_24636);
    int64_t remnant_24642 = sext_i32_i64(local_tid_24636) - ltid_pre_24640;
    int64_t slice_24643 = segmap_usable_groups_23064;
    int64_t gid_23797 = sext_i32_i64(group_tid_24637);
    int64_t remnant_24644 = sext_i32_i64(group_tid_24637) - gid_23797;
    __local unsigned char *color_24493;
    
    color_24493 = (__local unsigned char *) color_24493_backing_0;
    
    __local unsigned char *color_24494;
    
    color_24494 = (__local unsigned char *) color_24494_backing_1;
    
    __local unsigned char *color_24495;
    
    color_24495 = (__local unsigned char *) color_24495_backing_2;
    
    float from_array_res_24257 = ((__global float *) mem_24291)[(int64_t) 0];
    float from_array_res_24258 = ((__global float *) mem_24293)[(int64_t) 0];
    int64_t binop_x_23807 = segmap_group_sizze_23063 * gid_23797;
    float mem_24329[1];
    float mem_24331[1];
    int32_t ltid_flat_23800 = local_tid_24636;
    int64_t ltid_23799 = sext_i32_i64(sext_i64_i32(ltid_pre_24640));
    int64_t gtid_23808 = ltid_23799 + binop_x_23807;
    bool cond_23809 = slt64(gtid_23808, n_15983);
    float pre_23810;
    float pre_23811;
    
    if (cond_23809 == 1) {
        float x_23812 = ((__global float *) data_mem_24282)[gtid_23808 * (int64_t) 2];
        float x_23813 = ((__global float *) data_mem_24282)[gtid_23808 * (int64_t) 2 + (int64_t) 1];
        
        pre_23810 = x_23812;
        pre_23811 = x_23813;
    } else {
        pre_23810 = 0.0F;
        pre_23811 = 0.0F;
    }
    mem_24329[(int64_t) 0] = pre_23810;
    mem_24331[(int64_t) 0] = pre_23811;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t mem_24334[1];
    float mem_24336[1];
    int32_t ltid_flat_23820 = local_tid_24636;
    int64_t ltid_23819 = sext_i32_i64(sext_i64_i32(ltid_pre_24640));
    
    mem_24334[(int64_t) 0] = (int64_t) 0;
    mem_24336[(int64_t) 0] = INFINITY;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t mem_in_24484[1];
    int64_t mem_24351[1];
    float mem_in_24488[1];
    float mem_24353[1];
    int64_t tmp_24645 = mem_24334[(int64_t) 0];
    
    mem_in_24484[(int64_t) 0] = tmp_24645;
    
    float tmp_24646 = mem_24336[(int64_t) 0];
    
    mem_in_24488[(int64_t) 0] = tmp_24646;
    
    int64_t ext_mem_24355[1];
    int64_t ext_mem_unused_24485[1];
    float ext_mem_24354[1];
    float ext_mem_unused_24489[1];
    int64_t mem_param_24337[1];
    float mem_param_24338[1];
    int64_t mem_param_out_24486[1];
    float mem_param_out_24490[1];
    
    for (int32_t i_3 = 0; i_3 < 1; i_3++)
        mem_param_24337[i_3] = mem_in_24484[i_3];
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        mem_param_out_24486[i_4] = mem_24351[i_4];
    for (int32_t i_5 = 0; i_5 < 1; i_5++)
        mem_param_24338[i_5] = mem_in_24488[i_5];
    for (int32_t i_6 = 0; i_6 < 1; i_6++)
        mem_param_out_24490[i_6] = mem_24353[i_6];
    for (int64_t tile_id_23828 = 0; tile_id_23828 < num_whole_tiles_23818; tile_id_23828++) {
        int64_t binop_x_23909 = segmap_group_sizze_23063 * tile_id_23828;
        int32_t ltid_flat_23908 = local_tid_24636;
        int64_t ltid_23907 = sext_i32_i64(sext_i64_i32(ltid_pre_24640));
        int64_t j_23910 = ltid_23907 + binop_x_23909;
        bool cond_23915 = slt64(j_23910, partition_sizze_21146);
        int64_t pre1d_23918;
        
        if (cond_23915 == 1) {
            pre1d_23918 = j_23910;
        } else {
            pre1d_23918 = (int64_t) 0;
        }
        
        float pre1d_23916;
        float pre1d_23917;
        
        if (cond_23915 == 1) {
            float tile_elem_23919 = ((__global float *) mem_24286)[j_23910];
            float tile_elem_23920 = ((__global float *) mem_24289)[j_23910];
            
            pre1d_23916 = tile_elem_23919;
            pre1d_23917 = tile_elem_23920;
        } else {
            pre1d_23916 = 0.0F;
            pre1d_23917 = 0.0F;
        }
        ((__local float *) color_24495)[ltid_23907] = pre1d_23916;
        ((__local float *) color_24494)[ltid_23907] = pre1d_23917;
        ((__local int64_t *) color_24493)[ltid_23907] = pre1d_23918;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t ltid_flat_23928 = local_tid_24636;
        int64_t ltid_23927 = sext_i32_i64(sext_i64_i32(ltid_pre_24640));
        int64_t gtid_23930 = binop_x_23807 + ltid_23927;
        int64_t acc_23933 = mem_param_24337[(int64_t) 0];
        float acc_23934 = mem_param_24338[(int64_t) 0];
        bool cond_23935 = slt64(gtid_23930, n_15983);
        int64_t acc_23936;
        float acc_23937;
        
        if (cond_23935 == 1) {
            float x_23931 = mem_24329[(int64_t) 0];
            float x_23932 = mem_24331[(int64_t) 0];
            int64_t x_23938;
            float x_23939;
            int64_t redout_24236;
            float redout_24237;
            
            redout_24236 = acc_23933;
            redout_24237 = acc_23934;
            for (int64_t i_24238 = 0; i_24238 < segmap_group_sizze_23063; i_24238++) {
                float x_23947 = ((__local float *) color_24495)[i_24238];
                float x_23948 = ((__local float *) color_24494)[i_24238];
                float defunc_1_f_res_23950 = x_23931 - x_23947;
                float defunc_1_f_res_23951 = x_23932 - x_23948;
                float defunc_1_f_res_23952 = defunc_1_f_res_23950 / from_array_res_24257;
                float defunc_1_f_res_23953 = defunc_1_f_res_23951 / from_array_res_24258;
                float defunc_1_f_res_23954 = defunc_1_f_res_23952 * defunc_1_f_res_23952;
                float defunc_1_f_res_23955 = defunc_1_f_res_23953 * defunc_1_f_res_23953;
                float defunc_1_f_res_23956 = defunc_1_f_res_23954 + defunc_1_f_res_23955;
                float defunc_0_g_res_23957 = futrts_sqrt32(defunc_1_f_res_23956);
                bool zl_res_23944 = redout_24237 < defunc_0_g_res_23957;
                int64_t defunc_1_op_res_23945;
                
                if (zl_res_23944 == 1) {
                    defunc_1_op_res_23945 = redout_24236;
                } else {
                    int64_t x_23949 = ((__local int64_t *) color_24493)[i_24238];
                    
                    defunc_1_op_res_23945 = x_23949;
                }
                
                float defunc_1_op_res_23946;
                
                if (zl_res_23944 == 1) {
                    defunc_1_op_res_23946 = redout_24237;
                } else {
                    defunc_1_op_res_23946 = defunc_0_g_res_23957;
                }
                
                int64_t redout_tmp_24653 = defunc_1_op_res_23945;
                float redout_tmp_24654 = defunc_1_op_res_23946;
                
                redout_24236 = redout_tmp_24653;
                redout_24237 = redout_tmp_24654;
            }
            x_23938 = redout_24236;
            x_23939 = redout_24237;
            acc_23936 = x_23938;
            acc_23937 = x_23939;
        } else {
            acc_23936 = acc_23933;
            acc_23937 = acc_23934;
        }
        mem_param_out_24486[(int64_t) 0] = acc_23936;
        mem_param_out_24490[(int64_t) 0] = acc_23937;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t mem_param_tmp_24647[1];
        
        for (int32_t i_7 = 0; i_7 < 1; i_7++)
            mem_param_tmp_24647[i_7] = mem_param_out_24486[i_7];
        
        int64_t mem_param_out_tmp_24648[1];
        
        for (int32_t i_8 = 0; i_8 < 1; i_8++)
            mem_param_out_tmp_24648[i_8] = mem_param_24337[i_8];
        
        float mem_param_tmp_24649[1];
        
        for (int32_t i_9 = 0; i_9 < 1; i_9++)
            mem_param_tmp_24649[i_9] = mem_param_out_24490[i_9];
        
        float mem_param_out_tmp_24650[1];
        
        for (int32_t i_10 = 0; i_10 < 1; i_10++)
            mem_param_out_tmp_24650[i_10] = mem_param_24338[i_10];
        for (int32_t i_11 = 0; i_11 < 1; i_11++)
            mem_param_24337[i_11] = mem_param_tmp_24647[i_11];
        for (int32_t i_12 = 0; i_12 < 1; i_12++)
            mem_param_out_24486[i_12] = mem_param_out_tmp_24648[i_12];
        for (int32_t i_13 = 0; i_13 < 1; i_13++)
            mem_param_24338[i_13] = mem_param_tmp_24649[i_13];
        for (int32_t i_14 = 0; i_14 < 1; i_14++)
            mem_param_out_24490[i_14] = mem_param_out_tmp_24650[i_14];
    }
    for (int32_t i_15 = 0; i_15 < 1; i_15++)
        ext_mem_24355[i_15] = mem_param_24337[i_15];
    for (int32_t i_16 = 0; i_16 < 1; i_16++)
        ext_mem_unused_24485[i_16] = mem_param_out_24486[i_16];
    for (int32_t i_17 = 0; i_17 < 1; i_17++)
        ext_mem_24354[i_17] = mem_param_24338[i_17];
    for (int32_t i_18 = 0; i_18 < 1; i_18++)
        ext_mem_unused_24489[i_18] = mem_param_out_24490[i_18];
    
    int64_t mem_24447[1];
    int64_t mem_24368[1];
    float mem_24370[1];
    
    if (cond_23979 == 1) {
        int64_t tmp_24655 = ext_mem_24355[(int64_t) 0];
        
        mem_24447[(int64_t) 0] = tmp_24655;
    } else {
        int32_t ltid_flat_23981 = local_tid_24636;
        int64_t ltid_23980 = sext_i32_i64(sext_i64_i32(ltid_pre_24640));
        int64_t j_23996 = ltid_23980 + binop_x_23995;
        bool cond_24001 = slt64(j_23996, partition_sizze_21146);
        int64_t pre1d_24004;
        
        if (cond_24001 == 1) {
            pre1d_24004 = j_23996;
        } else {
            pre1d_24004 = (int64_t) 0;
        }
        
        float pre1d_24002;
        float pre1d_24003;
        
        if (cond_24001 == 1) {
            float tile_elem_24005 = ((__global float *) mem_24286)[j_23996];
            float tile_elem_24006 = ((__global float *) mem_24289)[j_23996];
            
            pre1d_24002 = tile_elem_24005;
            pre1d_24003 = tile_elem_24006;
        } else {
            pre1d_24002 = 0.0F;
            pre1d_24003 = 0.0F;
        }
        ((__local float *) color_24495)[ltid_23980] = pre1d_24002;
        ((__local float *) color_24494)[ltid_23980] = pre1d_24003;
        ((__local int64_t *) color_24493)[ltid_23980] = pre1d_24004;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t ltid_flat_24018 = local_tid_24636;
        int64_t ltid_24017 = sext_i32_i64(sext_i64_i32(ltid_pre_24640));
        int64_t gtid_24028 = binop_x_23807 + ltid_24017;
        int64_t acc_24031 = ext_mem_24355[(int64_t) 0];
        float acc_24032 = ext_mem_24354[(int64_t) 0];
        bool cond_24033 = slt64(gtid_24028, n_15983);
        int64_t acc_24034;
        float acc_24035;
        
        if (cond_24033 == 1) {
            float x_24029 = mem_24329[(int64_t) 0];
            float x_24030 = mem_24331[(int64_t) 0];
            int64_t x_24036;
            float x_24037;
            int64_t redout_24239;
            float redout_24240;
            
            redout_24239 = acc_24031;
            redout_24240 = acc_24032;
            for (int64_t i_24241 = 0; i_24241 < residual_input_23978; i_24241++) {
                float x_24045 = ((__local float *) color_24495)[i_24241];
                float x_24046 = ((__local float *) color_24494)[i_24241];
                float defunc_1_f_res_24048 = x_24029 - x_24045;
                float defunc_1_f_res_24049 = x_24030 - x_24046;
                float defunc_1_f_res_24050 = defunc_1_f_res_24048 / from_array_res_24257;
                float defunc_1_f_res_24051 = defunc_1_f_res_24049 / from_array_res_24258;
                float defunc_1_f_res_24052 = defunc_1_f_res_24050 * defunc_1_f_res_24050;
                float defunc_1_f_res_24053 = defunc_1_f_res_24051 * defunc_1_f_res_24051;
                float defunc_1_f_res_24054 = defunc_1_f_res_24052 + defunc_1_f_res_24053;
                float defunc_0_g_res_24055 = futrts_sqrt32(defunc_1_f_res_24054);
                bool zl_res_24042 = redout_24240 < defunc_0_g_res_24055;
                int64_t defunc_1_op_res_24043;
                
                if (zl_res_24042 == 1) {
                    defunc_1_op_res_24043 = redout_24239;
                } else {
                    int64_t x_24047 = ((__local int64_t *) color_24493)[i_24241];
                    
                    defunc_1_op_res_24043 = x_24047;
                }
                
                float defunc_1_op_res_24044;
                
                if (zl_res_24042 == 1) {
                    defunc_1_op_res_24044 = redout_24240;
                } else {
                    defunc_1_op_res_24044 = defunc_0_g_res_24055;
                }
                
                int64_t redout_tmp_24656 = defunc_1_op_res_24043;
                float redout_tmp_24657 = defunc_1_op_res_24044;
                
                redout_24239 = redout_tmp_24656;
                redout_24240 = redout_tmp_24657;
            }
            x_24036 = redout_24239;
            x_24037 = redout_24240;
            acc_24034 = x_24036;
            acc_24035 = x_24037;
        } else {
            acc_24034 = acc_24031;
            acc_24035 = acc_24032;
        }
        mem_24368[(int64_t) 0] = acc_24034;
        mem_24370[(int64_t) 0] = acc_24035;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t tmp_24658 = mem_24368[(int64_t) 0];
        
        mem_24447[(int64_t) 0] = tmp_24658;
    }
    if (slt64(sext_i32_i64(local_tid_24636) + segmap_group_sizze_23063 * sext_i32_i64(group_tid_24637), n_15983)) {
        int64_t tmp_24659 = mem_24447[(int64_t) 0];
        
        ((__global int64_t *) mem_24374)[sext_i32_i64(local_tid_24636) + segmap_group_sizze_23063 * sext_i32_i64(group_tid_24637)] = tmp_24659;
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_23063
}
__kernel void cluster_2Dzisegred_large_23133(__global int *global_failure, __local volatile int64_t *sync_arr_mem_24715_backing_aligned_0, __local volatile int64_t *red_arr_mem_24713_backing_aligned_1, __local volatile int64_t *red_arr_mem_24711_backing_aligned_2, int64_t n_15983, int64_t partition_sizze_21146, int64_t num_groups_23127, int64_t groups_per_segment_24695, int64_t elements_per_thread_24696, int64_t virt_num_groups_24697, __global unsigned char *data_mem_24282, __global unsigned char *mem_24286, __global unsigned char *mem_24289, __global unsigned char *mem_24291, __global unsigned char *mem_24293, __global unsigned char *mem_24322, __global unsigned char *mem_24325, __global unsigned char *segred_tmp_mem_24700, __global unsigned char *segred_tmp_mem_24702, __global unsigned char *cluster_2Dzicounter_mem_24704)
{
    #define segred_group_sizze_23126 (cluster_2Dzisegred_group_sizze_23094)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict sync_arr_mem_24715_backing_2 = (__local volatile unsigned char *) sync_arr_mem_24715_backing_aligned_0;
    __local volatile unsigned char *restrict red_arr_mem_24713_backing_1 = (__local volatile unsigned char *) red_arr_mem_24713_backing_aligned_1;
    __local volatile unsigned char *restrict red_arr_mem_24711_backing_0 = (__local volatile unsigned char *) red_arr_mem_24711_backing_aligned_2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24707;
    int64_t group_sizze_24710;
    int32_t wave_sizze_24709;
    int32_t group_tid_24708;
    
    local_tid_24707 = get_local_id(0);
    group_sizze_24710 = get_local_size(0);
    wave_sizze_24709 = LOCKSTEP_WIDTH;
    group_tid_24708 = get_group_id(0);
    
    int32_t global_tid_24706 = group_tid_24708 * group_sizze_24710 + local_tid_24707;
    int32_t phys_tid_23133 = global_tid_24706;
    __local unsigned char *red_arr_mem_24711;
    
    red_arr_mem_24711 = (__local unsigned char *) red_arr_mem_24711_backing_0;
    
    __local unsigned char *red_arr_mem_24713;
    
    red_arr_mem_24713 = (__local unsigned char *) red_arr_mem_24713_backing_1;
    
    __local unsigned char *sync_arr_mem_24715;
    
    sync_arr_mem_24715 = (__local unsigned char *) sync_arr_mem_24715_backing_2;
    
    int32_t phys_group_id_24717;
    
    phys_group_id_24717 = get_group_id(0);
    
    int32_t iterations_24718 = sdiv_up32(sext_i64_i32(virt_num_groups_24697) - phys_group_id_24717, sext_i64_i32(num_groups_23127));
    
    for (int32_t i_24719 = 0; i_24719 < iterations_24718; i_24719++) {
        int32_t virt_group_id_24720 = phys_group_id_24717 + i_24719 * sext_i64_i32(num_groups_23127);
        int32_t flat_segment_id_24721 = squot32(virt_group_id_24720, sext_i64_i32(groups_per_segment_24695));
        int64_t global_tid_24722 = srem64(sext_i32_i64(virt_group_id_24720) * segred_group_sizze_23126 + sext_i32_i64(local_tid_24707), segred_group_sizze_23126 * groups_per_segment_24695);
        int64_t slice_24723 = n_15983;
        int64_t gtid_23131 = sext_i32_i64(flat_segment_id_24721);
        int64_t remnant_24724 = sext_i32_i64(flat_segment_id_24721) - gtid_23131;
        int64_t gtid_23132;
        int64_t x_acc_24725;
        float x_acc_24726;
        int64_t chunk_sizze_24727;
        int64_t starting_point_24728 = global_tid_24722 * elements_per_thread_24696;
        int64_t remaining_elements_24729 = partition_sizze_21146 - starting_point_24728;
        
        if (sle64(remaining_elements_24729, (int64_t) 0) || sle64(partition_sizze_21146, starting_point_24728)) {
            chunk_sizze_24727 = (int64_t) 0;
        } else if (slt64(partition_sizze_21146, (global_tid_24722 + (int64_t) 1) * elements_per_thread_24696)) {
            chunk_sizze_24727 = partition_sizze_21146 - global_tid_24722 * elements_per_thread_24696;
        } else {
            chunk_sizze_24727 = elements_per_thread_24696;
        }
        
        int64_t x_23134;
        float x_23135;
        int64_t x_23136;
        float x_23137;
        
        // neutral-initialise the accumulators
        {
            x_acc_24725 = (int64_t) 0;
            x_acc_24726 = INFINITY;
        }
        for (int64_t i_24737 = 0; i_24737 < elements_per_thread_24696; i_24737++) {
            gtid_23132 = sext_i32_i64(local_tid_24707) + (squot64(global_tid_24722, segred_group_sizze_23126) * elements_per_thread_24696 + i_24737) * segred_group_sizze_23126;
            if (slt64(gtid_23132, partition_sizze_21146)) {
                // apply map function
                {
                    float from_array_res_24259 = ((__global float *) mem_24291)[(int64_t) 0];
                    float from_array_res_24260 = ((__global float *) mem_24293)[(int64_t) 0];
                    float x_23141 = ((__global float *) data_mem_24282)[gtid_23131 * (int64_t) 2];
                    float x_23142 = ((__global float *) data_mem_24282)[gtid_23131 * (int64_t) 2 + (int64_t) 1];
                    float x_23143 = ((__global float *) mem_24286)[gtid_23132];
                    float x_23144 = ((__global float *) mem_24289)[gtid_23132];
                    float defunc_1_f_res_23146 = x_23141 - x_23143;
                    float defunc_1_f_res_23147 = x_23142 - x_23144;
                    float defunc_1_f_res_23148 = defunc_1_f_res_23146 / from_array_res_24259;
                    float defunc_1_f_res_23149 = defunc_1_f_res_23147 / from_array_res_24260;
                    float defunc_1_f_res_23150 = defunc_1_f_res_23148 * defunc_1_f_res_23148;
                    float defunc_1_f_res_23151 = defunc_1_f_res_23149 * defunc_1_f_res_23149;
                    float defunc_1_f_res_23152 = defunc_1_f_res_23150 + defunc_1_f_res_23151;
                    float defunc_0_g_res_23153 = futrts_sqrt32(defunc_1_f_res_23152);
                    
                    // save map-out results
                    { }
                    // load accumulator
                    {
                        x_23134 = x_acc_24725;
                        x_23135 = x_acc_24726;
                    }
                    // load new values
                    {
                        x_23136 = gtid_23132;
                        x_23137 = defunc_0_g_res_23153;
                    }
                    // apply reduction operator
                    {
                        bool zl_res_23138 = x_23135 < x_23137;
                        int64_t defunc_1_op_res_23139;
                        
                        if (zl_res_23138 == 1) {
                            defunc_1_op_res_23139 = x_23134;
                        } else {
                            defunc_1_op_res_23139 = x_23136;
                        }
                        
                        float defunc_1_op_res_23140;
                        
                        if (zl_res_23138 == 1) {
                            defunc_1_op_res_23140 = x_23135;
                        } else {
                            defunc_1_op_res_23140 = x_23137;
                        }
                        // store in accumulator
                        {
                            x_acc_24725 = defunc_1_op_res_23139;
                            x_acc_24726 = defunc_1_op_res_23140;
                        }
                    }
                }
            }
            // to reduce current chunk, first store our result in memory
            {
                x_23134 = x_acc_24725;
                x_23135 = x_acc_24726;
                ((__local int64_t *) red_arr_mem_24711)[sext_i32_i64(local_tid_24707)] = x_23134;
                ((__local float *) red_arr_mem_24713)[sext_i32_i64(local_tid_24707)] = x_23135;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int32_t offset_24738;
            int32_t skip_waves_24739 = 1;
            int64_t x_24730;
            float x_24731;
            int64_t x_24732;
            float x_24733;
            
            offset_24738 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_24707, sext_i64_i32(segred_group_sizze_23126))) {
                    x_24730 = ((__local int64_t *) red_arr_mem_24711)[sext_i32_i64(local_tid_24707 + offset_24738)];
                    x_24731 = ((__local float *) red_arr_mem_24713)[sext_i32_i64(local_tid_24707 + offset_24738)];
                }
            }
            offset_24738 = 1;
            while (slt32(offset_24738, wave_sizze_24709)) {
                if (slt32(local_tid_24707 + offset_24738, sext_i64_i32(segred_group_sizze_23126)) && ((local_tid_24707 - squot32(local_tid_24707, wave_sizze_24709) * wave_sizze_24709) & (2 * offset_24738 - 1)) == 0) {
                    // read array element
                    {
                        x_24732 = ((volatile __local int64_t *) red_arr_mem_24711)[sext_i32_i64(local_tid_24707 + offset_24738)];
                        x_24733 = ((volatile __local float *) red_arr_mem_24713)[sext_i32_i64(local_tid_24707 + offset_24738)];
                    }
                    // apply reduction operation
                    {
                        bool zl_res_24734 = x_24731 < x_24733;
                        int64_t defunc_1_op_res_24735;
                        
                        if (zl_res_24734 == 1) {
                            defunc_1_op_res_24735 = x_24730;
                        } else {
                            defunc_1_op_res_24735 = x_24732;
                        }
                        
                        float defunc_1_op_res_24736;
                        
                        if (zl_res_24734 == 1) {
                            defunc_1_op_res_24736 = x_24731;
                        } else {
                            defunc_1_op_res_24736 = x_24733;
                        }
                        x_24730 = defunc_1_op_res_24735;
                        x_24731 = defunc_1_op_res_24736;
                    }
                    // write result of operation
                    {
                        ((volatile __local int64_t *) red_arr_mem_24711)[sext_i32_i64(local_tid_24707)] = x_24730;
                        ((volatile __local float *) red_arr_mem_24713)[sext_i32_i64(local_tid_24707)] = x_24731;
                    }
                }
                offset_24738 *= 2;
            }
            while (slt32(skip_waves_24739, squot32(sext_i64_i32(segred_group_sizze_23126) + wave_sizze_24709 - 1, wave_sizze_24709))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_24738 = skip_waves_24739 * wave_sizze_24709;
                if (slt32(local_tid_24707 + offset_24738, sext_i64_i32(segred_group_sizze_23126)) && ((local_tid_24707 - squot32(local_tid_24707, wave_sizze_24709) * wave_sizze_24709) == 0 && (squot32(local_tid_24707, wave_sizze_24709) & (2 * skip_waves_24739 - 1)) == 0)) {
                    // read array element
                    {
                        x_24732 = ((__local int64_t *) red_arr_mem_24711)[sext_i32_i64(local_tid_24707 + offset_24738)];
                        x_24733 = ((__local float *) red_arr_mem_24713)[sext_i32_i64(local_tid_24707 + offset_24738)];
                    }
                    // apply reduction operation
                    {
                        bool zl_res_24734 = x_24731 < x_24733;
                        int64_t defunc_1_op_res_24735;
                        
                        if (zl_res_24734 == 1) {
                            defunc_1_op_res_24735 = x_24730;
                        } else {
                            defunc_1_op_res_24735 = x_24732;
                        }
                        
                        float defunc_1_op_res_24736;
                        
                        if (zl_res_24734 == 1) {
                            defunc_1_op_res_24736 = x_24731;
                        } else {
                            defunc_1_op_res_24736 = x_24733;
                        }
                        x_24730 = defunc_1_op_res_24735;
                        x_24731 = defunc_1_op_res_24736;
                    }
                    // write result of operation
                    {
                        ((__local int64_t *) red_arr_mem_24711)[sext_i32_i64(local_tid_24707)] = x_24730;
                        ((__local float *) red_arr_mem_24713)[sext_i32_i64(local_tid_24707)] = x_24731;
                    }
                }
                skip_waves_24739 *= 2;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread saves the result in accumulator
            {
                if (sext_i32_i64(local_tid_24707) == (int64_t) 0) {
                    x_acc_24725 = x_24730;
                    x_acc_24726 = x_24731;
                }
            }
            // first thread keeps accumulator; others reset to neutral element
            {
                if (!(sext_i32_i64(local_tid_24707) == (int64_t) 0)) {
                    x_acc_24725 = (int64_t) 0;
                    x_acc_24726 = INFINITY;
                }
            }
        }
        if (groups_per_segment_24695 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_24707 == 0) {
                    ((__global int64_t *) mem_24322)[gtid_23131] = x_acc_24725;
                    ((__global float *) mem_24325)[gtid_23131] = x_acc_24726;
                }
            }
        } else {
            int32_t old_counter_24740;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_24707 == 0) {
                    ((__global int64_t *) segred_tmp_mem_24700)[sext_i32_i64(virt_group_id_24720)] = x_acc_24725;
                    ((__global float *) segred_tmp_mem_24702)[sext_i32_i64(virt_group_id_24720)] = x_acc_24726;
                    mem_fence_global();
                    old_counter_24740 = atomic_add_i32_global(&((volatile __global int *) cluster_2Dzicounter_mem_24704)[sext_i32_i64(srem32(flat_segment_id_24721, 10240))], (int) 1);
                    ((__local bool *) sync_arr_mem_24715)[(int64_t) 0] = old_counter_24740 == groups_per_segment_24695 - (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_24741 = ((__local bool *) sync_arr_mem_24715)[(int64_t) 0];
            
            if (is_last_group_24741) {
                if (local_tid_24707 == 0) {
                    old_counter_24740 = atomic_add_i32_global(&((volatile __global int *) cluster_2Dzicounter_mem_24704)[sext_i32_i64(srem32(flat_segment_id_24721, 10240))], (int) ((int64_t) 0 - groups_per_segment_24695));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_24742 = sdiv_up64(groups_per_segment_24695, segred_group_sizze_23126);
                    
                    x_23134 = (int64_t) 0;
                    x_23135 = INFINITY;
                    for (int64_t i_24743 = 0; i_24743 < read_per_thread_24742; i_24743++) {
                        int64_t group_res_id_24744 = sext_i32_i64(local_tid_24707) * read_per_thread_24742 + i_24743;
                        int64_t index_of_group_res_24745 = sext_i32_i64(flat_segment_id_24721) * groups_per_segment_24695 + group_res_id_24744;
                        
                        if (slt64(group_res_id_24744, groups_per_segment_24695)) {
                            x_23136 = ((__global int64_t *) segred_tmp_mem_24700)[index_of_group_res_24745];
                            x_23137 = ((__global float *) segred_tmp_mem_24702)[index_of_group_res_24745];
                            
                            bool zl_res_23138 = x_23135 < x_23137;
                            int64_t defunc_1_op_res_23139;
                            
                            if (zl_res_23138 == 1) {
                                defunc_1_op_res_23139 = x_23134;
                            } else {
                                defunc_1_op_res_23139 = x_23136;
                            }
                            
                            float defunc_1_op_res_23140;
                            
                            if (zl_res_23138 == 1) {
                                defunc_1_op_res_23140 = x_23135;
                            } else {
                                defunc_1_op_res_23140 = x_23137;
                            }
                            x_23134 = defunc_1_op_res_23139;
                            x_23135 = defunc_1_op_res_23140;
                        }
                    }
                }
                ((__local int64_t *) red_arr_mem_24711)[sext_i32_i64(local_tid_24707)] = x_23134;
                ((__local float *) red_arr_mem_24713)[sext_i32_i64(local_tid_24707)] = x_23135;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_24746;
                    int32_t skip_waves_24747 = 1;
                    int64_t x_24730;
                    float x_24731;
                    int64_t x_24732;
                    float x_24733;
                    
                    offset_24746 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_24707, sext_i64_i32(segred_group_sizze_23126))) {
                            x_24730 = ((__local int64_t *) red_arr_mem_24711)[sext_i32_i64(local_tid_24707 + offset_24746)];
                            x_24731 = ((__local float *) red_arr_mem_24713)[sext_i32_i64(local_tid_24707 + offset_24746)];
                        }
                    }
                    offset_24746 = 1;
                    while (slt32(offset_24746, wave_sizze_24709)) {
                        if (slt32(local_tid_24707 + offset_24746, sext_i64_i32(segred_group_sizze_23126)) && ((local_tid_24707 - squot32(local_tid_24707, wave_sizze_24709) * wave_sizze_24709) & (2 * offset_24746 - 1)) == 0) {
                            // read array element
                            {
                                x_24732 = ((volatile __local int64_t *) red_arr_mem_24711)[sext_i32_i64(local_tid_24707 + offset_24746)];
                                x_24733 = ((volatile __local float *) red_arr_mem_24713)[sext_i32_i64(local_tid_24707 + offset_24746)];
                            }
                            // apply reduction operation
                            {
                                bool zl_res_24734 = x_24731 < x_24733;
                                int64_t defunc_1_op_res_24735;
                                
                                if (zl_res_24734 == 1) {
                                    defunc_1_op_res_24735 = x_24730;
                                } else {
                                    defunc_1_op_res_24735 = x_24732;
                                }
                                
                                float defunc_1_op_res_24736;
                                
                                if (zl_res_24734 == 1) {
                                    defunc_1_op_res_24736 = x_24731;
                                } else {
                                    defunc_1_op_res_24736 = x_24733;
                                }
                                x_24730 = defunc_1_op_res_24735;
                                x_24731 = defunc_1_op_res_24736;
                            }
                            // write result of operation
                            {
                                ((volatile __local int64_t *) red_arr_mem_24711)[sext_i32_i64(local_tid_24707)] = x_24730;
                                ((volatile __local float *) red_arr_mem_24713)[sext_i32_i64(local_tid_24707)] = x_24731;
                            }
                        }
                        offset_24746 *= 2;
                    }
                    while (slt32(skip_waves_24747, squot32(sext_i64_i32(segred_group_sizze_23126) + wave_sizze_24709 - 1, wave_sizze_24709))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_24746 = skip_waves_24747 * wave_sizze_24709;
                        if (slt32(local_tid_24707 + offset_24746, sext_i64_i32(segred_group_sizze_23126)) && ((local_tid_24707 - squot32(local_tid_24707, wave_sizze_24709) * wave_sizze_24709) == 0 && (squot32(local_tid_24707, wave_sizze_24709) & (2 * skip_waves_24747 - 1)) == 0)) {
                            // read array element
                            {
                                x_24732 = ((__local int64_t *) red_arr_mem_24711)[sext_i32_i64(local_tid_24707 + offset_24746)];
                                x_24733 = ((__local float *) red_arr_mem_24713)[sext_i32_i64(local_tid_24707 + offset_24746)];
                            }
                            // apply reduction operation
                            {
                                bool zl_res_24734 = x_24731 < x_24733;
                                int64_t defunc_1_op_res_24735;
                                
                                if (zl_res_24734 == 1) {
                                    defunc_1_op_res_24735 = x_24730;
                                } else {
                                    defunc_1_op_res_24735 = x_24732;
                                }
                                
                                float defunc_1_op_res_24736;
                                
                                if (zl_res_24734 == 1) {
                                    defunc_1_op_res_24736 = x_24731;
                                } else {
                                    defunc_1_op_res_24736 = x_24733;
                                }
                                x_24730 = defunc_1_op_res_24735;
                                x_24731 = defunc_1_op_res_24736;
                            }
                            // write result of operation
                            {
                                ((__local int64_t *) red_arr_mem_24711)[sext_i32_i64(local_tid_24707)] = x_24730;
                                ((__local float *) red_arr_mem_24713)[sext_i32_i64(local_tid_24707)] = x_24731;
                            }
                        }
                        skip_waves_24747 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_24707 == 0) {
                            ((__global int64_t *) mem_24322)[gtid_23131] = x_24730;
                            ((__global float *) mem_24325)[gtid_23131] = x_24731;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_23126
}
__kernel void cluster_2Dzisegred_small_23133(__global int *global_failure, __local volatile int64_t *red_arr_mem_24669_backing_aligned_0, __local volatile int64_t *red_arr_mem_24667_backing_aligned_1, int64_t n_15983, int64_t partition_sizze_21146, int64_t num_groups_23127, int64_t segment_sizze_nonzzero_24660, __global unsigned char *data_mem_24282, __global unsigned char *mem_24286, __global unsigned char *mem_24289, __global unsigned char *mem_24291, __global unsigned char *mem_24293, __global unsigned char *mem_24322, __global unsigned char *mem_24325)
{
    #define segred_group_sizze_23126 (cluster_2Dzisegred_group_sizze_23094)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict red_arr_mem_24669_backing_1 = (__local volatile unsigned char *) red_arr_mem_24669_backing_aligned_0;
    __local volatile unsigned char *restrict red_arr_mem_24667_backing_0 = (__local volatile unsigned char *) red_arr_mem_24667_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24663;
    int64_t group_sizze_24666;
    int32_t wave_sizze_24665;
    int32_t group_tid_24664;
    
    local_tid_24663 = get_local_id(0);
    group_sizze_24666 = get_local_size(0);
    wave_sizze_24665 = LOCKSTEP_WIDTH;
    group_tid_24664 = get_group_id(0);
    
    int32_t global_tid_24662 = group_tid_24664 * group_sizze_24666 + local_tid_24663;
    int32_t phys_tid_23133 = global_tid_24662;
    __local unsigned char *red_arr_mem_24667;
    
    red_arr_mem_24667 = (__local unsigned char *) red_arr_mem_24667_backing_0;
    
    __local unsigned char *red_arr_mem_24669;
    
    red_arr_mem_24669 = (__local unsigned char *) red_arr_mem_24669_backing_1;
    
    int32_t phys_group_id_24671;
    
    phys_group_id_24671 = get_group_id(0);
    
    int32_t iterations_24672 = sdiv_up32(sext_i64_i32(sdiv_up64(n_15983, squot64(segred_group_sizze_23126, segment_sizze_nonzzero_24660))) - phys_group_id_24671, sext_i64_i32(num_groups_23127));
    
    for (int32_t i_24673 = 0; i_24673 < iterations_24672; i_24673++) {
        int32_t virt_group_id_24674 = phys_group_id_24671 + i_24673 * sext_i64_i32(num_groups_23127);
        int64_t slice_24675 = n_15983;
        int64_t gtid_23131 = squot64(sext_i32_i64(local_tid_24663), segment_sizze_nonzzero_24660) + sext_i32_i64(virt_group_id_24674) * squot64(segred_group_sizze_23126, segment_sizze_nonzzero_24660);
        int64_t remnant_24676 = squot64(sext_i32_i64(local_tid_24663), segment_sizze_nonzzero_24660) + sext_i32_i64(virt_group_id_24674) * squot64(segred_group_sizze_23126, segment_sizze_nonzzero_24660) - gtid_23131;
        int64_t gtid_23132 = srem64(sext_i32_i64(local_tid_24663), partition_sizze_21146);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, partition_sizze_21146) && (slt64(gtid_23131, n_15983) && slt64(sext_i32_i64(local_tid_24663), partition_sizze_21146 * squot64(segred_group_sizze_23126, segment_sizze_nonzzero_24660)))) {
                float from_array_res_24259 = ((__global float *) mem_24291)[(int64_t) 0];
                float from_array_res_24260 = ((__global float *) mem_24293)[(int64_t) 0];
                float x_23141 = ((__global float *) data_mem_24282)[gtid_23131 * (int64_t) 2];
                float x_23142 = ((__global float *) data_mem_24282)[gtid_23131 * (int64_t) 2 + (int64_t) 1];
                float x_23143 = ((__global float *) mem_24286)[gtid_23132];
                float x_23144 = ((__global float *) mem_24289)[gtid_23132];
                float defunc_1_f_res_23146 = x_23141 - x_23143;
                float defunc_1_f_res_23147 = x_23142 - x_23144;
                float defunc_1_f_res_23148 = defunc_1_f_res_23146 / from_array_res_24259;
                float defunc_1_f_res_23149 = defunc_1_f_res_23147 / from_array_res_24260;
                float defunc_1_f_res_23150 = defunc_1_f_res_23148 * defunc_1_f_res_23148;
                float defunc_1_f_res_23151 = defunc_1_f_res_23149 * defunc_1_f_res_23149;
                float defunc_1_f_res_23152 = defunc_1_f_res_23150 + defunc_1_f_res_23151;
                float defunc_0_g_res_23153 = futrts_sqrt32(defunc_1_f_res_23152);
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local int64_t *) red_arr_mem_24667)[sext_i32_i64(local_tid_24663)] = gtid_23132;
                    ((__local float *) red_arr_mem_24669)[sext_i32_i64(local_tid_24663)] = defunc_0_g_res_23153;
                }
            } else {
                ((__local int64_t *) red_arr_mem_24667)[sext_i32_i64(local_tid_24663)] = (int64_t) 0;
                ((__local float *) red_arr_mem_24669)[sext_i32_i64(local_tid_24663)] = INFINITY;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, partition_sizze_21146)) {
            // perform segmented scan to imitate reduction
            {
                int64_t x_23134;
                float x_23135;
                int64_t x_23136;
                float x_23137;
                int64_t x_24677;
                float x_24678;
                int64_t x_24679;
                float x_24680;
                bool ltid_in_bounds_24684 = slt64(sext_i32_i64(local_tid_24663), partition_sizze_21146 * squot64(segred_group_sizze_23126, segment_sizze_nonzzero_24660));
                int32_t skip_threads_24685;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_24684) {
                        x_23136 = ((volatile __local int64_t *) red_arr_mem_24667)[sext_i32_i64(local_tid_24663)];
                        x_23137 = ((volatile __local float *) red_arr_mem_24669)[sext_i32_i64(local_tid_24663)];
                        if ((local_tid_24663 - squot32(local_tid_24663, 32) * 32) == 0) {
                            x_23134 = x_23136;
                            x_23135 = x_23137;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_24685 = 1;
                    while (slt32(skip_threads_24685, 32)) {
                        bool thread_active_24686 = sle32(skip_threads_24685, local_tid_24663 - squot32(local_tid_24663, 32) * 32) && ltid_in_bounds_24684;
                        
                        if (thread_active_24686) {
                            // read operands
                            {
                                x_23134 = ((volatile __local int64_t *) red_arr_mem_24667)[sext_i32_i64(local_tid_24663) - sext_i32_i64(skip_threads_24685)];
                                x_23135 = ((volatile __local float *) red_arr_mem_24669)[sext_i32_i64(local_tid_24663) - sext_i32_i64(skip_threads_24685)];
                            }
                        }
                        // perform operation
                        {
                            bool inactive_24687 = slt64(srem64(sext_i32_i64(local_tid_24663), partition_sizze_21146), sext_i32_i64(local_tid_24663) - sext_i32_i64(local_tid_24663 - skip_threads_24685));
                            
                            if (thread_active_24686 && inactive_24687) {
                                x_23134 = x_23136;
                                x_23135 = x_23137;
                            }
                            if (thread_active_24686) {
                                if (!inactive_24687) {
                                    bool zl_res_23138 = x_23135 < x_23137;
                                    int64_t defunc_1_op_res_23139;
                                    
                                    if (zl_res_23138 == 1) {
                                        defunc_1_op_res_23139 = x_23134;
                                    } else {
                                        defunc_1_op_res_23139 = x_23136;
                                    }
                                    
                                    float defunc_1_op_res_23140;
                                    
                                    if (zl_res_23138 == 1) {
                                        defunc_1_op_res_23140 = x_23135;
                                    } else {
                                        defunc_1_op_res_23140 = x_23137;
                                    }
                                    x_23134 = defunc_1_op_res_23139;
                                    x_23135 = defunc_1_op_res_23140;
                                }
                            }
                        }
                        if (sle32(wave_sizze_24665, skip_threads_24685)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (thread_active_24686) {
                            // write result
                            {
                                ((volatile __local int64_t *) red_arr_mem_24667)[sext_i32_i64(local_tid_24663)] = x_23134;
                                x_23136 = x_23134;
                                ((volatile __local float *) red_arr_mem_24669)[sext_i32_i64(local_tid_24663)] = x_23135;
                                x_23137 = x_23135;
                            }
                        }
                        if (sle32(wave_sizze_24665, skip_threads_24685)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_24685 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_24663 - squot32(local_tid_24663, 32) * 32) == 31 && ltid_in_bounds_24684) {
                        ((volatile __local int64_t *) red_arr_mem_24667)[sext_i32_i64(squot32(local_tid_24663, 32))] = x_23134;
                        ((volatile __local float *) red_arr_mem_24669)[sext_i32_i64(squot32(local_tid_24663, 32))] = x_23135;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_24688;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_24663, 32) == 0 && ltid_in_bounds_24684) {
                            x_24679 = ((volatile __local int64_t *) red_arr_mem_24667)[sext_i32_i64(local_tid_24663)];
                            x_24680 = ((volatile __local float *) red_arr_mem_24669)[sext_i32_i64(local_tid_24663)];
                            if ((local_tid_24663 - squot32(local_tid_24663, 32) * 32) == 0) {
                                x_24677 = x_24679;
                                x_24678 = x_24680;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_24688 = 1;
                        while (slt32(skip_threads_24688, 32)) {
                            bool thread_active_24689 = sle32(skip_threads_24688, local_tid_24663 - squot32(local_tid_24663, 32) * 32) && (squot32(local_tid_24663, 32) == 0 && ltid_in_bounds_24684);
                            
                            if (thread_active_24689) {
                                // read operands
                                {
                                    x_24677 = ((volatile __local int64_t *) red_arr_mem_24667)[sext_i32_i64(local_tid_24663) - sext_i32_i64(skip_threads_24688)];
                                    x_24678 = ((volatile __local float *) red_arr_mem_24669)[sext_i32_i64(local_tid_24663) - sext_i32_i64(skip_threads_24688)];
                                }
                            }
                            // perform operation
                            {
                                bool inactive_24690 = slt64(srem64(sext_i32_i64(local_tid_24663 * 32 + 32 - 1), partition_sizze_21146), sext_i32_i64(local_tid_24663 * 32 + 32 - 1) - sext_i32_i64((local_tid_24663 - skip_threads_24688) * 32 + 32 - 1));
                                
                                if (thread_active_24689 && inactive_24690) {
                                    x_24677 = x_24679;
                                    x_24678 = x_24680;
                                }
                                if (thread_active_24689) {
                                    if (!inactive_24690) {
                                        bool zl_res_24681 = x_24678 < x_24680;
                                        int64_t defunc_1_op_res_24682;
                                        
                                        if (zl_res_24681 == 1) {
                                            defunc_1_op_res_24682 = x_24677;
                                        } else {
                                            defunc_1_op_res_24682 = x_24679;
                                        }
                                        
                                        float defunc_1_op_res_24683;
                                        
                                        if (zl_res_24681 == 1) {
                                            defunc_1_op_res_24683 = x_24678;
                                        } else {
                                            defunc_1_op_res_24683 = x_24680;
                                        }
                                        x_24677 = defunc_1_op_res_24682;
                                        x_24678 = defunc_1_op_res_24683;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_24665, skip_threads_24688)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (thread_active_24689) {
                                // write result
                                {
                                    ((volatile __local int64_t *) red_arr_mem_24667)[sext_i32_i64(local_tid_24663)] = x_24677;
                                    x_24679 = x_24677;
                                    ((volatile __local float *) red_arr_mem_24669)[sext_i32_i64(local_tid_24663)] = x_24678;
                                    x_24680 = x_24678;
                                }
                            }
                            if (sle32(wave_sizze_24665, skip_threads_24688)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_24688 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                
                bool no_carry_in_24691 = squot32(local_tid_24663, 32) == 0 || !ltid_in_bounds_24684;
                
                // carry-in for every block except the first
                {
                    // read operands
                    {
                        if (!no_carry_in_24691) {
                            x_23136 = x_23134;
                            x_23137 = x_23135;
                            x_23134 = ((__local int64_t *) red_arr_mem_24667)[sext_i32_i64(squot32(local_tid_24663, 32)) - (int64_t) 1];
                            x_23135 = ((__local float *) red_arr_mem_24669)[sext_i32_i64(squot32(local_tid_24663, 32)) - (int64_t) 1];
                        }
                    }
                    // perform operation
                    {
                        bool inactive_24692 = slt64(srem64(sext_i32_i64(local_tid_24663), partition_sizze_21146), sext_i32_i64(local_tid_24663) - sext_i32_i64(squot32(local_tid_24663, 32) * 32 - 1));
                        
                        if (!no_carry_in_24691) {
                            if (inactive_24692) {
                                x_23134 = x_23136;
                                x_23135 = x_23137;
                            }
                        }
                        if (!no_carry_in_24691) {
                            if (!inactive_24692) {
                                bool zl_res_23138 = x_23135 < x_23137;
                                int64_t defunc_1_op_res_23139;
                                
                                if (zl_res_23138 == 1) {
                                    defunc_1_op_res_23139 = x_23134;
                                } else {
                                    defunc_1_op_res_23139 = x_23136;
                                }
                                
                                float defunc_1_op_res_23140;
                                
                                if (zl_res_23138 == 1) {
                                    defunc_1_op_res_23140 = x_23135;
                                } else {
                                    defunc_1_op_res_23140 = x_23137;
                                }
                                x_23134 = defunc_1_op_res_23139;
                                x_23135 = defunc_1_op_res_23140;
                            }
                        }
                    }
                    // write final result
                    {
                        if (!no_carry_in_24691) {
                            ((__local int64_t *) red_arr_mem_24667)[sext_i32_i64(local_tid_24663)] = x_23134;
                            ((__local float *) red_arr_mem_24669)[sext_i32_i64(local_tid_24663)] = x_23135;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_24663, 32) == 0 && ltid_in_bounds_24684) {
                        ((__local int64_t *) red_arr_mem_24667)[sext_i32_i64(local_tid_24663)] = x_23136;
                        ((__local float *) red_arr_mem_24669)[sext_i32_i64(local_tid_24663)] = x_23137;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_24674) * squot64(segred_group_sizze_23126, segment_sizze_nonzzero_24660) + sext_i32_i64(local_tid_24663), n_15983) && slt64(sext_i32_i64(local_tid_24663), squot64(segred_group_sizze_23126, segment_sizze_nonzzero_24660))) {
                int64_t tmp_24693 = ((__local int64_t *) red_arr_mem_24667)[(sext_i32_i64(local_tid_24663) + (int64_t) 1) * segment_sizze_nonzzero_24660 - (int64_t) 1];
                
                ((__global int64_t *) mem_24322)[sext_i32_i64(virt_group_id_24674) * squot64(segred_group_sizze_23126, segment_sizze_nonzzero_24660) + sext_i32_i64(local_tid_24663)] = tmp_24693;
                
                float tmp_24694 = ((__local float *) red_arr_mem_24669)[(sext_i32_i64(local_tid_24663) + (int64_t) 1) * segment_sizze_nonzzero_24660 - (int64_t) 1];
                
                ((__global float *) mem_24325)[sext_i32_i64(virt_group_id_24674) * squot64(segred_group_sizze_23126, segment_sizze_nonzzero_24660) + sext_i32_i64(local_tid_24663)] = tmp_24694;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_23126
}
__kernel void cluster_5Dzigpuseq_24517(__global int *global_failure, __global unsigned char *sigma_mem_24283, __global unsigned char *mem_24300, __global unsigned char *mem_24302, __global unsigned char *mem_24304, __global unsigned char *mem_24306, __global unsigned char *mem_24308)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24519;
    int64_t group_sizze_24522;
    int32_t wave_sizze_24521;
    int32_t group_tid_24520;
    
    local_tid_24519 = get_local_id(0);
    group_sizze_24522 = get_local_size(0);
    wave_sizze_24521 = LOCKSTEP_WIDTH;
    group_tid_24520 = get_group_id(0);
    
    int32_t global_tid_24518 = group_tid_24520 * group_sizze_24522 + local_tid_24519;
    int32_t tid_24517 = global_tid_24518;
    float from_array_res_24247 = ((__global float *) sigma_mem_24283)[(int64_t) 0];
    float from_array_res_24249 = ((__global float *) sigma_mem_24283)[(int64_t) 1];
    float from_array_res_24251 = ((__global float *) sigma_mem_24283)[(int64_t) 2];
    float from_array_res_24253 = ((__global float *) sigma_mem_24283)[(int64_t) 3];
    float from_array_res_24255 = ((__global float *) sigma_mem_24283)[(int64_t) 4];
    
    ((__global float *) mem_24300)[(int64_t) 0] = from_array_res_24247;
    ((__global float *) mem_24302)[(int64_t) 0] = from_array_res_24249;
    ((__global float *) mem_24304)[(int64_t) 0] = from_array_res_24251;
    ((__global float *) mem_24306)[(int64_t) 0] = from_array_res_24253;
    ((__global float *) mem_24308)[(int64_t) 0] = from_array_res_24255;
    
  error_0:
    return;
}
__kernel void cluster_5Dziscan_stage1_23558(__global int *global_failure, __local volatile int64_t *scan_arr_mem_24585_backing_aligned_0, int64_t n_20072, int32_t num_threads_24579, __global unsigned char *mem_24300, __global unsigned char *mem_24302, __global unsigned char *mem_24304, __global unsigned char *mem_24306, __global unsigned char *mem_24308, __global unsigned char *ext_mem_24342, __global unsigned char *ext_mem_24343, __global unsigned char *ext_mem_24344, __global unsigned char *ext_mem_24345, __global unsigned char *ext_mem_24346, __global unsigned char *mem_24350, __global unsigned char *mem_24353)
{
    #define segscan_group_sizze_23553 (cluster_5Dzisegscan_group_sizze_23552)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict scan_arr_mem_24585_backing_0 = (__local volatile unsigned char *) scan_arr_mem_24585_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24581;
    int64_t group_sizze_24584;
    int32_t wave_sizze_24583;
    int32_t group_tid_24582;
    
    local_tid_24581 = get_local_id(0);
    group_sizze_24584 = get_local_size(0);
    wave_sizze_24583 = LOCKSTEP_WIDTH;
    group_tid_24582 = get_group_id(0);
    
    int32_t global_tid_24580 = group_tid_24582 * group_sizze_24584 + local_tid_24581;
    int32_t phys_tid_23558 = global_tid_24580;
    __local unsigned char *scan_arr_mem_24585;
    
    scan_arr_mem_24585 = (__local unsigned char *) scan_arr_mem_24585_backing_0;
    
    int64_t x_21676;
    int64_t y_21677;
    
    x_21676 = (int64_t) 0;
    for (int64_t j_24587 = 0; j_24587 < sdiv_up64(n_20072, sext_i32_i64(num_threads_24579)); j_24587++) {
        int64_t chunk_offset_24588 = segscan_group_sizze_23553 * j_24587 + sext_i32_i64(group_tid_24582) * (segscan_group_sizze_23553 * sdiv_up64(n_20072, sext_i32_i64(num_threads_24579)));
        int64_t flat_idx_24589 = chunk_offset_24588 + sext_i32_i64(local_tid_24581);
        int64_t gtid_23557 = flat_idx_24589;
        
        // threads in bounds read input
        {
            if (slt64(gtid_23557, n_20072)) {
                float from_array_res_24267 = ((__global float *) mem_24300)[(int64_t) 0];
                float from_array_res_24268 = ((__global float *) mem_24302)[(int64_t) 0];
                float from_array_res_24269 = ((__global float *) mem_24304)[(int64_t) 0];
                float from_array_res_24270 = ((__global float *) mem_24306)[(int64_t) 0];
                float from_array_res_24271 = ((__global float *) mem_24308)[(int64_t) 0];
                float x_22552 = ((__global float *) ext_mem_24346)[gtid_23557];
                float x_22553 = ((__global float *) ext_mem_24345)[gtid_23557];
                float x_22554 = ((__global float *) ext_mem_24344)[gtid_23557];
                float x_22555 = ((__global float *) ext_mem_24343)[gtid_23557];
                float x_22556 = ((__global float *) ext_mem_24342)[gtid_23557];
                bool defunc_2_reduce_res_22800;
                bool redout_24237 = 1;
                
                for (int64_t i_24238 = 0; i_24238 < n_20072; i_24238++) {
                    float x_22731 = ((__global float *) ext_mem_24346)[i_24238];
                    float x_22732 = ((__global float *) ext_mem_24345)[i_24238];
                    float x_22733 = ((__global float *) ext_mem_24344)[i_24238];
                    float x_22734 = ((__global float *) ext_mem_24343)[i_24238];
                    float x_22735 = ((__global float *) ext_mem_24342)[i_24238];
                    float defunc_1_f_res_22736 = x_22552 - x_22731;
                    float defunc_1_f_res_22737 = x_22553 - x_22732;
                    float defunc_1_f_res_22738 = x_22554 - x_22733;
                    float defunc_1_f_res_22739 = x_22555 - x_22734;
                    float defunc_1_f_res_22740 = x_22556 - x_22735;
                    float defunc_1_f_res_22741 = defunc_1_f_res_22736 / from_array_res_24267;
                    float defunc_1_f_res_22742 = defunc_1_f_res_22737 / from_array_res_24268;
                    float defunc_1_f_res_22743 = defunc_1_f_res_22738 / from_array_res_24269;
                    float defunc_1_f_res_22744 = defunc_1_f_res_22739 / from_array_res_24270;
                    float defunc_1_f_res_22745 = defunc_1_f_res_22740 / from_array_res_24271;
                    float defunc_1_f_res_22746 = defunc_1_f_res_22741 * defunc_1_f_res_22741;
                    float defunc_1_f_res_22747 = defunc_1_f_res_22742 * defunc_1_f_res_22742;
                    float defunc_1_f_res_22748 = defunc_1_f_res_22743 * defunc_1_f_res_22743;
                    float defunc_1_f_res_22749 = defunc_1_f_res_22744 * defunc_1_f_res_22744;
                    float defunc_1_f_res_22750 = defunc_1_f_res_22745 * defunc_1_f_res_22745;
                    float defunc_1_f_res_22751 = defunc_1_f_res_22749 + defunc_1_f_res_22750;
                    float defunc_1_f_res_22752 = defunc_1_f_res_22747 + defunc_1_f_res_22748;
                    float defunc_1_f_res_22753 = defunc_1_f_res_22746 + defunc_1_f_res_22752;
                    float defunc_1_f_res_22754 = defunc_1_f_res_22751 + defunc_1_f_res_22753;
                    float defunc_0_g_res_22755 = futrts_sqrt32(defunc_1_f_res_22754);
                    bool zgze_res_22756 = 0.5F <= defunc_0_g_res_22755;
                    bool defunc_0_f_res_f_res_22757 = sle64(gtid_23557, i_24238);
                    bool x_22758 = !zgze_res_22756;
                    bool y_22759 = defunc_0_f_res_f_res_22757 && x_22758;
                    bool defunc_0_f_res_22760 = zgze_res_22756 || y_22759;
                    bool x_22592 = defunc_0_f_res_22760 && redout_24237;
                    bool redout_tmp_24590 = x_22592;
                    
                    redout_24237 = redout_tmp_24590;
                }
                defunc_2_reduce_res_22800 = redout_24237;
                
                bool cond_neg_22594 = !defunc_2_reduce_res_22800;
                int64_t defunc_1_lifted_lambda_res_22595 = btoi_bool_i64(cond_neg_22594);
                bool is_i_22596 = defunc_1_lifted_lambda_res_22595 == (int64_t) 0;
                bool cond_neg_22597 = !is_i_22596;
                int64_t part_res_22598 = btoi_bool_i64(cond_neg_22597);
                int64_t part_res_22599 = btoi_bool_i64(is_i_22596);
                
                // write to-scan values to parameters
                {
                    y_21677 = part_res_22599;
                }
                // write mapped values results to global memory
                {
                    ((__global int64_t *) mem_24353)[gtid_23557] = part_res_22598;
                }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!slt64(gtid_23557, n_20072)) {
                    y_21677 = (int64_t) 0;
                }
            }
            // combine with carry and write to local memory
            {
                int64_t zz_21678 = x_21676 + y_21677;
                
                ((__local int64_t *) scan_arr_mem_24585)[sext_i32_i64(local_tid_24581)] = zz_21678;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t x_24591;
            int64_t y_24592;
            int64_t x_24594;
            int64_t y_24595;
            bool ltid_in_bounds_24597 = slt64(sext_i32_i64(local_tid_24581), segscan_group_sizze_23553);
            int32_t skip_threads_24598;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_24597) {
                    y_24592 = ((volatile __local int64_t *) scan_arr_mem_24585)[sext_i32_i64(local_tid_24581)];
                    if ((local_tid_24581 - squot32(local_tid_24581, 32) * 32) == 0) {
                        x_24591 = y_24592;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_24598 = 1;
                while (slt32(skip_threads_24598, 32)) {
                    bool thread_active_24599 = sle32(skip_threads_24598, local_tid_24581 - squot32(local_tid_24581, 32) * 32) && ltid_in_bounds_24597;
                    
                    if (thread_active_24599) {
                        // read operands
                        {
                            x_24591 = ((volatile __local int64_t *) scan_arr_mem_24585)[sext_i32_i64(local_tid_24581) - sext_i32_i64(skip_threads_24598)];
                        }
                    }
                    // perform operation
                    {
                        if (thread_active_24599) {
                            int64_t zz_24593 = x_24591 + y_24592;
                            
                            x_24591 = zz_24593;
                        }
                    }
                    if (sle32(wave_sizze_24583, skip_threads_24598)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_24599) {
                        // write result
                        {
                            ((volatile __local int64_t *) scan_arr_mem_24585)[sext_i32_i64(local_tid_24581)] = x_24591;
                            y_24592 = x_24591;
                        }
                    }
                    if (sle32(wave_sizze_24583, skip_threads_24598)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_24598 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_24581 - squot32(local_tid_24581, 32) * 32) == 31 && ltid_in_bounds_24597) {
                    ((volatile __local int64_t *) scan_arr_mem_24585)[sext_i32_i64(squot32(local_tid_24581, 32))] = x_24591;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_24600;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_24581, 32) == 0 && ltid_in_bounds_24597) {
                        y_24595 = ((volatile __local int64_t *) scan_arr_mem_24585)[sext_i32_i64(local_tid_24581)];
                        if ((local_tid_24581 - squot32(local_tid_24581, 32) * 32) == 0) {
                            x_24594 = y_24595;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_24600 = 1;
                    while (slt32(skip_threads_24600, 32)) {
                        bool thread_active_24601 = sle32(skip_threads_24600, local_tid_24581 - squot32(local_tid_24581, 32) * 32) && (squot32(local_tid_24581, 32) == 0 && ltid_in_bounds_24597);
                        
                        if (thread_active_24601) {
                            // read operands
                            {
                                x_24594 = ((volatile __local int64_t *) scan_arr_mem_24585)[sext_i32_i64(local_tid_24581) - sext_i32_i64(skip_threads_24600)];
                            }
                        }
                        // perform operation
                        {
                            if (thread_active_24601) {
                                int64_t zz_24596 = x_24594 + y_24595;
                                
                                x_24594 = zz_24596;
                            }
                        }
                        if (sle32(wave_sizze_24583, skip_threads_24600)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (thread_active_24601) {
                            // write result
                            {
                                ((volatile __local int64_t *) scan_arr_mem_24585)[sext_i32_i64(local_tid_24581)] = x_24594;
                                y_24595 = x_24594;
                            }
                        }
                        if (sle32(wave_sizze_24583, skip_threads_24600)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_24600 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            bool no_carry_in_24602 = squot32(local_tid_24581, 32) == 0 || !ltid_in_bounds_24597;
            
            // carry-in for every block except the first
            {
                // read operands
                {
                    if (!no_carry_in_24602) {
                        y_24592 = x_24591;
                        x_24591 = ((__local int64_t *) scan_arr_mem_24585)[sext_i32_i64(squot32(local_tid_24581, 32)) - (int64_t) 1];
                    }
                }
                // perform operation
                {
                    if (!no_carry_in_24602) {
                        int64_t zz_24593 = x_24591 + y_24592;
                        
                        x_24591 = zz_24593;
                    }
                }
                // write final result
                {
                    if (!no_carry_in_24602) {
                        ((__local int64_t *) scan_arr_mem_24585)[sext_i32_i64(local_tid_24581)] = x_24591;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_24581, 32) == 0 && ltid_in_bounds_24597) {
                    ((__local int64_t *) scan_arr_mem_24585)[sext_i32_i64(local_tid_24581)] = y_24592;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_23557, n_20072)) {
                    int64_t tmp_24603 = ((__local int64_t *) scan_arr_mem_24585)[sext_i32_i64(local_tid_24581)];
                    
                    ((__global int64_t *) mem_24350)[gtid_23557] = tmp_24603;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_24604 = 0;
                bool should_load_carry_24605 = local_tid_24581 == 0 && !crosses_segment_24604;
                
                if (should_load_carry_24605) {
                    x_21676 = ((__local int64_t *) scan_arr_mem_24585)[segscan_group_sizze_23553 - (int64_t) 1];
                }
                if (!should_load_carry_24605) {
                    x_21676 = (int64_t) 0;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_23553
}
__kernel void cluster_5Dziscan_stage2_23558(__global int *global_failure, __local volatile int64_t *scan_arr_mem_24611_backing_aligned_0, int64_t n_20072, int64_t stage1_num_groups_24578, int32_t num_threads_24579, __global unsigned char *mem_24350)
{
    #define segscan_group_sizze_23553 (cluster_5Dzisegscan_group_sizze_23552)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict scan_arr_mem_24611_backing_0 = (__local volatile unsigned char *) scan_arr_mem_24611_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24607;
    int64_t group_sizze_24610;
    int32_t wave_sizze_24609;
    int32_t group_tid_24608;
    
    local_tid_24607 = get_local_id(0);
    group_sizze_24610 = get_local_size(0);
    wave_sizze_24609 = LOCKSTEP_WIDTH;
    group_tid_24608 = get_group_id(0);
    
    int32_t global_tid_24606 = group_tid_24608 * group_sizze_24610 + local_tid_24607;
    int32_t phys_tid_23558 = global_tid_24606;
    __local unsigned char *scan_arr_mem_24611;
    
    scan_arr_mem_24611 = (__local unsigned char *) scan_arr_mem_24611_backing_0;
    
    int64_t flat_idx_24613 = (sext_i32_i64(local_tid_24607) + (int64_t) 1) * (segscan_group_sizze_23553 * sdiv_up64(n_20072, sext_i32_i64(num_threads_24579))) - (int64_t) 1;
    int64_t gtid_23557 = flat_idx_24613;
    
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_23557, n_20072)) {
            int64_t tmp_24614 = ((__global int64_t *) mem_24350)[gtid_23557];
            
            ((__local int64_t *) scan_arr_mem_24611)[sext_i32_i64(local_tid_24607)] = tmp_24614;
        } else {
            ((__local int64_t *) scan_arr_mem_24611)[sext_i32_i64(local_tid_24607)] = (int64_t) 0;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t x_21676;
    int64_t y_21677;
    int64_t x_24615;
    int64_t y_24616;
    bool ltid_in_bounds_24618 = slt64(sext_i32_i64(local_tid_24607), stage1_num_groups_24578);
    int32_t skip_threads_24619;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_24618) {
            y_21677 = ((volatile __local int64_t *) scan_arr_mem_24611)[sext_i32_i64(local_tid_24607)];
            if ((local_tid_24607 - squot32(local_tid_24607, 32) * 32) == 0) {
                x_21676 = y_21677;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_24619 = 1;
        while (slt32(skip_threads_24619, 32)) {
            bool thread_active_24620 = sle32(skip_threads_24619, local_tid_24607 - squot32(local_tid_24607, 32) * 32) && ltid_in_bounds_24618;
            
            if (thread_active_24620) {
                // read operands
                {
                    x_21676 = ((volatile __local int64_t *) scan_arr_mem_24611)[sext_i32_i64(local_tid_24607) - sext_i32_i64(skip_threads_24619)];
                }
            }
            // perform operation
            {
                if (thread_active_24620) {
                    int64_t zz_21678 = x_21676 + y_21677;
                    
                    x_21676 = zz_21678;
                }
            }
            if (sle32(wave_sizze_24609, skip_threads_24619)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_24620) {
                // write result
                {
                    ((volatile __local int64_t *) scan_arr_mem_24611)[sext_i32_i64(local_tid_24607)] = x_21676;
                    y_21677 = x_21676;
                }
            }
            if (sle32(wave_sizze_24609, skip_threads_24619)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_24619 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_24607 - squot32(local_tid_24607, 32) * 32) == 31 && ltid_in_bounds_24618) {
            ((volatile __local int64_t *) scan_arr_mem_24611)[sext_i32_i64(squot32(local_tid_24607, 32))] = x_21676;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_24621;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_24607, 32) == 0 && ltid_in_bounds_24618) {
                y_24616 = ((volatile __local int64_t *) scan_arr_mem_24611)[sext_i32_i64(local_tid_24607)];
                if ((local_tid_24607 - squot32(local_tid_24607, 32) * 32) == 0) {
                    x_24615 = y_24616;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_24621 = 1;
            while (slt32(skip_threads_24621, 32)) {
                bool thread_active_24622 = sle32(skip_threads_24621, local_tid_24607 - squot32(local_tid_24607, 32) * 32) && (squot32(local_tid_24607, 32) == 0 && ltid_in_bounds_24618);
                
                if (thread_active_24622) {
                    // read operands
                    {
                        x_24615 = ((volatile __local int64_t *) scan_arr_mem_24611)[sext_i32_i64(local_tid_24607) - sext_i32_i64(skip_threads_24621)];
                    }
                }
                // perform operation
                {
                    if (thread_active_24622) {
                        int64_t zz_24617 = x_24615 + y_24616;
                        
                        x_24615 = zz_24617;
                    }
                }
                if (sle32(wave_sizze_24609, skip_threads_24621)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_24622) {
                    // write result
                    {
                        ((volatile __local int64_t *) scan_arr_mem_24611)[sext_i32_i64(local_tid_24607)] = x_24615;
                        y_24616 = x_24615;
                    }
                }
                if (sle32(wave_sizze_24609, skip_threads_24621)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_24621 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    bool no_carry_in_24623 = squot32(local_tid_24607, 32) == 0 || !ltid_in_bounds_24618;
    
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_24623) {
                y_21677 = x_21676;
                x_21676 = ((__local int64_t *) scan_arr_mem_24611)[sext_i32_i64(squot32(local_tid_24607, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            if (!no_carry_in_24623) {
                int64_t zz_21678 = x_21676 + y_21677;
                
                x_21676 = zz_21678;
            }
        }
        // write final result
        {
            if (!no_carry_in_24623) {
                ((__local int64_t *) scan_arr_mem_24611)[sext_i32_i64(local_tid_24607)] = x_21676;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_24607, 32) == 0 && ltid_in_bounds_24618) {
            ((__local int64_t *) scan_arr_mem_24611)[sext_i32_i64(local_tid_24607)] = y_21677;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_23557, n_20072)) {
            int64_t tmp_24624 = ((__local int64_t *) scan_arr_mem_24611)[sext_i32_i64(local_tid_24607)];
            
            ((__global int64_t *) mem_24350)[gtid_23557] = tmp_24624;
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_23553
}
__kernel void cluster_5Dziscan_stage3_23558(__global int *global_failure, int64_t n_20072, int64_t num_groups_23555, int32_t num_threads_24579, int32_t required_groups_24625, __global unsigned char *mem_24350)
{
    #define segscan_group_sizze_23553 (cluster_5Dzisegscan_group_sizze_23552)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24627;
    int64_t group_sizze_24630;
    int32_t wave_sizze_24629;
    int32_t group_tid_24628;
    
    local_tid_24627 = get_local_id(0);
    group_sizze_24630 = get_local_size(0);
    wave_sizze_24629 = LOCKSTEP_WIDTH;
    group_tid_24628 = get_group_id(0);
    
    int32_t global_tid_24626 = group_tid_24628 * group_sizze_24630 + local_tid_24627;
    int32_t phys_tid_23558 = global_tid_24626;
    int32_t phys_group_id_24631;
    
    phys_group_id_24631 = get_group_id(0);
    
    int32_t iterations_24632 = sdiv_up32(required_groups_24625 - phys_group_id_24631, sext_i64_i32(num_groups_23555));
    
    for (int32_t i_24633 = 0; i_24633 < iterations_24632; i_24633++) {
        int32_t virt_group_id_24634 = phys_group_id_24631 + i_24633 * sext_i64_i32(num_groups_23555);
        int64_t flat_idx_24635 = sext_i32_i64(virt_group_id_24634) * segscan_group_sizze_23553 + sext_i32_i64(local_tid_24627);
        int64_t gtid_23557 = flat_idx_24635;
        int64_t orig_group_24636 = squot64(flat_idx_24635, segscan_group_sizze_23553 * sdiv_up64(n_20072, sext_i32_i64(num_threads_24579)));
        int64_t carry_in_flat_idx_24637 = orig_group_24636 * (segscan_group_sizze_23553 * sdiv_up64(n_20072, sext_i32_i64(num_threads_24579))) - (int64_t) 1;
        
        if (slt64(gtid_23557, n_20072)) {
            if (!(orig_group_24636 == (int64_t) 0 || flat_idx_24635 == (orig_group_24636 + (int64_t) 1) * (segscan_group_sizze_23553 * sdiv_up64(n_20072, sext_i32_i64(num_threads_24579))) - (int64_t) 1)) {
                int64_t x_21676;
                int64_t y_21677;
                
                x_21676 = ((__global int64_t *) mem_24350)[carry_in_flat_idx_24637];
                y_21677 = ((__global int64_t *) mem_24350)[gtid_23557];
                
                int64_t zz_21678 = x_21676 + y_21677;
                
                x_21676 = zz_21678;
                ((__global int64_t *) mem_24350)[gtid_23557] = x_21676;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_23553
}
__kernel void cluster_5Dzisegmap_23445(__global int *global_failure, int64_t n_20072, __global unsigned char *data_mem_24282, __global unsigned char *mem_24300, __global unsigned char *mem_24302, __global unsigned char *mem_24304, __global unsigned char *mem_24306, __global unsigned char *mem_24308, __global unsigned char *mem_24312, __global unsigned char *mem_24315, __global unsigned char *mem_24318, __global unsigned char *mem_24321, __global unsigned char *mem_24324)
{
    #define segmap_group_sizze_23437 (cluster_5Dzisegmap_group_sizze_23331)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24557;
    int64_t group_sizze_24560;
    int32_t wave_sizze_24559;
    int32_t group_tid_24558;
    
    local_tid_24557 = get_local_id(0);
    group_sizze_24560 = get_local_size(0);
    wave_sizze_24559 = LOCKSTEP_WIDTH;
    group_tid_24558 = get_group_id(0);
    
    int32_t global_tid_24556 = group_tid_24558 * group_sizze_24560 + local_tid_24557;
    int32_t phys_tid_23445 = global_tid_24556;
    int64_t global_tid_24561 = sext_i32_i64(group_tid_24558) * segmap_group_sizze_23437 + sext_i32_i64(local_tid_24557);
    int64_t slice_24562 = n_20072;
    int64_t gtid_23444 = global_tid_24561;
    int64_t remnant_24563 = global_tid_24561 - gtid_23444;
    
    if (slt64(gtid_23444, n_20072)) {
        float from_array_res_24262 = ((__global float *) mem_24300)[(int64_t) 0];
        float from_array_res_24263 = ((__global float *) mem_24302)[(int64_t) 0];
        float from_array_res_24264 = ((__global float *) mem_24304)[(int64_t) 0];
        float from_array_res_24265 = ((__global float *) mem_24306)[(int64_t) 0];
        float from_array_res_24266 = ((__global float *) mem_24308)[(int64_t) 0];
        float x_23446 = ((__global float *) data_mem_24282)[gtid_23444 * (int64_t) 5];
        float x_23447 = ((__global float *) data_mem_24282)[gtid_23444 * (int64_t) 5 + (int64_t) 1];
        float x_23448 = ((__global float *) data_mem_24282)[gtid_23444 * (int64_t) 5 + (int64_t) 2];
        float x_23449 = ((__global float *) data_mem_24282)[gtid_23444 * (int64_t) 5 + (int64_t) 3];
        float x_23450 = ((__global float *) data_mem_24282)[gtid_23444 * (int64_t) 5 + (int64_t) 4];
        bool defunc_0_f_res_23451;
        float defunc_0_f_res_23452;
        float defunc_0_f_res_23453;
        float defunc_0_f_res_23454;
        float defunc_0_f_res_23455;
        float defunc_0_f_res_23456;
        bool loop_while_23457;
        float mean_23458;
        float mean_23459;
        float mean_23460;
        float mean_23461;
        float mean_23462;
        
        loop_while_23457 = 1;
        mean_23458 = x_23446;
        mean_23459 = x_23447;
        mean_23460 = x_23448;
        mean_23461 = x_23449;
        mean_23462 = x_23450;
        while (loop_while_23457) {
            float defunc_0_f_res_23463;
            float defunc_0_f_res_23464;
            float defunc_0_f_res_23465;
            float defunc_0_f_res_23466;
            float defunc_0_f_res_23467;
            float defunc_2_reduce_res_23468;
            float redout_24230;
            float redout_24231;
            float redout_24232;
            float redout_24233;
            float redout_24234;
            float redout_24235;
            
            redout_24230 = 0.0F;
            redout_24231 = 0.0F;
            redout_24232 = 0.0F;
            redout_24233 = 0.0F;
            redout_24234 = 0.0F;
            redout_24235 = 0.0F;
            for (int64_t i_24236 = 0; i_24236 < n_20072; i_24236++) {
                float x_23487 = ((__global float *) data_mem_24282)[i_24236 * (int64_t) 5];
                float x_23488 = ((__global float *) data_mem_24282)[i_24236 * (int64_t) 5 + (int64_t) 1];
                float x_23489 = ((__global float *) data_mem_24282)[i_24236 * (int64_t) 5 + (int64_t) 2];
                float x_23490 = ((__global float *) data_mem_24282)[i_24236 * (int64_t) 5 + (int64_t) 3];
                float x_23491 = ((__global float *) data_mem_24282)[i_24236 * (int64_t) 5 + (int64_t) 4];
                float defunc_1_f_res_23492 = mean_23458 - x_23487;
                float defunc_1_f_res_23493 = mean_23459 - x_23488;
                float defunc_1_f_res_23494 = mean_23460 - x_23489;
                float defunc_1_f_res_23495 = mean_23461 - x_23490;
                float defunc_1_f_res_23496 = mean_23462 - x_23491;
                float defunc_1_f_res_23497 = defunc_1_f_res_23492 / from_array_res_24262;
                float defunc_1_f_res_23498 = defunc_1_f_res_23493 / from_array_res_24263;
                float defunc_1_f_res_23499 = defunc_1_f_res_23494 / from_array_res_24264;
                float defunc_1_f_res_23500 = defunc_1_f_res_23495 / from_array_res_24265;
                float defunc_1_f_res_23501 = defunc_1_f_res_23496 / from_array_res_24266;
                float defunc_1_f_res_23502 = defunc_1_f_res_23497 * defunc_1_f_res_23497;
                float defunc_1_f_res_23503 = defunc_1_f_res_23498 * defunc_1_f_res_23498;
                float defunc_1_f_res_23504 = defunc_1_f_res_23499 * defunc_1_f_res_23499;
                float defunc_1_f_res_23505 = defunc_1_f_res_23500 * defunc_1_f_res_23500;
                float defunc_1_f_res_23506 = defunc_1_f_res_23501 * defunc_1_f_res_23501;
                float defunc_1_f_res_23507 = defunc_1_f_res_23505 + defunc_1_f_res_23506;
                float defunc_1_f_res_23508 = defunc_1_f_res_23503 + defunc_1_f_res_23504;
                float defunc_1_f_res_23509 = defunc_1_f_res_23502 + defunc_1_f_res_23508;
                float defunc_1_f_res_23510 = defunc_1_f_res_23507 + defunc_1_f_res_23509;
                float zt_res_23511 = 0.5F * defunc_1_f_res_23510;
                float neg_res_23512 = 0.0F - zt_res_23511;
                float exp_res_23513 = futrts_exp32(neg_res_23512);
                float zt_res_23514 = x_23487 * exp_res_23513;
                float zt_res_23515 = x_23488 * exp_res_23513;
                float zt_res_23516 = x_23489 * exp_res_23513;
                float zt_res_23517 = x_23490 * exp_res_23513;
                float zt_res_23518 = x_23491 * exp_res_23513;
                float defunc_1_f_res_23479 = zt_res_23514 + redout_24230;
                float defunc_1_f_res_23480 = zt_res_23515 + redout_24231;
                float defunc_1_f_res_23481 = zt_res_23516 + redout_24232;
                float defunc_1_f_res_23482 = zt_res_23517 + redout_24233;
                float defunc_1_f_res_23483 = zt_res_23518 + redout_24234;
                float defunc_1_op_res_23486 = exp_res_23513 + redout_24235;
                float redout_tmp_24570 = defunc_1_f_res_23479;
                float redout_tmp_24571 = defunc_1_f_res_23480;
                float redout_tmp_24572 = defunc_1_f_res_23481;
                float redout_tmp_24573 = defunc_1_f_res_23482;
                float redout_tmp_24574 = defunc_1_f_res_23483;
                float redout_tmp_24575 = defunc_1_op_res_23486;
                
                redout_24230 = redout_tmp_24570;
                redout_24231 = redout_tmp_24571;
                redout_24232 = redout_tmp_24572;
                redout_24233 = redout_tmp_24573;
                redout_24234 = redout_tmp_24574;
                redout_24235 = redout_tmp_24575;
            }
            defunc_0_f_res_23463 = redout_24230;
            defunc_0_f_res_23464 = redout_24231;
            defunc_0_f_res_23465 = redout_24232;
            defunc_0_f_res_23466 = redout_24233;
            defunc_0_f_res_23467 = redout_24234;
            defunc_2_reduce_res_23468 = redout_24235;
            
            float zs_res_23519 = 1.0F / defunc_2_reduce_res_23468;
            float zt_res_23520 = defunc_0_f_res_23463 * zs_res_23519;
            float zt_res_23521 = defunc_0_f_res_23464 * zs_res_23519;
            float zt_res_23522 = defunc_0_f_res_23465 * zs_res_23519;
            float zt_res_23523 = defunc_0_f_res_23466 * zs_res_23519;
            float zt_res_23524 = defunc_0_f_res_23467 * zs_res_23519;
            float defunc_1_f_res_23525 = zt_res_23520 - mean_23458;
            float defunc_1_f_res_23526 = zt_res_23521 - mean_23459;
            float defunc_1_f_res_23527 = zt_res_23522 - mean_23460;
            float defunc_1_f_res_23528 = zt_res_23523 - mean_23461;
            float defunc_1_f_res_23529 = zt_res_23524 - mean_23462;
            float defunc_1_f_res_23530 = defunc_1_f_res_23525 / from_array_res_24262;
            float defunc_1_f_res_23531 = defunc_1_f_res_23526 / from_array_res_24263;
            float defunc_1_f_res_23532 = defunc_1_f_res_23527 / from_array_res_24264;
            float defunc_1_f_res_23533 = defunc_1_f_res_23528 / from_array_res_24265;
            float defunc_1_f_res_23534 = defunc_1_f_res_23529 / from_array_res_24266;
            float defunc_1_f_res_23535 = defunc_1_f_res_23530 * defunc_1_f_res_23530;
            float defunc_1_f_res_23536 = defunc_1_f_res_23531 * defunc_1_f_res_23531;
            float defunc_1_f_res_23537 = defunc_1_f_res_23532 * defunc_1_f_res_23532;
            float defunc_1_f_res_23538 = defunc_1_f_res_23533 * defunc_1_f_res_23533;
            float defunc_1_f_res_23539 = defunc_1_f_res_23534 * defunc_1_f_res_23534;
            float defunc_1_f_res_23540 = defunc_1_f_res_23538 + defunc_1_f_res_23539;
            float defunc_1_f_res_23541 = defunc_1_f_res_23536 + defunc_1_f_res_23537;
            float defunc_1_f_res_23542 = defunc_1_f_res_23535 + defunc_1_f_res_23541;
            float defunc_1_f_res_23543 = defunc_1_f_res_23540 + defunc_1_f_res_23542;
            float defunc_0_g_res_23544 = futrts_sqrt32(defunc_1_f_res_23543);
            bool zg_res_23545 = 1.0e-2F < defunc_0_g_res_23544;
            bool loop_while_tmp_24564 = zg_res_23545;
            float mean_tmp_24565 = zt_res_23520;
            float mean_tmp_24566 = zt_res_23521;
            float mean_tmp_24567 = zt_res_23522;
            float mean_tmp_24568 = zt_res_23523;
            float mean_tmp_24569 = zt_res_23524;
            
            loop_while_23457 = loop_while_tmp_24564;
            mean_23458 = mean_tmp_24565;
            mean_23459 = mean_tmp_24566;
            mean_23460 = mean_tmp_24567;
            mean_23461 = mean_tmp_24568;
            mean_23462 = mean_tmp_24569;
        }
        defunc_0_f_res_23451 = loop_while_23457;
        defunc_0_f_res_23452 = mean_23458;
        defunc_0_f_res_23453 = mean_23459;
        defunc_0_f_res_23454 = mean_23460;
        defunc_0_f_res_23455 = mean_23461;
        defunc_0_f_res_23456 = mean_23462;
        ((__global float *) mem_24312)[gtid_23444] = defunc_0_f_res_23452;
        ((__global float *) mem_24315)[gtid_23444] = defunc_0_f_res_23453;
        ((__global float *) mem_24318)[gtid_23444] = defunc_0_f_res_23454;
        ((__global float *) mem_24321)[gtid_23444] = defunc_0_f_res_23455;
        ((__global float *) mem_24324)[gtid_23444] = defunc_0_f_res_23456;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_23437
}
__kernel void cluster_5Dzisegmap_23560(__global int *global_failure, int64_t n_20072, __global unsigned char *mem_24286, __global unsigned char *mem_24289, __global unsigned char *mem_24292, __global unsigned char *mem_24295, __global unsigned char *mem_24298, __global unsigned char *ext_mem_24342, __global unsigned char *ext_mem_24343, __global unsigned char *ext_mem_24344, __global unsigned char *ext_mem_24345, __global unsigned char *ext_mem_24346, __global unsigned char *mem_24350, __global unsigned char *mem_24353)
{
    #define segmap_group_sizze_23563 (cluster_5Dzisegmap_group_sizze_23562)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24640;
    int64_t group_sizze_24643;
    int32_t wave_sizze_24642;
    int32_t group_tid_24641;
    
    local_tid_24640 = get_local_id(0);
    group_sizze_24643 = get_local_size(0);
    wave_sizze_24642 = LOCKSTEP_WIDTH;
    group_tid_24641 = get_group_id(0);
    
    int32_t global_tid_24639 = group_tid_24641 * group_sizze_24643 + local_tid_24640;
    int32_t phys_tid_23560 = global_tid_24639;
    int64_t global_tid_24644 = sext_i32_i64(group_tid_24641) * segmap_group_sizze_23563 + sext_i32_i64(local_tid_24640);
    int64_t slice_24645 = n_20072;
    int64_t write_i_23559 = global_tid_24644;
    int64_t remnant_24646 = global_tid_24644 - write_i_23559;
    
    if (slt64(write_i_23559, n_20072)) {
        int64_t c_21696 = ((__global int64_t *) mem_24353)[write_i_23559];
        int64_t offset_21697 = ((__global int64_t *) mem_24350)[write_i_23559];
        float v_21699 = ((__global float *) ext_mem_24346)[write_i_23559];
        float v_21700 = ((__global float *) ext_mem_24345)[write_i_23559];
        float v_21701 = ((__global float *) ext_mem_24344)[write_i_23559];
        float v_21702 = ((__global float *) ext_mem_24343)[write_i_23559];
        float v_21703 = ((__global float *) ext_mem_24342)[write_i_23559];
        bool is_this_one_21704 = c_21696 == (int64_t) 0;
        int64_t this_offset_21705 = (int64_t) -1 + offset_21697;
        int64_t total_res_21706;
        
        if (is_this_one_21704 == 1) {
            total_res_21706 = this_offset_21705;
        } else {
            total_res_21706 = (int64_t) -1;
        }
        if (sle64((int64_t) 0, total_res_21706) && slt64(total_res_21706, n_20072)) {
            ((__global float *) mem_24286)[total_res_21706] = v_21699;
        }
        if (sle64((int64_t) 0, total_res_21706) && slt64(total_res_21706, n_20072)) {
            ((__global float *) mem_24289)[total_res_21706] = v_21700;
        }
        if (sle64((int64_t) 0, total_res_21706) && slt64(total_res_21706, n_20072)) {
            ((__global float *) mem_24292)[total_res_21706] = v_21701;
        }
        if (sle64((int64_t) 0, total_res_21706) && slt64(total_res_21706, n_20072)) {
            ((__global float *) mem_24295)[total_res_21706] = v_21702;
        }
        if (sle64((int64_t) 0, total_res_21706) && slt64(total_res_21706, n_20072)) {
            ((__global float *) mem_24298)[total_res_21706] = v_21703;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_23563
}
__kernel void cluster_5Dzisegmap_23784(__global int *global_failure, int64_t partition_sizze_21685, int64_t num_groups_23780, int32_t virt_num_groups_24765, __global unsigned char *mem_24286, __global unsigned char *mem_24289, __global unsigned char *mem_24292, __global unsigned char *mem_24295, __global unsigned char *mem_24298, __global unsigned char *mem_24440)
{
    #define segmap_group_sizze_23779 (cluster_5Dzisegmap_group_sizze_23765)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24767;
    int64_t group_sizze_24770;
    int32_t wave_sizze_24769;
    int32_t group_tid_24768;
    
    local_tid_24767 = get_local_id(0);
    group_sizze_24770 = get_local_size(0);
    wave_sizze_24769 = LOCKSTEP_WIDTH;
    group_tid_24768 = get_group_id(0);
    
    int32_t global_tid_24766 = group_tid_24768 * group_sizze_24770 + local_tid_24767;
    int32_t phys_tid_23784 = global_tid_24766;
    int32_t phys_group_id_24771;
    
    phys_group_id_24771 = get_group_id(0);
    
    int32_t iterations_24772 = sdiv_up32(virt_num_groups_24765 - phys_group_id_24771, sext_i64_i32(num_groups_23780));
    
    for (int32_t i_24773 = 0; i_24773 < iterations_24772; i_24773++) {
        int32_t virt_group_id_24774 = phys_group_id_24771 + i_24773 * sext_i64_i32(num_groups_23780);
        int64_t global_tid_24775 = sext_i32_i64(virt_group_id_24774) * segmap_group_sizze_23779 + sext_i32_i64(local_tid_24767);
        int64_t slice_24776 = partition_sizze_21685;
        int64_t gtid_23783 = global_tid_24775;
        int64_t remnant_24777 = global_tid_24775 - gtid_23783;
        
        if (slt64(gtid_23783, partition_sizze_21685)) {
            float x_23785 = ((__global float *) mem_24286)[gtid_23783];
            float x_23786 = ((__global float *) mem_24289)[gtid_23783];
            float x_23787 = ((__global float *) mem_24292)[gtid_23783];
            float x_23788 = ((__global float *) mem_24295)[gtid_23783];
            float x_23789 = ((__global float *) mem_24298)[gtid_23783];
            float mem_24437[(int64_t) 5];
            
            mem_24437[(int64_t) 0] = x_23785;
            mem_24437[(int64_t) 1] = x_23786;
            mem_24437[(int64_t) 2] = x_23787;
            mem_24437[(int64_t) 3] = x_23788;
            mem_24437[(int64_t) 4] = x_23789;
            for (int64_t i_24778 = 0; i_24778 < (int64_t) 5; i_24778++) {
                float tmp_24779 = mem_24437[i_24778];
                
                ((__global float *) mem_24440)[gtid_23783 + i_24778 * partition_sizze_21685] = tmp_24779;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_23779
}
__kernel void cluster_5Dzisegmap_intragroup_23225(__global int *global_failure, __local volatile int64_t *red_arr_mem_24551_backing_aligned_0, __local volatile int64_t *red_arr_mem_24549_backing_aligned_1, __local volatile int64_t *red_arr_mem_24547_backing_aligned_2, __local volatile int64_t *red_arr_mem_24545_backing_aligned_3, __local volatile int64_t *red_arr_mem_24543_backing_aligned_4, __local volatile int64_t *red_arr_mem_24541_backing_aligned_5, int64_t n_20072, __global unsigned char *data_mem_24282, __global unsigned char *mem_24300, __global unsigned char *mem_24302, __global unsigned char *mem_24304, __global unsigned char *mem_24306, __global unsigned char *mem_24308, __global unsigned char *mem_24329, __global unsigned char *mem_24332, __global unsigned char *mem_24335, __global unsigned char *mem_24338, __global unsigned char *mem_24341)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict red_arr_mem_24551_backing_5 = (__local volatile unsigned char *) red_arr_mem_24551_backing_aligned_0;
    __local volatile unsigned char *restrict red_arr_mem_24549_backing_4 = (__local volatile unsigned char *) red_arr_mem_24549_backing_aligned_1;
    __local volatile unsigned char *restrict red_arr_mem_24547_backing_3 = (__local volatile unsigned char *) red_arr_mem_24547_backing_aligned_2;
    __local volatile unsigned char *restrict red_arr_mem_24545_backing_2 = (__local volatile unsigned char *) red_arr_mem_24545_backing_aligned_3;
    __local volatile unsigned char *restrict red_arr_mem_24543_backing_1 = (__local volatile unsigned char *) red_arr_mem_24543_backing_aligned_4;
    __local volatile unsigned char *restrict red_arr_mem_24541_backing_0 = (__local volatile unsigned char *) red_arr_mem_24541_backing_aligned_5;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24526;
    int64_t group_sizze_24529;
    int32_t wave_sizze_24528;
    int32_t group_tid_24527;
    
    local_tid_24526 = get_local_id(0);
    group_sizze_24529 = get_local_size(0);
    wave_sizze_24528 = LOCKSTEP_WIDTH;
    group_tid_24527 = get_group_id(0);
    
    int32_t global_tid_24525 = group_tid_24527 * group_sizze_24529 + local_tid_24526;
    int32_t phys_tid_23225 = group_tid_24527;
    int64_t slice_24531 = n_20072;
    int64_t ltid_pre_24530 = sext_i32_i64(local_tid_24526);
    int64_t remnant_24532 = sext_i32_i64(local_tid_24526) - ltid_pre_24530;
    int64_t slice_24533 = n_20072;
    int64_t gtid_23224 = sext_i32_i64(group_tid_24527);
    int64_t remnant_24534 = sext_i32_i64(group_tid_24527) - gtid_23224;
    float from_array_res_24257 = ((__global float *) mem_24300)[(int64_t) 0];
    float from_array_res_24258 = ((__global float *) mem_24302)[(int64_t) 0];
    float from_array_res_24259 = ((__global float *) mem_24304)[(int64_t) 0];
    float from_array_res_24260 = ((__global float *) mem_24306)[(int64_t) 0];
    float from_array_res_24261 = ((__global float *) mem_24308)[(int64_t) 0];
    float x_23226 = ((__global float *) data_mem_24282)[gtid_23224 * (int64_t) 5];
    float x_23227 = ((__global float *) data_mem_24282)[gtid_23224 * (int64_t) 5 + (int64_t) 1];
    float x_23228 = ((__global float *) data_mem_24282)[gtid_23224 * (int64_t) 5 + (int64_t) 2];
    float x_23229 = ((__global float *) data_mem_24282)[gtid_23224 * (int64_t) 5 + (int64_t) 3];
    float x_23230 = ((__global float *) data_mem_24282)[gtid_23224 * (int64_t) 5 + (int64_t) 4];
    bool defunc_0_f_res_23231;
    float defunc_0_f_res_23232;
    float defunc_0_f_res_23233;
    float defunc_0_f_res_23234;
    float defunc_0_f_res_23235;
    float defunc_0_f_res_23236;
    bool loop_while_23237;
    float mean_23238;
    float mean_23239;
    float mean_23240;
    float mean_23241;
    float mean_23242;
    
    loop_while_23237 = 1;
    mean_23238 = x_23226;
    mean_23239 = x_23227;
    mean_23240 = x_23228;
    mean_23241 = x_23229;
    mean_23242 = x_23230;
    while (loop_while_23237) {
        float defunc_0_f_res_23243;
        float defunc_0_f_res_23244;
        float defunc_0_f_res_23245;
        float defunc_0_f_res_23246;
        float defunc_0_f_res_23247;
        float defunc_2_reduce_res_23248;
        int32_t phys_tid_23250 = local_tid_24526;
        __local unsigned char *red_arr_mem_24541;
        
        red_arr_mem_24541 = (__local unsigned char *) red_arr_mem_24541_backing_0;
        
        __local unsigned char *red_arr_mem_24543;
        
        red_arr_mem_24543 = (__local unsigned char *) red_arr_mem_24543_backing_1;
        
        __local unsigned char *red_arr_mem_24545;
        
        red_arr_mem_24545 = (__local unsigned char *) red_arr_mem_24545_backing_2;
        
        __local unsigned char *red_arr_mem_24547;
        
        red_arr_mem_24547 = (__local unsigned char *) red_arr_mem_24547_backing_3;
        
        __local unsigned char *red_arr_mem_24549;
        
        red_arr_mem_24549 = (__local unsigned char *) red_arr_mem_24549_backing_4;
        
        __local unsigned char *red_arr_mem_24551;
        
        red_arr_mem_24551 = (__local unsigned char *) red_arr_mem_24551_backing_5;
        
        int64_t gtid_23249 = sext_i32_i64(sext_i64_i32(ltid_pre_24530));
        float x_23269 = ((__global float *) data_mem_24282)[gtid_23249 * (int64_t) 5];
        float x_23270 = ((__global float *) data_mem_24282)[gtid_23249 * (int64_t) 5 + (int64_t) 1];
        float x_23271 = ((__global float *) data_mem_24282)[gtid_23249 * (int64_t) 5 + (int64_t) 2];
        float x_23272 = ((__global float *) data_mem_24282)[gtid_23249 * (int64_t) 5 + (int64_t) 3];
        float x_23273 = ((__global float *) data_mem_24282)[gtid_23249 * (int64_t) 5 + (int64_t) 4];
        float defunc_1_f_res_23274 = mean_23238 - x_23269;
        float defunc_1_f_res_23275 = mean_23239 - x_23270;
        float defunc_1_f_res_23276 = mean_23240 - x_23271;
        float defunc_1_f_res_23277 = mean_23241 - x_23272;
        float defunc_1_f_res_23278 = mean_23242 - x_23273;
        float defunc_1_f_res_23279 = defunc_1_f_res_23274 / from_array_res_24257;
        float defunc_1_f_res_23280 = defunc_1_f_res_23275 / from_array_res_24258;
        float defunc_1_f_res_23281 = defunc_1_f_res_23276 / from_array_res_24259;
        float defunc_1_f_res_23282 = defunc_1_f_res_23277 / from_array_res_24260;
        float defunc_1_f_res_23283 = defunc_1_f_res_23278 / from_array_res_24261;
        float defunc_1_f_res_23284 = defunc_1_f_res_23279 * defunc_1_f_res_23279;
        float defunc_1_f_res_23285 = defunc_1_f_res_23280 * defunc_1_f_res_23280;
        float defunc_1_f_res_23286 = defunc_1_f_res_23281 * defunc_1_f_res_23281;
        float defunc_1_f_res_23287 = defunc_1_f_res_23282 * defunc_1_f_res_23282;
        float defunc_1_f_res_23288 = defunc_1_f_res_23283 * defunc_1_f_res_23283;
        float defunc_1_f_res_23289 = defunc_1_f_res_23287 + defunc_1_f_res_23288;
        float defunc_1_f_res_23290 = defunc_1_f_res_23285 + defunc_1_f_res_23286;
        float defunc_1_f_res_23291 = defunc_1_f_res_23284 + defunc_1_f_res_23290;
        float defunc_1_f_res_23292 = defunc_1_f_res_23289 + defunc_1_f_res_23291;
        float zt_res_23293 = 0.5F * defunc_1_f_res_23292;
        float neg_res_23294 = 0.0F - zt_res_23293;
        float exp_res_23295 = futrts_exp32(neg_res_23294);
        float zt_res_23296 = x_23269 * exp_res_23295;
        float zt_res_23297 = x_23270 * exp_res_23295;
        float zt_res_23298 = x_23271 * exp_res_23295;
        float zt_res_23299 = x_23272 * exp_res_23295;
        float zt_res_23300 = x_23273 * exp_res_23295;
        
        ((__local float *) red_arr_mem_24541)[gtid_23249] = zt_res_23296;
        ((__local float *) red_arr_mem_24543)[gtid_23249] = zt_res_23297;
        ((__local float *) red_arr_mem_24545)[gtid_23249] = zt_res_23298;
        ((__local float *) red_arr_mem_24547)[gtid_23249] = zt_res_23299;
        ((__local float *) red_arr_mem_24549)[gtid_23249] = zt_res_23300;
        ((__local float *) red_arr_mem_24551)[gtid_23249] = exp_res_23295;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_24553;
        int32_t skip_waves_24554 = 1;
        float x_23251;
        float x_23252;
        float x_23253;
        float x_23254;
        float x_23255;
        float x_23256;
        float x_23257;
        float x_23258;
        float x_23259;
        float x_23260;
        float x_23261;
        float x_23262;
        
        offset_24553 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_24526, sext_i64_i32(n_20072))) {
                x_23251 = ((__local float *) red_arr_mem_24541)[sext_i32_i64(local_tid_24526 + offset_24553)];
                x_23252 = ((__local float *) red_arr_mem_24543)[sext_i32_i64(local_tid_24526 + offset_24553)];
                x_23253 = ((__local float *) red_arr_mem_24545)[sext_i32_i64(local_tid_24526 + offset_24553)];
                x_23254 = ((__local float *) red_arr_mem_24547)[sext_i32_i64(local_tid_24526 + offset_24553)];
                x_23255 = ((__local float *) red_arr_mem_24549)[sext_i32_i64(local_tid_24526 + offset_24553)];
                x_23256 = ((__local float *) red_arr_mem_24551)[sext_i32_i64(local_tid_24526 + offset_24553)];
            }
        }
        offset_24553 = 1;
        while (slt32(offset_24553, wave_sizze_24528)) {
            if (slt32(local_tid_24526 + offset_24553, sext_i64_i32(n_20072)) && ((local_tid_24526 - squot32(local_tid_24526, wave_sizze_24528) * wave_sizze_24528) & (2 * offset_24553 - 1)) == 0) {
                // read array element
                {
                    x_23257 = ((volatile __local float *) red_arr_mem_24541)[sext_i32_i64(local_tid_24526 + offset_24553)];
                    x_23258 = ((volatile __local float *) red_arr_mem_24543)[sext_i32_i64(local_tid_24526 + offset_24553)];
                    x_23259 = ((volatile __local float *) red_arr_mem_24545)[sext_i32_i64(local_tid_24526 + offset_24553)];
                    x_23260 = ((volatile __local float *) red_arr_mem_24547)[sext_i32_i64(local_tid_24526 + offset_24553)];
                    x_23261 = ((volatile __local float *) red_arr_mem_24549)[sext_i32_i64(local_tid_24526 + offset_24553)];
                    x_23262 = ((volatile __local float *) red_arr_mem_24551)[sext_i32_i64(local_tid_24526 + offset_24553)];
                }
                // apply reduction operation
                {
                    float defunc_1_f_res_23263 = x_23251 + x_23257;
                    float defunc_1_f_res_23264 = x_23252 + x_23258;
                    float defunc_1_f_res_23265 = x_23253 + x_23259;
                    float defunc_1_f_res_23266 = x_23254 + x_23260;
                    float defunc_1_f_res_23267 = x_23255 + x_23261;
                    float defunc_1_op_res_23268 = x_23256 + x_23262;
                    
                    x_23251 = defunc_1_f_res_23263;
                    x_23252 = defunc_1_f_res_23264;
                    x_23253 = defunc_1_f_res_23265;
                    x_23254 = defunc_1_f_res_23266;
                    x_23255 = defunc_1_f_res_23267;
                    x_23256 = defunc_1_op_res_23268;
                }
                // write result of operation
                {
                    ((volatile __local float *) red_arr_mem_24541)[sext_i32_i64(local_tid_24526)] = x_23251;
                    ((volatile __local float *) red_arr_mem_24543)[sext_i32_i64(local_tid_24526)] = x_23252;
                    ((volatile __local float *) red_arr_mem_24545)[sext_i32_i64(local_tid_24526)] = x_23253;
                    ((volatile __local float *) red_arr_mem_24547)[sext_i32_i64(local_tid_24526)] = x_23254;
                    ((volatile __local float *) red_arr_mem_24549)[sext_i32_i64(local_tid_24526)] = x_23255;
                    ((volatile __local float *) red_arr_mem_24551)[sext_i32_i64(local_tid_24526)] = x_23256;
                }
            }
            offset_24553 *= 2;
        }
        while (slt32(skip_waves_24554, squot32(sext_i64_i32(n_20072) + wave_sizze_24528 - 1, wave_sizze_24528))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_24553 = skip_waves_24554 * wave_sizze_24528;
            if (slt32(local_tid_24526 + offset_24553, sext_i64_i32(n_20072)) && ((local_tid_24526 - squot32(local_tid_24526, wave_sizze_24528) * wave_sizze_24528) == 0 && (squot32(local_tid_24526, wave_sizze_24528) & (2 * skip_waves_24554 - 1)) == 0)) {
                // read array element
                {
                    x_23257 = ((__local float *) red_arr_mem_24541)[sext_i32_i64(local_tid_24526 + offset_24553)];
                    x_23258 = ((__local float *) red_arr_mem_24543)[sext_i32_i64(local_tid_24526 + offset_24553)];
                    x_23259 = ((__local float *) red_arr_mem_24545)[sext_i32_i64(local_tid_24526 + offset_24553)];
                    x_23260 = ((__local float *) red_arr_mem_24547)[sext_i32_i64(local_tid_24526 + offset_24553)];
                    x_23261 = ((__local float *) red_arr_mem_24549)[sext_i32_i64(local_tid_24526 + offset_24553)];
                    x_23262 = ((__local float *) red_arr_mem_24551)[sext_i32_i64(local_tid_24526 + offset_24553)];
                }
                // apply reduction operation
                {
                    float defunc_1_f_res_23263 = x_23251 + x_23257;
                    float defunc_1_f_res_23264 = x_23252 + x_23258;
                    float defunc_1_f_res_23265 = x_23253 + x_23259;
                    float defunc_1_f_res_23266 = x_23254 + x_23260;
                    float defunc_1_f_res_23267 = x_23255 + x_23261;
                    float defunc_1_op_res_23268 = x_23256 + x_23262;
                    
                    x_23251 = defunc_1_f_res_23263;
                    x_23252 = defunc_1_f_res_23264;
                    x_23253 = defunc_1_f_res_23265;
                    x_23254 = defunc_1_f_res_23266;
                    x_23255 = defunc_1_f_res_23267;
                    x_23256 = defunc_1_op_res_23268;
                }
                // write result of operation
                {
                    ((__local float *) red_arr_mem_24541)[sext_i32_i64(local_tid_24526)] = x_23251;
                    ((__local float *) red_arr_mem_24543)[sext_i32_i64(local_tid_24526)] = x_23252;
                    ((__local float *) red_arr_mem_24545)[sext_i32_i64(local_tid_24526)] = x_23253;
                    ((__local float *) red_arr_mem_24547)[sext_i32_i64(local_tid_24526)] = x_23254;
                    ((__local float *) red_arr_mem_24549)[sext_i32_i64(local_tid_24526)] = x_23255;
                    ((__local float *) red_arr_mem_24551)[sext_i32_i64(local_tid_24526)] = x_23256;
                }
            }
            skip_waves_24554 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        defunc_0_f_res_23243 = ((__local float *) red_arr_mem_24541)[(int64_t) 0];
        defunc_0_f_res_23244 = ((__local float *) red_arr_mem_24543)[(int64_t) 0];
        defunc_0_f_res_23245 = ((__local float *) red_arr_mem_24545)[(int64_t) 0];
        defunc_0_f_res_23246 = ((__local float *) red_arr_mem_24547)[(int64_t) 0];
        defunc_0_f_res_23247 = ((__local float *) red_arr_mem_24549)[(int64_t) 0];
        defunc_2_reduce_res_23248 = ((__local float *) red_arr_mem_24551)[(int64_t) 0];
        
        float zs_res_23301 = 1.0F / defunc_2_reduce_res_23248;
        float zt_res_23302 = defunc_0_f_res_23243 * zs_res_23301;
        float zt_res_23303 = defunc_0_f_res_23244 * zs_res_23301;
        float zt_res_23304 = defunc_0_f_res_23245 * zs_res_23301;
        float zt_res_23305 = defunc_0_f_res_23246 * zs_res_23301;
        float zt_res_23306 = defunc_0_f_res_23247 * zs_res_23301;
        float defunc_1_f_res_23307 = zt_res_23302 - mean_23238;
        float defunc_1_f_res_23308 = zt_res_23303 - mean_23239;
        float defunc_1_f_res_23309 = zt_res_23304 - mean_23240;
        float defunc_1_f_res_23310 = zt_res_23305 - mean_23241;
        float defunc_1_f_res_23311 = zt_res_23306 - mean_23242;
        float defunc_1_f_res_23312 = defunc_1_f_res_23307 / from_array_res_24257;
        float defunc_1_f_res_23313 = defunc_1_f_res_23308 / from_array_res_24258;
        float defunc_1_f_res_23314 = defunc_1_f_res_23309 / from_array_res_24259;
        float defunc_1_f_res_23315 = defunc_1_f_res_23310 / from_array_res_24260;
        float defunc_1_f_res_23316 = defunc_1_f_res_23311 / from_array_res_24261;
        float defunc_1_f_res_23317 = defunc_1_f_res_23312 * defunc_1_f_res_23312;
        float defunc_1_f_res_23318 = defunc_1_f_res_23313 * defunc_1_f_res_23313;
        float defunc_1_f_res_23319 = defunc_1_f_res_23314 * defunc_1_f_res_23314;
        float defunc_1_f_res_23320 = defunc_1_f_res_23315 * defunc_1_f_res_23315;
        float defunc_1_f_res_23321 = defunc_1_f_res_23316 * defunc_1_f_res_23316;
        float defunc_1_f_res_23322 = defunc_1_f_res_23320 + defunc_1_f_res_23321;
        float defunc_1_f_res_23323 = defunc_1_f_res_23318 + defunc_1_f_res_23319;
        float defunc_1_f_res_23324 = defunc_1_f_res_23317 + defunc_1_f_res_23323;
        float defunc_1_f_res_23325 = defunc_1_f_res_23322 + defunc_1_f_res_23324;
        float defunc_0_g_res_23326 = futrts_sqrt32(defunc_1_f_res_23325);
        bool zg_res_23327 = 1.0e-2F < defunc_0_g_res_23326;
        bool loop_while_tmp_24535 = zg_res_23327;
        float mean_tmp_24536 = zt_res_23302;
        float mean_tmp_24537 = zt_res_23303;
        float mean_tmp_24538 = zt_res_23304;
        float mean_tmp_24539 = zt_res_23305;
        float mean_tmp_24540 = zt_res_23306;
        
        loop_while_23237 = loop_while_tmp_24535;
        mean_23238 = mean_tmp_24536;
        mean_23239 = mean_tmp_24537;
        mean_23240 = mean_tmp_24538;
        mean_23241 = mean_tmp_24539;
        mean_23242 = mean_tmp_24540;
    }
    defunc_0_f_res_23231 = loop_while_23237;
    defunc_0_f_res_23232 = mean_23238;
    defunc_0_f_res_23233 = mean_23239;
    defunc_0_f_res_23234 = mean_23240;
    defunc_0_f_res_23235 = mean_23241;
    defunc_0_f_res_23236 = mean_23242;
    if (local_tid_24526 == 0) {
        ((__global float *) mem_24329)[gtid_23224] = defunc_0_f_res_23232;
    }
    if (local_tid_24526 == 0) {
        ((__global float *) mem_24332)[gtid_23224] = defunc_0_f_res_23233;
    }
    if (local_tid_24526 == 0) {
        ((__global float *) mem_24335)[gtid_23224] = defunc_0_f_res_23234;
    }
    if (local_tid_24526 == 0) {
        ((__global float *) mem_24338)[gtid_23224] = defunc_0_f_res_23235;
    }
    if (local_tid_24526 == 0) {
        ((__global float *) mem_24341)[gtid_23224] = defunc_0_f_res_23236;
    }
    
  error_2:
    return;
}
__kernel void cluster_5Dzisegmap_intragroup_23798(__global int *global_failure, __local volatile int64_t *color_24498_backing_aligned_0, __local volatile int64_t *color_24497_backing_aligned_1, __local volatile int64_t *color_24496_backing_aligned_2, __local volatile int64_t *color_24495_backing_aligned_3, __local volatile int64_t *color_24494_backing_aligned_4, __local volatile int64_t *color_24493_backing_aligned_5, int64_t n_20072, int64_t partition_sizze_21685, int64_t segmap_usable_groups_23617, int64_t num_whole_tiles_23836, int64_t residual_input_24086, unsigned char cond_24087_bits, int64_t binop_x_24112, __global unsigned char *data_mem_24282, __global unsigned char *mem_24286, __global unsigned char *mem_24289, __global unsigned char *mem_24292, __global unsigned char *mem_24295, __global unsigned char *mem_24298, __global unsigned char *mem_24300, __global unsigned char *mem_24302, __global unsigned char *mem_24304, __global unsigned char *mem_24306, __global unsigned char *mem_24308, __global unsigned char *mem_24434)
{
    bool cond_24087 = cond_24087_bits;
    
    #define segmap_group_sizze_23616 (cluster_5Dzisegmap_group_sizze_23570)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict color_24498_backing_5 = (__local volatile unsigned char *) color_24498_backing_aligned_0;
    __local volatile unsigned char *restrict color_24497_backing_4 = (__local volatile unsigned char *) color_24497_backing_aligned_1;
    __local volatile unsigned char *restrict color_24496_backing_3 = (__local volatile unsigned char *) color_24496_backing_aligned_2;
    __local volatile unsigned char *restrict color_24495_backing_2 = (__local volatile unsigned char *) color_24495_backing_aligned_3;
    __local volatile unsigned char *restrict color_24494_backing_1 = (__local volatile unsigned char *) color_24494_backing_aligned_4;
    __local volatile unsigned char *restrict color_24493_backing_0 = (__local volatile unsigned char *) color_24493_backing_aligned_5;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24651;
    int64_t group_sizze_24654;
    int32_t wave_sizze_24653;
    int32_t group_tid_24652;
    
    local_tid_24651 = get_local_id(0);
    group_sizze_24654 = get_local_size(0);
    wave_sizze_24653 = LOCKSTEP_WIDTH;
    group_tid_24652 = get_group_id(0);
    
    int32_t global_tid_24650 = group_tid_24652 * group_sizze_24654 + local_tid_24651;
    int32_t gid_flat_23798 = group_tid_24652;
    int64_t slice_24656 = segmap_group_sizze_23616;
    int64_t ltid_pre_24655 = sext_i32_i64(local_tid_24651);
    int64_t remnant_24657 = sext_i32_i64(local_tid_24651) - ltid_pre_24655;
    int64_t slice_24658 = segmap_usable_groups_23617;
    int64_t gid_23797 = sext_i32_i64(group_tid_24652);
    int64_t remnant_24659 = sext_i32_i64(group_tid_24652) - gid_23797;
    __local unsigned char *color_24493;
    
    color_24493 = (__local unsigned char *) color_24493_backing_0;
    
    __local unsigned char *color_24494;
    
    color_24494 = (__local unsigned char *) color_24494_backing_1;
    
    __local unsigned char *color_24495;
    
    color_24495 = (__local unsigned char *) color_24495_backing_2;
    
    __local unsigned char *color_24496;
    
    color_24496 = (__local unsigned char *) color_24496_backing_3;
    
    __local unsigned char *color_24497;
    
    color_24497 = (__local unsigned char *) color_24497_backing_4;
    
    __local unsigned char *color_24498;
    
    color_24498 = (__local unsigned char *) color_24498_backing_5;
    
    float from_array_res_24272 = ((__global float *) mem_24300)[(int64_t) 0];
    float from_array_res_24273 = ((__global float *) mem_24302)[(int64_t) 0];
    float from_array_res_24274 = ((__global float *) mem_24304)[(int64_t) 0];
    float from_array_res_24275 = ((__global float *) mem_24306)[(int64_t) 0];
    float from_array_res_24276 = ((__global float *) mem_24308)[(int64_t) 0];
    int64_t binop_x_23813 = segmap_group_sizze_23616 * gid_23797;
    float mem_24365[1];
    float mem_24367[1];
    float mem_24369[1];
    float mem_24371[1];
    float mem_24373[1];
    int32_t ltid_flat_23800 = local_tid_24651;
    int64_t ltid_23799 = sext_i32_i64(sext_i64_i32(ltid_pre_24655));
    int64_t gtid_23814 = ltid_23799 + binop_x_23813;
    bool cond_23815 = slt64(gtid_23814, n_20072);
    float pre_23816;
    float pre_23817;
    float pre_23818;
    float pre_23819;
    float pre_23820;
    
    if (cond_23815 == 1) {
        float x_23821 = ((__global float *) data_mem_24282)[gtid_23814 * (int64_t) 5];
        float x_23822 = ((__global float *) data_mem_24282)[gtid_23814 * (int64_t) 5 + (int64_t) 1];
        float x_23823 = ((__global float *) data_mem_24282)[gtid_23814 * (int64_t) 5 + (int64_t) 2];
        float x_23824 = ((__global float *) data_mem_24282)[gtid_23814 * (int64_t) 5 + (int64_t) 3];
        float x_23825 = ((__global float *) data_mem_24282)[gtid_23814 * (int64_t) 5 + (int64_t) 4];
        
        pre_23816 = x_23821;
        pre_23817 = x_23822;
        pre_23818 = x_23823;
        pre_23819 = x_23824;
        pre_23820 = x_23825;
    } else {
        pre_23816 = 0.0F;
        pre_23817 = 0.0F;
        pre_23818 = 0.0F;
        pre_23819 = 0.0F;
        pre_23820 = 0.0F;
    }
    mem_24365[(int64_t) 0] = pre_23816;
    mem_24367[(int64_t) 0] = pre_23817;
    mem_24369[(int64_t) 0] = pre_23818;
    mem_24371[(int64_t) 0] = pre_23819;
    mem_24373[(int64_t) 0] = pre_23820;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t mem_24376[1];
    float mem_24378[1];
    int32_t ltid_flat_23838 = local_tid_24651;
    int64_t ltid_23837 = sext_i32_i64(sext_i64_i32(ltid_pre_24655));
    
    mem_24376[(int64_t) 0] = (int64_t) 0;
    mem_24378[(int64_t) 0] = INFINITY;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t mem_in_24484[1];
    int64_t mem_24402[1];
    float mem_in_24488[1];
    float mem_24404[1];
    int64_t tmp_24660 = mem_24376[(int64_t) 0];
    
    mem_in_24484[(int64_t) 0] = tmp_24660;
    
    float tmp_24661 = mem_24378[(int64_t) 0];
    
    mem_in_24488[(int64_t) 0] = tmp_24661;
    
    int64_t ext_mem_24406[1];
    int64_t ext_mem_unused_24485[1];
    float ext_mem_24405[1];
    float ext_mem_unused_24489[1];
    int64_t mem_param_24379[1];
    float mem_param_24380[1];
    int64_t mem_param_out_24486[1];
    float mem_param_out_24490[1];
    
    for (int32_t i_6 = 0; i_6 < 1; i_6++)
        mem_param_24379[i_6] = mem_in_24484[i_6];
    for (int32_t i_7 = 0; i_7 < 1; i_7++)
        mem_param_out_24486[i_7] = mem_24402[i_7];
    for (int32_t i_8 = 0; i_8 < 1; i_8++)
        mem_param_24380[i_8] = mem_in_24488[i_8];
    for (int32_t i_9 = 0; i_9 < 1; i_9++)
        mem_param_out_24490[i_9] = mem_24404[i_9];
    for (int64_t tile_id_23846 = 0; tile_id_23846 < num_whole_tiles_23836; tile_id_23846++) {
        int64_t binop_x_23972 = segmap_group_sizze_23616 * tile_id_23846;
        int32_t ltid_flat_23971 = local_tid_24651;
        int64_t ltid_23970 = sext_i32_i64(sext_i64_i32(ltid_pre_24655));
        int64_t j_23973 = ltid_23970 + binop_x_23972;
        bool cond_23981 = slt64(j_23973, partition_sizze_21685);
        int64_t pre1d_23987;
        
        if (cond_23981 == 1) {
            pre1d_23987 = j_23973;
        } else {
            pre1d_23987 = (int64_t) 0;
        }
        
        float pre1d_23982;
        float pre1d_23983;
        float pre1d_23984;
        float pre1d_23985;
        float pre1d_23986;
        
        if (cond_23981 == 1) {
            float tile_elem_23988 = ((__global float *) mem_24286)[j_23973];
            float tile_elem_23989 = ((__global float *) mem_24289)[j_23973];
            float tile_elem_23990 = ((__global float *) mem_24292)[j_23973];
            float tile_elem_23991 = ((__global float *) mem_24295)[j_23973];
            float tile_elem_23992 = ((__global float *) mem_24298)[j_23973];
            
            pre1d_23982 = tile_elem_23988;
            pre1d_23983 = tile_elem_23989;
            pre1d_23984 = tile_elem_23990;
            pre1d_23985 = tile_elem_23991;
            pre1d_23986 = tile_elem_23992;
        } else {
            pre1d_23982 = 0.0F;
            pre1d_23983 = 0.0F;
            pre1d_23984 = 0.0F;
            pre1d_23985 = 0.0F;
            pre1d_23986 = 0.0F;
        }
        ((__local float *) color_24498)[ltid_23970] = pre1d_23982;
        ((__local float *) color_24497)[ltid_23970] = pre1d_23983;
        ((__local float *) color_24496)[ltid_23970] = pre1d_23984;
        ((__local float *) color_24495)[ltid_23970] = pre1d_23985;
        ((__local float *) color_24494)[ltid_23970] = pre1d_23986;
        ((__local int64_t *) color_24493)[ltid_23970] = pre1d_23987;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t ltid_flat_24003 = local_tid_24651;
        int64_t ltid_24002 = sext_i32_i64(sext_i64_i32(ltid_pre_24655));
        int64_t gtid_24005 = binop_x_23813 + ltid_24002;
        int64_t acc_24011 = mem_param_24379[(int64_t) 0];
        float acc_24012 = mem_param_24380[(int64_t) 0];
        bool cond_24013 = slt64(gtid_24005, n_20072);
        int64_t acc_24014;
        float acc_24015;
        
        if (cond_24013 == 1) {
            float x_24006 = mem_24365[(int64_t) 0];
            float x_24007 = mem_24367[(int64_t) 0];
            float x_24008 = mem_24369[(int64_t) 0];
            float x_24009 = mem_24371[(int64_t) 0];
            float x_24010 = mem_24373[(int64_t) 0];
            int64_t x_24016;
            float x_24017;
            int64_t redout_24239;
            float redout_24240;
            
            redout_24239 = acc_24011;
            redout_24240 = acc_24012;
            for (int64_t i_24241 = 0; i_24241 < segmap_group_sizze_23616; i_24241++) {
                float x_24025 = ((__local float *) color_24498)[i_24241];
                float x_24026 = ((__local float *) color_24497)[i_24241];
                float x_24027 = ((__local float *) color_24496)[i_24241];
                float x_24028 = ((__local float *) color_24495)[i_24241];
                float x_24029 = ((__local float *) color_24494)[i_24241];
                float defunc_1_f_res_24031 = x_24006 - x_24025;
                float defunc_1_f_res_24032 = x_24007 - x_24026;
                float defunc_1_f_res_24033 = x_24008 - x_24027;
                float defunc_1_f_res_24034 = x_24009 - x_24028;
                float defunc_1_f_res_24035 = x_24010 - x_24029;
                float defunc_1_f_res_24036 = defunc_1_f_res_24031 / from_array_res_24272;
                float defunc_1_f_res_24037 = defunc_1_f_res_24032 / from_array_res_24273;
                float defunc_1_f_res_24038 = defunc_1_f_res_24033 / from_array_res_24274;
                float defunc_1_f_res_24039 = defunc_1_f_res_24034 / from_array_res_24275;
                float defunc_1_f_res_24040 = defunc_1_f_res_24035 / from_array_res_24276;
                float defunc_1_f_res_24041 = defunc_1_f_res_24036 * defunc_1_f_res_24036;
                float defunc_1_f_res_24042 = defunc_1_f_res_24037 * defunc_1_f_res_24037;
                float defunc_1_f_res_24043 = defunc_1_f_res_24038 * defunc_1_f_res_24038;
                float defunc_1_f_res_24044 = defunc_1_f_res_24039 * defunc_1_f_res_24039;
                float defunc_1_f_res_24045 = defunc_1_f_res_24040 * defunc_1_f_res_24040;
                float defunc_1_f_res_24046 = defunc_1_f_res_24044 + defunc_1_f_res_24045;
                float defunc_1_f_res_24047 = defunc_1_f_res_24042 + defunc_1_f_res_24043;
                float defunc_1_f_res_24048 = defunc_1_f_res_24041 + defunc_1_f_res_24047;
                float defunc_1_f_res_24049 = defunc_1_f_res_24046 + defunc_1_f_res_24048;
                float defunc_0_g_res_24050 = futrts_sqrt32(defunc_1_f_res_24049);
                bool zl_res_24022 = redout_24240 < defunc_0_g_res_24050;
                int64_t defunc_1_op_res_24023;
                
                if (zl_res_24022 == 1) {
                    defunc_1_op_res_24023 = redout_24239;
                } else {
                    int64_t x_24030 = ((__local int64_t *) color_24493)[i_24241];
                    
                    defunc_1_op_res_24023 = x_24030;
                }
                
                float defunc_1_op_res_24024;
                
                if (zl_res_24022 == 1) {
                    defunc_1_op_res_24024 = redout_24240;
                } else {
                    defunc_1_op_res_24024 = defunc_0_g_res_24050;
                }
                
                int64_t redout_tmp_24668 = defunc_1_op_res_24023;
                float redout_tmp_24669 = defunc_1_op_res_24024;
                
                redout_24239 = redout_tmp_24668;
                redout_24240 = redout_tmp_24669;
            }
            x_24016 = redout_24239;
            x_24017 = redout_24240;
            acc_24014 = x_24016;
            acc_24015 = x_24017;
        } else {
            acc_24014 = acc_24011;
            acc_24015 = acc_24012;
        }
        mem_param_out_24486[(int64_t) 0] = acc_24014;
        mem_param_out_24490[(int64_t) 0] = acc_24015;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t mem_param_tmp_24662[1];
        
        for (int32_t i_10 = 0; i_10 < 1; i_10++)
            mem_param_tmp_24662[i_10] = mem_param_out_24486[i_10];
        
        int64_t mem_param_out_tmp_24663[1];
        
        for (int32_t i_11 = 0; i_11 < 1; i_11++)
            mem_param_out_tmp_24663[i_11] = mem_param_24379[i_11];
        
        float mem_param_tmp_24664[1];
        
        for (int32_t i_12 = 0; i_12 < 1; i_12++)
            mem_param_tmp_24664[i_12] = mem_param_out_24490[i_12];
        
        float mem_param_out_tmp_24665[1];
        
        for (int32_t i_13 = 0; i_13 < 1; i_13++)
            mem_param_out_tmp_24665[i_13] = mem_param_24380[i_13];
        for (int32_t i_14 = 0; i_14 < 1; i_14++)
            mem_param_24379[i_14] = mem_param_tmp_24662[i_14];
        for (int32_t i_15 = 0; i_15 < 1; i_15++)
            mem_param_out_24486[i_15] = mem_param_out_tmp_24663[i_15];
        for (int32_t i_16 = 0; i_16 < 1; i_16++)
            mem_param_24380[i_16] = mem_param_tmp_24664[i_16];
        for (int32_t i_17 = 0; i_17 < 1; i_17++)
            mem_param_out_24490[i_17] = mem_param_out_tmp_24665[i_17];
    }
    for (int32_t i_18 = 0; i_18 < 1; i_18++)
        ext_mem_24406[i_18] = mem_param_24379[i_18];
    for (int32_t i_19 = 0; i_19 < 1; i_19++)
        ext_mem_unused_24485[i_19] = mem_param_out_24486[i_19];
    for (int32_t i_20 = 0; i_20 < 1; i_20++)
        ext_mem_24405[i_20] = mem_param_24380[i_20];
    for (int32_t i_21 = 0; i_21 < 1; i_21++)
        ext_mem_unused_24489[i_21] = mem_param_out_24490[i_21];
    
    int64_t mem_24447[1];
    int64_t mem_24428[1];
    float mem_24430[1];
    
    if (cond_24087 == 1) {
        int64_t tmp_24670 = ext_mem_24406[(int64_t) 0];
        
        mem_24447[(int64_t) 0] = tmp_24670;
    } else {
        int32_t ltid_flat_24089 = local_tid_24651;
        int64_t ltid_24088 = sext_i32_i64(sext_i64_i32(ltid_pre_24655));
        int64_t j_24113 = ltid_24088 + binop_x_24112;
        bool cond_24121 = slt64(j_24113, partition_sizze_21685);
        int64_t pre1d_24127;
        
        if (cond_24121 == 1) {
            pre1d_24127 = j_24113;
        } else {
            pre1d_24127 = (int64_t) 0;
        }
        
        float pre1d_24122;
        float pre1d_24123;
        float pre1d_24124;
        float pre1d_24125;
        float pre1d_24126;
        
        if (cond_24121 == 1) {
            float tile_elem_24128 = ((__global float *) mem_24286)[j_24113];
            float tile_elem_24129 = ((__global float *) mem_24289)[j_24113];
            float tile_elem_24130 = ((__global float *) mem_24292)[j_24113];
            float tile_elem_24131 = ((__global float *) mem_24295)[j_24113];
            float tile_elem_24132 = ((__global float *) mem_24298)[j_24113];
            
            pre1d_24122 = tile_elem_24128;
            pre1d_24123 = tile_elem_24129;
            pre1d_24124 = tile_elem_24130;
            pre1d_24125 = tile_elem_24131;
            pre1d_24126 = tile_elem_24132;
        } else {
            pre1d_24122 = 0.0F;
            pre1d_24123 = 0.0F;
            pre1d_24124 = 0.0F;
            pre1d_24125 = 0.0F;
            pre1d_24126 = 0.0F;
        }
        ((__local float *) color_24498)[ltid_24088] = pre1d_24122;
        ((__local float *) color_24497)[ltid_24088] = pre1d_24123;
        ((__local float *) color_24496)[ltid_24088] = pre1d_24124;
        ((__local float *) color_24495)[ltid_24088] = pre1d_24125;
        ((__local float *) color_24494)[ltid_24088] = pre1d_24126;
        ((__local int64_t *) color_24493)[ltid_24088] = pre1d_24127;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t ltid_flat_24153 = local_tid_24651;
        int64_t ltid_24152 = sext_i32_i64(sext_i64_i32(ltid_pre_24655));
        int64_t gtid_24163 = binop_x_23813 + ltid_24152;
        int64_t acc_24169 = ext_mem_24406[(int64_t) 0];
        float acc_24170 = ext_mem_24405[(int64_t) 0];
        bool cond_24171 = slt64(gtid_24163, n_20072);
        int64_t acc_24172;
        float acc_24173;
        
        if (cond_24171 == 1) {
            float x_24164 = mem_24365[(int64_t) 0];
            float x_24165 = mem_24367[(int64_t) 0];
            float x_24166 = mem_24369[(int64_t) 0];
            float x_24167 = mem_24371[(int64_t) 0];
            float x_24168 = mem_24373[(int64_t) 0];
            int64_t x_24174;
            float x_24175;
            int64_t redout_24242;
            float redout_24243;
            
            redout_24242 = acc_24169;
            redout_24243 = acc_24170;
            for (int64_t i_24244 = 0; i_24244 < residual_input_24086; i_24244++) {
                float x_24183 = ((__local float *) color_24498)[i_24244];
                float x_24184 = ((__local float *) color_24497)[i_24244];
                float x_24185 = ((__local float *) color_24496)[i_24244];
                float x_24186 = ((__local float *) color_24495)[i_24244];
                float x_24187 = ((__local float *) color_24494)[i_24244];
                float defunc_1_f_res_24189 = x_24164 - x_24183;
                float defunc_1_f_res_24190 = x_24165 - x_24184;
                float defunc_1_f_res_24191 = x_24166 - x_24185;
                float defunc_1_f_res_24192 = x_24167 - x_24186;
                float defunc_1_f_res_24193 = x_24168 - x_24187;
                float defunc_1_f_res_24194 = defunc_1_f_res_24189 / from_array_res_24272;
                float defunc_1_f_res_24195 = defunc_1_f_res_24190 / from_array_res_24273;
                float defunc_1_f_res_24196 = defunc_1_f_res_24191 / from_array_res_24274;
                float defunc_1_f_res_24197 = defunc_1_f_res_24192 / from_array_res_24275;
                float defunc_1_f_res_24198 = defunc_1_f_res_24193 / from_array_res_24276;
                float defunc_1_f_res_24199 = defunc_1_f_res_24194 * defunc_1_f_res_24194;
                float defunc_1_f_res_24200 = defunc_1_f_res_24195 * defunc_1_f_res_24195;
                float defunc_1_f_res_24201 = defunc_1_f_res_24196 * defunc_1_f_res_24196;
                float defunc_1_f_res_24202 = defunc_1_f_res_24197 * defunc_1_f_res_24197;
                float defunc_1_f_res_24203 = defunc_1_f_res_24198 * defunc_1_f_res_24198;
                float defunc_1_f_res_24204 = defunc_1_f_res_24202 + defunc_1_f_res_24203;
                float defunc_1_f_res_24205 = defunc_1_f_res_24200 + defunc_1_f_res_24201;
                float defunc_1_f_res_24206 = defunc_1_f_res_24199 + defunc_1_f_res_24205;
                float defunc_1_f_res_24207 = defunc_1_f_res_24204 + defunc_1_f_res_24206;
                float defunc_0_g_res_24208 = futrts_sqrt32(defunc_1_f_res_24207);
                bool zl_res_24180 = redout_24243 < defunc_0_g_res_24208;
                int64_t defunc_1_op_res_24181;
                
                if (zl_res_24180 == 1) {
                    defunc_1_op_res_24181 = redout_24242;
                } else {
                    int64_t x_24188 = ((__local int64_t *) color_24493)[i_24244];
                    
                    defunc_1_op_res_24181 = x_24188;
                }
                
                float defunc_1_op_res_24182;
                
                if (zl_res_24180 == 1) {
                    defunc_1_op_res_24182 = redout_24243;
                } else {
                    defunc_1_op_res_24182 = defunc_0_g_res_24208;
                }
                
                int64_t redout_tmp_24671 = defunc_1_op_res_24181;
                float redout_tmp_24672 = defunc_1_op_res_24182;
                
                redout_24242 = redout_tmp_24671;
                redout_24243 = redout_tmp_24672;
            }
            x_24174 = redout_24242;
            x_24175 = redout_24243;
            acc_24172 = x_24174;
            acc_24173 = x_24175;
        } else {
            acc_24172 = acc_24169;
            acc_24173 = acc_24170;
        }
        mem_24428[(int64_t) 0] = acc_24172;
        mem_24430[(int64_t) 0] = acc_24173;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t tmp_24673 = mem_24428[(int64_t) 0];
        
        mem_24447[(int64_t) 0] = tmp_24673;
    }
    if (slt64(sext_i32_i64(local_tid_24651) + segmap_group_sizze_23616 * sext_i32_i64(group_tid_24652), n_20072)) {
        int64_t tmp_24674 = mem_24447[(int64_t) 0];
        
        ((__global int64_t *) mem_24434)[sext_i32_i64(local_tid_24651) + segmap_group_sizze_23616 * sext_i32_i64(group_tid_24652)] = tmp_24674;
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_23616
}
__kernel void cluster_5Dzisegred_large_23722(__global int *global_failure, __local volatile int64_t *sync_arr_mem_24730_backing_aligned_0, __local volatile int64_t *red_arr_mem_24728_backing_aligned_1, __local volatile int64_t *red_arr_mem_24726_backing_aligned_2, int64_t n_20072, int64_t partition_sizze_21685, int64_t num_groups_23716, int64_t groups_per_segment_24710, int64_t elements_per_thread_24711, int64_t virt_num_groups_24712, __global unsigned char *data_mem_24282, __global unsigned char *mem_24286, __global unsigned char *mem_24289, __global unsigned char *mem_24292, __global unsigned char *mem_24295, __global unsigned char *mem_24298, __global unsigned char *mem_24300, __global unsigned char *mem_24302, __global unsigned char *mem_24304, __global unsigned char *mem_24306, __global unsigned char *mem_24308, __global unsigned char *mem_24358, __global unsigned char *mem_24361, __global unsigned char *segred_tmp_mem_24715, __global unsigned char *segred_tmp_mem_24717, __global unsigned char *cluster_5Dzicounter_mem_24719)
{
    #define segred_group_sizze_23715 (cluster_5Dzisegred_group_sizze_23665)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict sync_arr_mem_24730_backing_2 = (__local volatile unsigned char *) sync_arr_mem_24730_backing_aligned_0;
    __local volatile unsigned char *restrict red_arr_mem_24728_backing_1 = (__local volatile unsigned char *) red_arr_mem_24728_backing_aligned_1;
    __local volatile unsigned char *restrict red_arr_mem_24726_backing_0 = (__local volatile unsigned char *) red_arr_mem_24726_backing_aligned_2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24722;
    int64_t group_sizze_24725;
    int32_t wave_sizze_24724;
    int32_t group_tid_24723;
    
    local_tid_24722 = get_local_id(0);
    group_sizze_24725 = get_local_size(0);
    wave_sizze_24724 = LOCKSTEP_WIDTH;
    group_tid_24723 = get_group_id(0);
    
    int32_t global_tid_24721 = group_tid_24723 * group_sizze_24725 + local_tid_24722;
    int32_t phys_tid_23722 = global_tid_24721;
    __local unsigned char *red_arr_mem_24726;
    
    red_arr_mem_24726 = (__local unsigned char *) red_arr_mem_24726_backing_0;
    
    __local unsigned char *red_arr_mem_24728;
    
    red_arr_mem_24728 = (__local unsigned char *) red_arr_mem_24728_backing_1;
    
    __local unsigned char *sync_arr_mem_24730;
    
    sync_arr_mem_24730 = (__local unsigned char *) sync_arr_mem_24730_backing_2;
    
    int32_t phys_group_id_24732;
    
    phys_group_id_24732 = get_group_id(0);
    
    int32_t iterations_24733 = sdiv_up32(sext_i64_i32(virt_num_groups_24712) - phys_group_id_24732, sext_i64_i32(num_groups_23716));
    
    for (int32_t i_24734 = 0; i_24734 < iterations_24733; i_24734++) {
        int32_t virt_group_id_24735 = phys_group_id_24732 + i_24734 * sext_i64_i32(num_groups_23716);
        int32_t flat_segment_id_24736 = squot32(virt_group_id_24735, sext_i64_i32(groups_per_segment_24710));
        int64_t global_tid_24737 = srem64(sext_i32_i64(virt_group_id_24735) * segred_group_sizze_23715 + sext_i32_i64(local_tid_24722), segred_group_sizze_23715 * groups_per_segment_24710);
        int64_t slice_24738 = n_20072;
        int64_t gtid_23720 = sext_i32_i64(flat_segment_id_24736);
        int64_t remnant_24739 = sext_i32_i64(flat_segment_id_24736) - gtid_23720;
        int64_t gtid_23721;
        int64_t x_acc_24740;
        float x_acc_24741;
        int64_t chunk_sizze_24742;
        int64_t starting_point_24743 = global_tid_24737 * elements_per_thread_24711;
        int64_t remaining_elements_24744 = partition_sizze_21685 - starting_point_24743;
        
        if (sle64(remaining_elements_24744, (int64_t) 0) || sle64(partition_sizze_21685, starting_point_24743)) {
            chunk_sizze_24742 = (int64_t) 0;
        } else if (slt64(partition_sizze_21685, (global_tid_24737 + (int64_t) 1) * elements_per_thread_24711)) {
            chunk_sizze_24742 = partition_sizze_21685 - global_tid_24737 * elements_per_thread_24711;
        } else {
            chunk_sizze_24742 = elements_per_thread_24711;
        }
        
        int64_t x_23723;
        float x_23724;
        int64_t x_23725;
        float x_23726;
        
        // neutral-initialise the accumulators
        {
            x_acc_24740 = (int64_t) 0;
            x_acc_24741 = INFINITY;
        }
        for (int64_t i_24752 = 0; i_24752 < elements_per_thread_24711; i_24752++) {
            gtid_23721 = sext_i32_i64(local_tid_24722) + (squot64(global_tid_24737, segred_group_sizze_23715) * elements_per_thread_24711 + i_24752) * segred_group_sizze_23715;
            if (slt64(gtid_23721, partition_sizze_21685)) {
                // apply map function
                {
                    float from_array_res_24277 = ((__global float *) mem_24300)[(int64_t) 0];
                    float from_array_res_24278 = ((__global float *) mem_24302)[(int64_t) 0];
                    float from_array_res_24279 = ((__global float *) mem_24304)[(int64_t) 0];
                    float from_array_res_24280 = ((__global float *) mem_24306)[(int64_t) 0];
                    float from_array_res_24281 = ((__global float *) mem_24308)[(int64_t) 0];
                    float x_23730 = ((__global float *) data_mem_24282)[gtid_23720 * (int64_t) 5];
                    float x_23731 = ((__global float *) data_mem_24282)[gtid_23720 * (int64_t) 5 + (int64_t) 1];
                    float x_23732 = ((__global float *) data_mem_24282)[gtid_23720 * (int64_t) 5 + (int64_t) 2];
                    float x_23733 = ((__global float *) data_mem_24282)[gtid_23720 * (int64_t) 5 + (int64_t) 3];
                    float x_23734 = ((__global float *) data_mem_24282)[gtid_23720 * (int64_t) 5 + (int64_t) 4];
                    float x_23735 = ((__global float *) mem_24286)[gtid_23721];
                    float x_23736 = ((__global float *) mem_24289)[gtid_23721];
                    float x_23737 = ((__global float *) mem_24292)[gtid_23721];
                    float x_23738 = ((__global float *) mem_24295)[gtid_23721];
                    float x_23739 = ((__global float *) mem_24298)[gtid_23721];
                    float defunc_1_f_res_23741 = x_23730 - x_23735;
                    float defunc_1_f_res_23742 = x_23731 - x_23736;
                    float defunc_1_f_res_23743 = x_23732 - x_23737;
                    float defunc_1_f_res_23744 = x_23733 - x_23738;
                    float defunc_1_f_res_23745 = x_23734 - x_23739;
                    float defunc_1_f_res_23746 = defunc_1_f_res_23741 / from_array_res_24277;
                    float defunc_1_f_res_23747 = defunc_1_f_res_23742 / from_array_res_24278;
                    float defunc_1_f_res_23748 = defunc_1_f_res_23743 / from_array_res_24279;
                    float defunc_1_f_res_23749 = defunc_1_f_res_23744 / from_array_res_24280;
                    float defunc_1_f_res_23750 = defunc_1_f_res_23745 / from_array_res_24281;
                    float defunc_1_f_res_23751 = defunc_1_f_res_23746 * defunc_1_f_res_23746;
                    float defunc_1_f_res_23752 = defunc_1_f_res_23747 * defunc_1_f_res_23747;
                    float defunc_1_f_res_23753 = defunc_1_f_res_23748 * defunc_1_f_res_23748;
                    float defunc_1_f_res_23754 = defunc_1_f_res_23749 * defunc_1_f_res_23749;
                    float defunc_1_f_res_23755 = defunc_1_f_res_23750 * defunc_1_f_res_23750;
                    float defunc_1_f_res_23756 = defunc_1_f_res_23754 + defunc_1_f_res_23755;
                    float defunc_1_f_res_23757 = defunc_1_f_res_23752 + defunc_1_f_res_23753;
                    float defunc_1_f_res_23758 = defunc_1_f_res_23751 + defunc_1_f_res_23757;
                    float defunc_1_f_res_23759 = defunc_1_f_res_23756 + defunc_1_f_res_23758;
                    float defunc_0_g_res_23760 = futrts_sqrt32(defunc_1_f_res_23759);
                    
                    // save map-out results
                    { }
                    // load accumulator
                    {
                        x_23723 = x_acc_24740;
                        x_23724 = x_acc_24741;
                    }
                    // load new values
                    {
                        x_23725 = gtid_23721;
                        x_23726 = defunc_0_g_res_23760;
                    }
                    // apply reduction operator
                    {
                        bool zl_res_23727 = x_23724 < x_23726;
                        int64_t defunc_1_op_res_23728;
                        
                        if (zl_res_23727 == 1) {
                            defunc_1_op_res_23728 = x_23723;
                        } else {
                            defunc_1_op_res_23728 = x_23725;
                        }
                        
                        float defunc_1_op_res_23729;
                        
                        if (zl_res_23727 == 1) {
                            defunc_1_op_res_23729 = x_23724;
                        } else {
                            defunc_1_op_res_23729 = x_23726;
                        }
                        // store in accumulator
                        {
                            x_acc_24740 = defunc_1_op_res_23728;
                            x_acc_24741 = defunc_1_op_res_23729;
                        }
                    }
                }
            }
            // to reduce current chunk, first store our result in memory
            {
                x_23723 = x_acc_24740;
                x_23724 = x_acc_24741;
                ((__local int64_t *) red_arr_mem_24726)[sext_i32_i64(local_tid_24722)] = x_23723;
                ((__local float *) red_arr_mem_24728)[sext_i32_i64(local_tid_24722)] = x_23724;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int32_t offset_24753;
            int32_t skip_waves_24754 = 1;
            int64_t x_24745;
            float x_24746;
            int64_t x_24747;
            float x_24748;
            
            offset_24753 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_24722, sext_i64_i32(segred_group_sizze_23715))) {
                    x_24745 = ((__local int64_t *) red_arr_mem_24726)[sext_i32_i64(local_tid_24722 + offset_24753)];
                    x_24746 = ((__local float *) red_arr_mem_24728)[sext_i32_i64(local_tid_24722 + offset_24753)];
                }
            }
            offset_24753 = 1;
            while (slt32(offset_24753, wave_sizze_24724)) {
                if (slt32(local_tid_24722 + offset_24753, sext_i64_i32(segred_group_sizze_23715)) && ((local_tid_24722 - squot32(local_tid_24722, wave_sizze_24724) * wave_sizze_24724) & (2 * offset_24753 - 1)) == 0) {
                    // read array element
                    {
                        x_24747 = ((volatile __local int64_t *) red_arr_mem_24726)[sext_i32_i64(local_tid_24722 + offset_24753)];
                        x_24748 = ((volatile __local float *) red_arr_mem_24728)[sext_i32_i64(local_tid_24722 + offset_24753)];
                    }
                    // apply reduction operation
                    {
                        bool zl_res_24749 = x_24746 < x_24748;
                        int64_t defunc_1_op_res_24750;
                        
                        if (zl_res_24749 == 1) {
                            defunc_1_op_res_24750 = x_24745;
                        } else {
                            defunc_1_op_res_24750 = x_24747;
                        }
                        
                        float defunc_1_op_res_24751;
                        
                        if (zl_res_24749 == 1) {
                            defunc_1_op_res_24751 = x_24746;
                        } else {
                            defunc_1_op_res_24751 = x_24748;
                        }
                        x_24745 = defunc_1_op_res_24750;
                        x_24746 = defunc_1_op_res_24751;
                    }
                    // write result of operation
                    {
                        ((volatile __local int64_t *) red_arr_mem_24726)[sext_i32_i64(local_tid_24722)] = x_24745;
                        ((volatile __local float *) red_arr_mem_24728)[sext_i32_i64(local_tid_24722)] = x_24746;
                    }
                }
                offset_24753 *= 2;
            }
            while (slt32(skip_waves_24754, squot32(sext_i64_i32(segred_group_sizze_23715) + wave_sizze_24724 - 1, wave_sizze_24724))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_24753 = skip_waves_24754 * wave_sizze_24724;
                if (slt32(local_tid_24722 + offset_24753, sext_i64_i32(segred_group_sizze_23715)) && ((local_tid_24722 - squot32(local_tid_24722, wave_sizze_24724) * wave_sizze_24724) == 0 && (squot32(local_tid_24722, wave_sizze_24724) & (2 * skip_waves_24754 - 1)) == 0)) {
                    // read array element
                    {
                        x_24747 = ((__local int64_t *) red_arr_mem_24726)[sext_i32_i64(local_tid_24722 + offset_24753)];
                        x_24748 = ((__local float *) red_arr_mem_24728)[sext_i32_i64(local_tid_24722 + offset_24753)];
                    }
                    // apply reduction operation
                    {
                        bool zl_res_24749 = x_24746 < x_24748;
                        int64_t defunc_1_op_res_24750;
                        
                        if (zl_res_24749 == 1) {
                            defunc_1_op_res_24750 = x_24745;
                        } else {
                            defunc_1_op_res_24750 = x_24747;
                        }
                        
                        float defunc_1_op_res_24751;
                        
                        if (zl_res_24749 == 1) {
                            defunc_1_op_res_24751 = x_24746;
                        } else {
                            defunc_1_op_res_24751 = x_24748;
                        }
                        x_24745 = defunc_1_op_res_24750;
                        x_24746 = defunc_1_op_res_24751;
                    }
                    // write result of operation
                    {
                        ((__local int64_t *) red_arr_mem_24726)[sext_i32_i64(local_tid_24722)] = x_24745;
                        ((__local float *) red_arr_mem_24728)[sext_i32_i64(local_tid_24722)] = x_24746;
                    }
                }
                skip_waves_24754 *= 2;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread saves the result in accumulator
            {
                if (sext_i32_i64(local_tid_24722) == (int64_t) 0) {
                    x_acc_24740 = x_24745;
                    x_acc_24741 = x_24746;
                }
            }
            // first thread keeps accumulator; others reset to neutral element
            {
                if (!(sext_i32_i64(local_tid_24722) == (int64_t) 0)) {
                    x_acc_24740 = (int64_t) 0;
                    x_acc_24741 = INFINITY;
                }
            }
        }
        if (groups_per_segment_24710 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_24722 == 0) {
                    ((__global int64_t *) mem_24358)[gtid_23720] = x_acc_24740;
                    ((__global float *) mem_24361)[gtid_23720] = x_acc_24741;
                }
            }
        } else {
            int32_t old_counter_24755;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_24722 == 0) {
                    ((__global int64_t *) segred_tmp_mem_24715)[sext_i32_i64(virt_group_id_24735)] = x_acc_24740;
                    ((__global float *) segred_tmp_mem_24717)[sext_i32_i64(virt_group_id_24735)] = x_acc_24741;
                    mem_fence_global();
                    old_counter_24755 = atomic_add_i32_global(&((volatile __global int *) cluster_5Dzicounter_mem_24719)[sext_i32_i64(srem32(flat_segment_id_24736, 10240))], (int) 1);
                    ((__local bool *) sync_arr_mem_24730)[(int64_t) 0] = old_counter_24755 == groups_per_segment_24710 - (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_24756 = ((__local bool *) sync_arr_mem_24730)[(int64_t) 0];
            
            if (is_last_group_24756) {
                if (local_tid_24722 == 0) {
                    old_counter_24755 = atomic_add_i32_global(&((volatile __global int *) cluster_5Dzicounter_mem_24719)[sext_i32_i64(srem32(flat_segment_id_24736, 10240))], (int) ((int64_t) 0 - groups_per_segment_24710));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_24757 = sdiv_up64(groups_per_segment_24710, segred_group_sizze_23715);
                    
                    x_23723 = (int64_t) 0;
                    x_23724 = INFINITY;
                    for (int64_t i_24758 = 0; i_24758 < read_per_thread_24757; i_24758++) {
                        int64_t group_res_id_24759 = sext_i32_i64(local_tid_24722) * read_per_thread_24757 + i_24758;
                        int64_t index_of_group_res_24760 = sext_i32_i64(flat_segment_id_24736) * groups_per_segment_24710 + group_res_id_24759;
                        
                        if (slt64(group_res_id_24759, groups_per_segment_24710)) {
                            x_23725 = ((__global int64_t *) segred_tmp_mem_24715)[index_of_group_res_24760];
                            x_23726 = ((__global float *) segred_tmp_mem_24717)[index_of_group_res_24760];
                            
                            bool zl_res_23727 = x_23724 < x_23726;
                            int64_t defunc_1_op_res_23728;
                            
                            if (zl_res_23727 == 1) {
                                defunc_1_op_res_23728 = x_23723;
                            } else {
                                defunc_1_op_res_23728 = x_23725;
                            }
                            
                            float defunc_1_op_res_23729;
                            
                            if (zl_res_23727 == 1) {
                                defunc_1_op_res_23729 = x_23724;
                            } else {
                                defunc_1_op_res_23729 = x_23726;
                            }
                            x_23723 = defunc_1_op_res_23728;
                            x_23724 = defunc_1_op_res_23729;
                        }
                    }
                }
                ((__local int64_t *) red_arr_mem_24726)[sext_i32_i64(local_tid_24722)] = x_23723;
                ((__local float *) red_arr_mem_24728)[sext_i32_i64(local_tid_24722)] = x_23724;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_24761;
                    int32_t skip_waves_24762 = 1;
                    int64_t x_24745;
                    float x_24746;
                    int64_t x_24747;
                    float x_24748;
                    
                    offset_24761 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_24722, sext_i64_i32(segred_group_sizze_23715))) {
                            x_24745 = ((__local int64_t *) red_arr_mem_24726)[sext_i32_i64(local_tid_24722 + offset_24761)];
                            x_24746 = ((__local float *) red_arr_mem_24728)[sext_i32_i64(local_tid_24722 + offset_24761)];
                        }
                    }
                    offset_24761 = 1;
                    while (slt32(offset_24761, wave_sizze_24724)) {
                        if (slt32(local_tid_24722 + offset_24761, sext_i64_i32(segred_group_sizze_23715)) && ((local_tid_24722 - squot32(local_tid_24722, wave_sizze_24724) * wave_sizze_24724) & (2 * offset_24761 - 1)) == 0) {
                            // read array element
                            {
                                x_24747 = ((volatile __local int64_t *) red_arr_mem_24726)[sext_i32_i64(local_tid_24722 + offset_24761)];
                                x_24748 = ((volatile __local float *) red_arr_mem_24728)[sext_i32_i64(local_tid_24722 + offset_24761)];
                            }
                            // apply reduction operation
                            {
                                bool zl_res_24749 = x_24746 < x_24748;
                                int64_t defunc_1_op_res_24750;
                                
                                if (zl_res_24749 == 1) {
                                    defunc_1_op_res_24750 = x_24745;
                                } else {
                                    defunc_1_op_res_24750 = x_24747;
                                }
                                
                                float defunc_1_op_res_24751;
                                
                                if (zl_res_24749 == 1) {
                                    defunc_1_op_res_24751 = x_24746;
                                } else {
                                    defunc_1_op_res_24751 = x_24748;
                                }
                                x_24745 = defunc_1_op_res_24750;
                                x_24746 = defunc_1_op_res_24751;
                            }
                            // write result of operation
                            {
                                ((volatile __local int64_t *) red_arr_mem_24726)[sext_i32_i64(local_tid_24722)] = x_24745;
                                ((volatile __local float *) red_arr_mem_24728)[sext_i32_i64(local_tid_24722)] = x_24746;
                            }
                        }
                        offset_24761 *= 2;
                    }
                    while (slt32(skip_waves_24762, squot32(sext_i64_i32(segred_group_sizze_23715) + wave_sizze_24724 - 1, wave_sizze_24724))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_24761 = skip_waves_24762 * wave_sizze_24724;
                        if (slt32(local_tid_24722 + offset_24761, sext_i64_i32(segred_group_sizze_23715)) && ((local_tid_24722 - squot32(local_tid_24722, wave_sizze_24724) * wave_sizze_24724) == 0 && (squot32(local_tid_24722, wave_sizze_24724) & (2 * skip_waves_24762 - 1)) == 0)) {
                            // read array element
                            {
                                x_24747 = ((__local int64_t *) red_arr_mem_24726)[sext_i32_i64(local_tid_24722 + offset_24761)];
                                x_24748 = ((__local float *) red_arr_mem_24728)[sext_i32_i64(local_tid_24722 + offset_24761)];
                            }
                            // apply reduction operation
                            {
                                bool zl_res_24749 = x_24746 < x_24748;
                                int64_t defunc_1_op_res_24750;
                                
                                if (zl_res_24749 == 1) {
                                    defunc_1_op_res_24750 = x_24745;
                                } else {
                                    defunc_1_op_res_24750 = x_24747;
                                }
                                
                                float defunc_1_op_res_24751;
                                
                                if (zl_res_24749 == 1) {
                                    defunc_1_op_res_24751 = x_24746;
                                } else {
                                    defunc_1_op_res_24751 = x_24748;
                                }
                                x_24745 = defunc_1_op_res_24750;
                                x_24746 = defunc_1_op_res_24751;
                            }
                            // write result of operation
                            {
                                ((__local int64_t *) red_arr_mem_24726)[sext_i32_i64(local_tid_24722)] = x_24745;
                                ((__local float *) red_arr_mem_24728)[sext_i32_i64(local_tid_24722)] = x_24746;
                            }
                        }
                        skip_waves_24762 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_24722 == 0) {
                            ((__global int64_t *) mem_24358)[gtid_23720] = x_24745;
                            ((__global float *) mem_24361)[gtid_23720] = x_24746;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_23715
}
__kernel void cluster_5Dzisegred_small_23722(__global int *global_failure, __local volatile int64_t *red_arr_mem_24684_backing_aligned_0, __local volatile int64_t *red_arr_mem_24682_backing_aligned_1, int64_t n_20072, int64_t partition_sizze_21685, int64_t num_groups_23716, int64_t segment_sizze_nonzzero_24675, __global unsigned char *data_mem_24282, __global unsigned char *mem_24286, __global unsigned char *mem_24289, __global unsigned char *mem_24292, __global unsigned char *mem_24295, __global unsigned char *mem_24298, __global unsigned char *mem_24300, __global unsigned char *mem_24302, __global unsigned char *mem_24304, __global unsigned char *mem_24306, __global unsigned char *mem_24308, __global unsigned char *mem_24358, __global unsigned char *mem_24361)
{
    #define segred_group_sizze_23715 (cluster_5Dzisegred_group_sizze_23665)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict red_arr_mem_24684_backing_1 = (__local volatile unsigned char *) red_arr_mem_24684_backing_aligned_0;
    __local volatile unsigned char *restrict red_arr_mem_24682_backing_0 = (__local volatile unsigned char *) red_arr_mem_24682_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_24678;
    int64_t group_sizze_24681;
    int32_t wave_sizze_24680;
    int32_t group_tid_24679;
    
    local_tid_24678 = get_local_id(0);
    group_sizze_24681 = get_local_size(0);
    wave_sizze_24680 = LOCKSTEP_WIDTH;
    group_tid_24679 = get_group_id(0);
    
    int32_t global_tid_24677 = group_tid_24679 * group_sizze_24681 + local_tid_24678;
    int32_t phys_tid_23722 = global_tid_24677;
    __local unsigned char *red_arr_mem_24682;
    
    red_arr_mem_24682 = (__local unsigned char *) red_arr_mem_24682_backing_0;
    
    __local unsigned char *red_arr_mem_24684;
    
    red_arr_mem_24684 = (__local unsigned char *) red_arr_mem_24684_backing_1;
    
    int32_t phys_group_id_24686;
    
    phys_group_id_24686 = get_group_id(0);
    
    int32_t iterations_24687 = sdiv_up32(sext_i64_i32(sdiv_up64(n_20072, squot64(segred_group_sizze_23715, segment_sizze_nonzzero_24675))) - phys_group_id_24686, sext_i64_i32(num_groups_23716));
    
    for (int32_t i_24688 = 0; i_24688 < iterations_24687; i_24688++) {
        int32_t virt_group_id_24689 = phys_group_id_24686 + i_24688 * sext_i64_i32(num_groups_23716);
        int64_t slice_24690 = n_20072;
        int64_t gtid_23720 = squot64(sext_i32_i64(local_tid_24678), segment_sizze_nonzzero_24675) + sext_i32_i64(virt_group_id_24689) * squot64(segred_group_sizze_23715, segment_sizze_nonzzero_24675);
        int64_t remnant_24691 = squot64(sext_i32_i64(local_tid_24678), segment_sizze_nonzzero_24675) + sext_i32_i64(virt_group_id_24689) * squot64(segred_group_sizze_23715, segment_sizze_nonzzero_24675) - gtid_23720;
        int64_t gtid_23721 = srem64(sext_i32_i64(local_tid_24678), partition_sizze_21685);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, partition_sizze_21685) && (slt64(gtid_23720, n_20072) && slt64(sext_i32_i64(local_tid_24678), partition_sizze_21685 * squot64(segred_group_sizze_23715, segment_sizze_nonzzero_24675)))) {
                float from_array_res_24277 = ((__global float *) mem_24300)[(int64_t) 0];
                float from_array_res_24278 = ((__global float *) mem_24302)[(int64_t) 0];
                float from_array_res_24279 = ((__global float *) mem_24304)[(int64_t) 0];
                float from_array_res_24280 = ((__global float *) mem_24306)[(int64_t) 0];
                float from_array_res_24281 = ((__global float *) mem_24308)[(int64_t) 0];
                float x_23730 = ((__global float *) data_mem_24282)[gtid_23720 * (int64_t) 5];
                float x_23731 = ((__global float *) data_mem_24282)[gtid_23720 * (int64_t) 5 + (int64_t) 1];
                float x_23732 = ((__global float *) data_mem_24282)[gtid_23720 * (int64_t) 5 + (int64_t) 2];
                float x_23733 = ((__global float *) data_mem_24282)[gtid_23720 * (int64_t) 5 + (int64_t) 3];
                float x_23734 = ((__global float *) data_mem_24282)[gtid_23720 * (int64_t) 5 + (int64_t) 4];
                float x_23735 = ((__global float *) mem_24286)[gtid_23721];
                float x_23736 = ((__global float *) mem_24289)[gtid_23721];
                float x_23737 = ((__global float *) mem_24292)[gtid_23721];
                float x_23738 = ((__global float *) mem_24295)[gtid_23721];
                float x_23739 = ((__global float *) mem_24298)[gtid_23721];
                float defunc_1_f_res_23741 = x_23730 - x_23735;
                float defunc_1_f_res_23742 = x_23731 - x_23736;
                float defunc_1_f_res_23743 = x_23732 - x_23737;
                float defunc_1_f_res_23744 = x_23733 - x_23738;
                float defunc_1_f_res_23745 = x_23734 - x_23739;
                float defunc_1_f_res_23746 = defunc_1_f_res_23741 / from_array_res_24277;
                float defunc_1_f_res_23747 = defunc_1_f_res_23742 / from_array_res_24278;
                float defunc_1_f_res_23748 = defunc_1_f_res_23743 / from_array_res_24279;
                float defunc_1_f_res_23749 = defunc_1_f_res_23744 / from_array_res_24280;
                float defunc_1_f_res_23750 = defunc_1_f_res_23745 / from_array_res_24281;
                float defunc_1_f_res_23751 = defunc_1_f_res_23746 * defunc_1_f_res_23746;
                float defunc_1_f_res_23752 = defunc_1_f_res_23747 * defunc_1_f_res_23747;
                float defunc_1_f_res_23753 = defunc_1_f_res_23748 * defunc_1_f_res_23748;
                float defunc_1_f_res_23754 = defunc_1_f_res_23749 * defunc_1_f_res_23749;
                float defunc_1_f_res_23755 = defunc_1_f_res_23750 * defunc_1_f_res_23750;
                float defunc_1_f_res_23756 = defunc_1_f_res_23754 + defunc_1_f_res_23755;
                float defunc_1_f_res_23757 = defunc_1_f_res_23752 + defunc_1_f_res_23753;
                float defunc_1_f_res_23758 = defunc_1_f_res_23751 + defunc_1_f_res_23757;
                float defunc_1_f_res_23759 = defunc_1_f_res_23756 + defunc_1_f_res_23758;
                float defunc_0_g_res_23760 = futrts_sqrt32(defunc_1_f_res_23759);
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local int64_t *) red_arr_mem_24682)[sext_i32_i64(local_tid_24678)] = gtid_23721;
                    ((__local float *) red_arr_mem_24684)[sext_i32_i64(local_tid_24678)] = defunc_0_g_res_23760;
                }
            } else {
                ((__local int64_t *) red_arr_mem_24682)[sext_i32_i64(local_tid_24678)] = (int64_t) 0;
                ((__local float *) red_arr_mem_24684)[sext_i32_i64(local_tid_24678)] = INFINITY;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, partition_sizze_21685)) {
            // perform segmented scan to imitate reduction
            {
                int64_t x_23723;
                float x_23724;
                int64_t x_23725;
                float x_23726;
                int64_t x_24692;
                float x_24693;
                int64_t x_24694;
                float x_24695;
                bool ltid_in_bounds_24699 = slt64(sext_i32_i64(local_tid_24678), partition_sizze_21685 * squot64(segred_group_sizze_23715, segment_sizze_nonzzero_24675));
                int32_t skip_threads_24700;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_24699) {
                        x_23725 = ((volatile __local int64_t *) red_arr_mem_24682)[sext_i32_i64(local_tid_24678)];
                        x_23726 = ((volatile __local float *) red_arr_mem_24684)[sext_i32_i64(local_tid_24678)];
                        if ((local_tid_24678 - squot32(local_tid_24678, 32) * 32) == 0) {
                            x_23723 = x_23725;
                            x_23724 = x_23726;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_24700 = 1;
                    while (slt32(skip_threads_24700, 32)) {
                        bool thread_active_24701 = sle32(skip_threads_24700, local_tid_24678 - squot32(local_tid_24678, 32) * 32) && ltid_in_bounds_24699;
                        
                        if (thread_active_24701) {
                            // read operands
                            {
                                x_23723 = ((volatile __local int64_t *) red_arr_mem_24682)[sext_i32_i64(local_tid_24678) - sext_i32_i64(skip_threads_24700)];
                                x_23724 = ((volatile __local float *) red_arr_mem_24684)[sext_i32_i64(local_tid_24678) - sext_i32_i64(skip_threads_24700)];
                            }
                        }
                        // perform operation
                        {
                            bool inactive_24702 = slt64(srem64(sext_i32_i64(local_tid_24678), partition_sizze_21685), sext_i32_i64(local_tid_24678) - sext_i32_i64(local_tid_24678 - skip_threads_24700));
                            
                            if (thread_active_24701 && inactive_24702) {
                                x_23723 = x_23725;
                                x_23724 = x_23726;
                            }
                            if (thread_active_24701) {
                                if (!inactive_24702) {
                                    bool zl_res_23727 = x_23724 < x_23726;
                                    int64_t defunc_1_op_res_23728;
                                    
                                    if (zl_res_23727 == 1) {
                                        defunc_1_op_res_23728 = x_23723;
                                    } else {
                                        defunc_1_op_res_23728 = x_23725;
                                    }
                                    
                                    float defunc_1_op_res_23729;
                                    
                                    if (zl_res_23727 == 1) {
                                        defunc_1_op_res_23729 = x_23724;
                                    } else {
                                        defunc_1_op_res_23729 = x_23726;
                                    }
                                    x_23723 = defunc_1_op_res_23728;
                                    x_23724 = defunc_1_op_res_23729;
                                }
                            }
                        }
                        if (sle32(wave_sizze_24680, skip_threads_24700)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (thread_active_24701) {
                            // write result
                            {
                                ((volatile __local int64_t *) red_arr_mem_24682)[sext_i32_i64(local_tid_24678)] = x_23723;
                                x_23725 = x_23723;
                                ((volatile __local float *) red_arr_mem_24684)[sext_i32_i64(local_tid_24678)] = x_23724;
                                x_23726 = x_23724;
                            }
                        }
                        if (sle32(wave_sizze_24680, skip_threads_24700)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_24700 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_24678 - squot32(local_tid_24678, 32) * 32) == 31 && ltid_in_bounds_24699) {
                        ((volatile __local int64_t *) red_arr_mem_24682)[sext_i32_i64(squot32(local_tid_24678, 32))] = x_23723;
                        ((volatile __local float *) red_arr_mem_24684)[sext_i32_i64(squot32(local_tid_24678, 32))] = x_23724;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_24703;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_24678, 32) == 0 && ltid_in_bounds_24699) {
                            x_24694 = ((volatile __local int64_t *) red_arr_mem_24682)[sext_i32_i64(local_tid_24678)];
                            x_24695 = ((volatile __local float *) red_arr_mem_24684)[sext_i32_i64(local_tid_24678)];
                            if ((local_tid_24678 - squot32(local_tid_24678, 32) * 32) == 0) {
                                x_24692 = x_24694;
                                x_24693 = x_24695;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_24703 = 1;
                        while (slt32(skip_threads_24703, 32)) {
                            bool thread_active_24704 = sle32(skip_threads_24703, local_tid_24678 - squot32(local_tid_24678, 32) * 32) && (squot32(local_tid_24678, 32) == 0 && ltid_in_bounds_24699);
                            
                            if (thread_active_24704) {
                                // read operands
                                {
                                    x_24692 = ((volatile __local int64_t *) red_arr_mem_24682)[sext_i32_i64(local_tid_24678) - sext_i32_i64(skip_threads_24703)];
                                    x_24693 = ((volatile __local float *) red_arr_mem_24684)[sext_i32_i64(local_tid_24678) - sext_i32_i64(skip_threads_24703)];
                                }
                            }
                            // perform operation
                            {
                                bool inactive_24705 = slt64(srem64(sext_i32_i64(local_tid_24678 * 32 + 32 - 1), partition_sizze_21685), sext_i32_i64(local_tid_24678 * 32 + 32 - 1) - sext_i32_i64((local_tid_24678 - skip_threads_24703) * 32 + 32 - 1));
                                
                                if (thread_active_24704 && inactive_24705) {
                                    x_24692 = x_24694;
                                    x_24693 = x_24695;
                                }
                                if (thread_active_24704) {
                                    if (!inactive_24705) {
                                        bool zl_res_24696 = x_24693 < x_24695;
                                        int64_t defunc_1_op_res_24697;
                                        
                                        if (zl_res_24696 == 1) {
                                            defunc_1_op_res_24697 = x_24692;
                                        } else {
                                            defunc_1_op_res_24697 = x_24694;
                                        }
                                        
                                        float defunc_1_op_res_24698;
                                        
                                        if (zl_res_24696 == 1) {
                                            defunc_1_op_res_24698 = x_24693;
                                        } else {
                                            defunc_1_op_res_24698 = x_24695;
                                        }
                                        x_24692 = defunc_1_op_res_24697;
                                        x_24693 = defunc_1_op_res_24698;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_24680, skip_threads_24703)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (thread_active_24704) {
                                // write result
                                {
                                    ((volatile __local int64_t *) red_arr_mem_24682)[sext_i32_i64(local_tid_24678)] = x_24692;
                                    x_24694 = x_24692;
                                    ((volatile __local float *) red_arr_mem_24684)[sext_i32_i64(local_tid_24678)] = x_24693;
                                    x_24695 = x_24693;
                                }
                            }
                            if (sle32(wave_sizze_24680, skip_threads_24703)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_24703 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                
                bool no_carry_in_24706 = squot32(local_tid_24678, 32) == 0 || !ltid_in_bounds_24699;
                
                // carry-in for every block except the first
                {
                    // read operands
                    {
                        if (!no_carry_in_24706) {
                            x_23725 = x_23723;
                            x_23726 = x_23724;
                            x_23723 = ((__local int64_t *) red_arr_mem_24682)[sext_i32_i64(squot32(local_tid_24678, 32)) - (int64_t) 1];
                            x_23724 = ((__local float *) red_arr_mem_24684)[sext_i32_i64(squot32(local_tid_24678, 32)) - (int64_t) 1];
                        }
                    }
                    // perform operation
                    {
                        bool inactive_24707 = slt64(srem64(sext_i32_i64(local_tid_24678), partition_sizze_21685), sext_i32_i64(local_tid_24678) - sext_i32_i64(squot32(local_tid_24678, 32) * 32 - 1));
                        
                        if (!no_carry_in_24706) {
                            if (inactive_24707) {
                                x_23723 = x_23725;
                                x_23724 = x_23726;
                            }
                        }
                        if (!no_carry_in_24706) {
                            if (!inactive_24707) {
                                bool zl_res_23727 = x_23724 < x_23726;
                                int64_t defunc_1_op_res_23728;
                                
                                if (zl_res_23727 == 1) {
                                    defunc_1_op_res_23728 = x_23723;
                                } else {
                                    defunc_1_op_res_23728 = x_23725;
                                }
                                
                                float defunc_1_op_res_23729;
                                
                                if (zl_res_23727 == 1) {
                                    defunc_1_op_res_23729 = x_23724;
                                } else {
                                    defunc_1_op_res_23729 = x_23726;
                                }
                                x_23723 = defunc_1_op_res_23728;
                                x_23724 = defunc_1_op_res_23729;
                            }
                        }
                    }
                    // write final result
                    {
                        if (!no_carry_in_24706) {
                            ((__local int64_t *) red_arr_mem_24682)[sext_i32_i64(local_tid_24678)] = x_23723;
                            ((__local float *) red_arr_mem_24684)[sext_i32_i64(local_tid_24678)] = x_23724;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_24678, 32) == 0 && ltid_in_bounds_24699) {
                        ((__local int64_t *) red_arr_mem_24682)[sext_i32_i64(local_tid_24678)] = x_23725;
                        ((__local float *) red_arr_mem_24684)[sext_i32_i64(local_tid_24678)] = x_23726;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_24689) * squot64(segred_group_sizze_23715, segment_sizze_nonzzero_24675) + sext_i32_i64(local_tid_24678), n_20072) && slt64(sext_i32_i64(local_tid_24678), squot64(segred_group_sizze_23715, segment_sizze_nonzzero_24675))) {
                int64_t tmp_24708 = ((__local int64_t *) red_arr_mem_24682)[(sext_i32_i64(local_tid_24678) + (int64_t) 1) * segment_sizze_nonzzero_24675 - (int64_t) 1];
                
                ((__global int64_t *) mem_24358)[sext_i32_i64(virt_group_id_24689) * squot64(segred_group_sizze_23715, segment_sizze_nonzzero_24675) + sext_i32_i64(local_tid_24678)] = tmp_24708;
                
                float tmp_24709 = ((__local float *) red_arr_mem_24684)[(sext_i32_i64(local_tid_24678) + (int64_t) 1) * segment_sizze_nonzzero_24675 - (int64_t) 1];
                
                ((__global float *) mem_24361)[sext_i32_i64(virt_group_id_24689) * squot64(segred_group_sizze_23715, segment_sizze_nonzzero_24675) + sext_i32_i64(local_tid_24678)] = tmp_24709;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_23715
}
__kernel void gpu_map_transpose_f32(__local volatile int64_t *block_9_backing_aligned_0, int32_t destoffset_1, int32_t srcoffset_3, int32_t num_arrays_4, int32_t x_elems_5, int32_t y_elems_6, int32_t mulx_7, int32_t muly_8, __global unsigned char *destmem_0, __global unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict block_9_backing_0 = (__local volatile unsigned char *) block_9_backing_aligned_0;
    __local unsigned char *block_9;
    
    block_9 = (__local unsigned char *) block_9_backing_0;
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_41;
    
    get_group_id_0_41 = get_group_id(0);
    
    int32_t get_group_id_1_42;
    
    get_group_id_1_42 = get_group_id(1);
    
    int32_t get_group_id_2_43;
    
    get_group_id_2_43 = get_group_id(2);
    
    int32_t get_local_sizze_0_40;
    
    get_local_sizze_0_40 = get_local_size(0);
    
    int32_t get_global_id_0_37 = get_group_id_0_41 * get_local_sizze_0_40 + get_local_id_0_38;
    int32_t our_array_offset_30 = get_group_id_2_43 * x_elems_5 * y_elems_6;
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t x_index_31 = get_global_id_0_37;
    int32_t y_index_32 = get_group_id_1_42 * 32 + get_local_id_1_39;
    float val_45;
    
    if (slt32(x_index_31, x_elems_5)) {
        for (int32_t j_44 = 0; j_44 < 4; j_44++) {
            int32_t index_in_35 = (y_index_32 + j_44 * 8) * x_elems_5 + x_index_31;
            
            if (slt32(y_index_32 + j_44 * 8, y_elems_6)) {
                val_45 = ((__global float *) srcmem_2)[sext_i32_i64(idata_offset_34 + index_in_35)];
                ((__local float *) block_9)[sext_i32_i64((get_local_id_1_39 + j_44 * 8) * 33 + get_local_id_0_38)] = val_45;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    x_index_31 = get_group_id_1_42 * 32 + get_local_id_0_38;
    y_index_32 = get_group_id_0_41 * 32 + get_local_id_1_39;
    if (slt32(x_index_31, y_elems_6)) {
        for (int32_t j_44 = 0; j_44 < 4; j_44++) {
            int32_t index_out_36 = (y_index_32 + j_44 * 8) * y_elems_6 + x_index_31;
            
            if (slt32(y_index_32 + j_44 * 8, x_elems_5)) {
                val_45 = ((__local float *) block_9)[sext_i32_i64(get_local_id_0_38 * 33 + get_local_id_1_39 + j_44 * 8)];
                ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 + index_out_36)] = val_45;
            }
        }
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32_low_height(__local volatile int64_t *block_9_backing_aligned_0, int32_t destoffset_1, int32_t srcoffset_3, int32_t num_arrays_4, int32_t x_elems_5, int32_t y_elems_6, int32_t mulx_7, int32_t muly_8, __global unsigned char *destmem_0, __global unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict block_9_backing_0 = (__local volatile unsigned char *) block_9_backing_aligned_0;
    __local unsigned char *block_9;
    
    block_9 = (__local unsigned char *) block_9_backing_0;
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_41;
    
    get_group_id_0_41 = get_group_id(0);
    
    int32_t get_group_id_1_42;
    
    get_group_id_1_42 = get_group_id(1);
    
    int32_t get_group_id_2_43;
    
    get_group_id_2_43 = get_group_id(2);
    
    int32_t get_local_sizze_0_40;
    
    get_local_sizze_0_40 = get_local_size(0);
    
    int32_t get_global_id_0_37 = get_group_id_0_41 * get_local_sizze_0_40 + get_local_id_0_38;
    int32_t our_array_offset_30 = get_group_id_2_43 * x_elems_5 * y_elems_6;
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t x_index_31 = get_group_id_0_41 * 16 * mulx_7 + get_local_id_0_38 + srem32(get_local_id_1_39, mulx_7) * 16;
    int32_t y_index_32 = get_group_id_1_42 * 16 + squot32(get_local_id_1_39, mulx_7);
    float val_45;
    int32_t index_in_35 = y_index_32 * x_elems_5 + x_index_31;
    
    if (slt32(x_index_31, x_elems_5) && slt32(y_index_32, y_elems_6)) {
        val_45 = ((__global float *) srcmem_2)[sext_i32_i64(idata_offset_34 + index_in_35)];
        ((__local float *) block_9)[sext_i32_i64(get_local_id_1_39 * 17 + get_local_id_0_38)] = val_45;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    x_index_31 = get_group_id_1_42 * 16 + squot32(get_local_id_0_38, mulx_7);
    y_index_32 = get_group_id_0_41 * 16 * mulx_7 + get_local_id_1_39 + srem32(get_local_id_0_38, mulx_7) * 16;
    
    int32_t index_out_36 = y_index_32 * y_elems_6 + x_index_31;
    
    if (slt32(x_index_31, y_elems_6) && slt32(y_index_32, x_elems_5)) {
        val_45 = ((__local float *) block_9)[sext_i32_i64(get_local_id_0_38 * 17 + get_local_id_1_39)];
        ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 + index_out_36)] = val_45;
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32_low_width(__local volatile int64_t *block_9_backing_aligned_0, int32_t destoffset_1, int32_t srcoffset_3, int32_t num_arrays_4, int32_t x_elems_5, int32_t y_elems_6, int32_t mulx_7, int32_t muly_8, __global unsigned char *destmem_0, __global unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict block_9_backing_0 = (__local volatile unsigned char *) block_9_backing_aligned_0;
    __local unsigned char *block_9;
    
    block_9 = (__local unsigned char *) block_9_backing_0;
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_41;
    
    get_group_id_0_41 = get_group_id(0);
    
    int32_t get_group_id_1_42;
    
    get_group_id_1_42 = get_group_id(1);
    
    int32_t get_group_id_2_43;
    
    get_group_id_2_43 = get_group_id(2);
    
    int32_t get_local_sizze_0_40;
    
    get_local_sizze_0_40 = get_local_size(0);
    
    int32_t get_global_id_0_37 = get_group_id_0_41 * get_local_sizze_0_40 + get_local_id_0_38;
    int32_t our_array_offset_30 = get_group_id_2_43 * x_elems_5 * y_elems_6;
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t x_index_31 = get_group_id_0_41 * 16 + squot32(get_local_id_0_38, muly_8);
    int32_t y_index_32 = get_group_id_1_42 * 16 * muly_8 + get_local_id_1_39 + srem32(get_local_id_0_38, muly_8) * 16;
    float val_45;
    int32_t index_in_35 = y_index_32 * x_elems_5 + x_index_31;
    
    if (slt32(x_index_31, x_elems_5) && slt32(y_index_32, y_elems_6)) {
        val_45 = ((__global float *) srcmem_2)[sext_i32_i64(idata_offset_34 + index_in_35)];
        ((__local float *) block_9)[sext_i32_i64(get_local_id_1_39 * 17 + get_local_id_0_38)] = val_45;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    x_index_31 = get_group_id_1_42 * 16 * muly_8 + get_local_id_0_38 + srem32(get_local_id_1_39, muly_8) * 16;
    y_index_32 = get_group_id_0_41 * 16 + squot32(get_local_id_1_39, muly_8);
    
    int32_t index_out_36 = y_index_32 * y_elems_6 + x_index_31;
    
    if (slt32(x_index_31, y_elems_6) && slt32(y_index_32, x_elems_5)) {
        val_45 = ((__local float *) block_9)[sext_i32_i64(get_local_id_0_38 * 17 + get_local_id_1_39)];
        ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 + index_out_36)] = val_45;
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32_small(__local volatile int64_t *block_9_backing_aligned_0, int32_t destoffset_1, int32_t srcoffset_3, int32_t num_arrays_4, int32_t x_elems_5, int32_t y_elems_6, int32_t mulx_7, int32_t muly_8, __global unsigned char *destmem_0, __global unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile unsigned char *restrict block_9_backing_0 = (__local volatile unsigned char *) block_9_backing_aligned_0;
    __local unsigned char *block_9;
    
    block_9 = (__local unsigned char *) block_9_backing_0;
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_41;
    
    get_group_id_0_41 = get_group_id(0);
    
    int32_t get_group_id_1_42;
    
    get_group_id_1_42 = get_group_id(1);
    
    int32_t get_group_id_2_43;
    
    get_group_id_2_43 = get_group_id(2);
    
    int32_t get_local_sizze_0_40;
    
    get_local_sizze_0_40 = get_local_size(0);
    
    int32_t get_global_id_0_37 = get_group_id_0_41 * get_local_sizze_0_40 + get_local_id_0_38;
    int32_t our_array_offset_30 = squot32(get_global_id_0_37, y_elems_6 * x_elems_5) * (y_elems_6 * x_elems_5);
    int32_t x_index_31 = squot32(srem32(get_global_id_0_37, y_elems_6 * x_elems_5), y_elems_6);
    int32_t y_index_32 = srem32(get_global_id_0_37, y_elems_6);
    float val_45;
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t index_in_35 = y_index_32 * x_elems_5 + x_index_31;
    int32_t index_out_36 = x_index_31 * y_elems_6 + y_index_32;
    
    if (slt32(get_global_id_0_37, x_elems_5 * y_elems_6 * num_arrays_4)) {
        val_45 = ((__global float *) srcmem_2)[sext_i32_i64(idata_offset_34 + index_in_35)];
        ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 + index_out_36)] = val_45;
    }
    
  error_0:
    return;
}
"""
# Start of values.py.

# Hacky parser/reader/writer for values written in Futhark syntax.
# Used for reading stdin when compiling standalone programs with the
# Python code generator.

import numpy as np
import string
import struct
import sys

class ReaderInput:
    def __init__(self, f):
        self.f = f
        self.lookahead_buffer = []

    def get_char(self):
        if len(self.lookahead_buffer) == 0:
            return self.f.read(1)
        else:
            c = self.lookahead_buffer[0]
            self.lookahead_buffer = self.lookahead_buffer[1:]
            return c

    def unget_char(self, c):
        self.lookahead_buffer = [c] + self.lookahead_buffer

    def get_chars(self, n):
        n1 = min(n, len(self.lookahead_buffer))
        s = b''.join(self.lookahead_buffer[:n1])
        self.lookahead_buffer = self.lookahead_buffer[n1:]
        n2 = n - n1
        if n2 > 0:
            s += self.f.read(n2)
        return s

    def peek_char(self):
        c = self.get_char()
        if c:
            self.unget_char(c)
        return c

def skip_spaces(f):
    c = f.get_char()
    while c != None:
        if c.isspace():
            c = f.get_char()
        elif c == b'-':
          # May be line comment.
          if f.peek_char() == b'-':
            # Yes, line comment. Skip to end of line.
            while (c != b'\n' and c != None):
              c = f.get_char()
          else:
            break
        else:
          break
    if c:
        f.unget_char(c)

def parse_specific_char(f, expected):
    got = f.get_char()
    if got != expected:
        f.unget_char(got)
        raise ValueError
    return True

def parse_specific_string(f, s):
    # This funky mess is intended, and is caused by the fact that if `type(b) ==
    # bytes` then `type(b[0]) == int`, but we need to match each element with a
    # `bytes`, so therefore we make each character an array element
    b = s.encode('utf8')
    bs = [b[i:i+1] for i in range(len(b))]
    read = []
    try:
        for c in bs:
            parse_specific_char(f, c)
            read.append(c)
        return True
    except ValueError:
        for c in read[::-1]:
            f.unget_char(c)
        raise

def optional(p, *args):
    try:
        return p(*args)
    except ValueError:
        return None

def optional_specific_string(f, s):
    c = f.peek_char()
    # This funky mess is intended, and is caused by the fact that if `type(b) ==
    # bytes` then `type(b[0]) == int`, but we need to match each element with a
    # `bytes`, so therefore we make each character an array element
    b = s.encode('utf8')
    bs = [b[i:i+1] for i in range(len(b))]
    if c == bs[0]:
        return parse_specific_string(f, s)
    else:
        return False

def sepBy(p, sep, *args):
    elems = []
    x = optional(p, *args)
    if x != None:
        elems += [x]
        while optional(sep, *args) != None:
            x = p(*args)
            elems += [x]
    return elems

# Assumes '0x' has already been read
def parse_hex_int(f):
    s = b''
    c = f.get_char()
    while c != None:
        if c in b'01234556789ABCDEFabcdef':
            s += c
            c = f.get_char()
        elif c == b'_':
            c = f.get_char() # skip _
        else:
            f.unget_char(c)
            break
    return str(int(s, 16)).encode('utf8') # ugh

def parse_int(f):
    s = b''
    c = f.get_char()
    if c == b'0' and f.peek_char() in b'xX':
        c = f.get_char() # skip X
        return parse_hex_int(f)
    else:
        while c != None:
            if c.isdigit():
                s += c
                c = f.get_char()
            elif c == b'_':
                c = f.get_char() # skip _
            else:
                f.unget_char(c)
                break
        if len(s) == 0:
            raise ValueError
        return s

def parse_int_signed(f):
    s = b''
    c = f.get_char()

    if c == b'-' and f.peek_char().isdigit():
      return c + parse_int(f)
    else:
      if c != b'+':
          f.unget_char(c)
      return parse_int(f)

def read_str_comma(f):
    skip_spaces(f)
    parse_specific_char(f, b',')
    return b','

def read_str_int(f, s):
    skip_spaces(f)
    x = int(parse_int_signed(f))
    optional_specific_string(f, s)
    return x

def read_str_uint(f, s):
    skip_spaces(f)
    x = int(parse_int(f))
    optional_specific_string(f, s)
    return x

def read_str_i8(f):
    return np.int8(read_str_int(f, 'i8'))
def read_str_i16(f):
    return np.int16(read_str_int(f, 'i16'))
def read_str_i32(f):
    return np.int32(read_str_int(f, 'i32'))
def read_str_i64(f):
    return np.int64(read_str_int(f, 'i64'))

def read_str_u8(f):
    return np.uint8(read_str_int(f, 'u8'))
def read_str_u16(f):
    return np.uint16(read_str_int(f, 'u16'))
def read_str_u32(f):
    return np.uint32(read_str_int(f, 'u32'))
def read_str_u64(f):
    return np.uint64(read_str_int(f, 'u64'))

def read_char(f):
    skip_spaces(f)
    parse_specific_char(f, b'\'')
    c = f.get_char()
    parse_specific_char(f, b'\'')
    return c

def read_str_hex_float(f, sign):
    int_part = parse_hex_int(f)
    parse_specific_char(f, b'.')
    frac_part = parse_hex_int(f)
    parse_specific_char(f, b'p')
    exponent = parse_int(f)

    int_val = int(int_part, 16)
    frac_val = float(int(frac_part, 16)) / (16 ** len(frac_part))
    exp_val = int(exponent)

    total_val = (int_val + frac_val) * (2.0 ** exp_val)
    if sign == b'-':
        total_val = -1 * total_val

    return float(total_val)


def read_str_decimal(f):
    skip_spaces(f)
    c = f.get_char()
    if (c == b'-'):
      sign = b'-'
    else:
      f.unget_char(c)
      sign = b''

    # Check for hexadecimal float
    c = f.get_char()
    if (c == '0' and (f.peek_char() in ['x', 'X'])):
        f.get_char()
        return read_str_hex_float(f, sign)
    else:
        f.unget_char(c)

    bef = optional(parse_int, f)
    if bef == None:
        bef = b'0'
        parse_specific_char(f, b'.')
        aft = parse_int(f)
    elif optional(parse_specific_char, f, b'.'):
        aft = parse_int(f)
    else:
        aft = b'0'
    if (optional(parse_specific_char, f, b'E') or
        optional(parse_specific_char, f, b'e')):
        expt = parse_int_signed(f)
    else:
        expt = b'0'
    return float(sign + bef + b'.' + aft + b'E' + expt)

def read_str_f16(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f16.nan')
        return np.float32(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f16.inf')
            return np.float32(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f16.inf')
               return np.float32(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f16')
               return x

def read_str_f32(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f32.nan')
        return np.float32(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f32.inf')
            return np.float32(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f32.inf')
               return np.float32(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f32')
               return x

def read_str_f64(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f64.nan')
        return np.float64(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f64.inf')
            return np.float64(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f64.inf')
               return np.float64(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f64')
               return x

def read_str_bool(f):
    skip_spaces(f)
    if f.peek_char() == b't':
        parse_specific_string(f, 'true')
        return True
    elif f.peek_char() == b'f':
        parse_specific_string(f, 'false')
        return False
    else:
        raise ValueError

def read_str_empty_array(f, type_name, rank):
    parse_specific_string(f, 'empty')
    parse_specific_char(f, b'(')
    dims = []
    for i in range(rank):
        parse_specific_string(f, '[')
        dims += [int(parse_int(f))]
        parse_specific_string(f, ']')
    if np.product(dims) != 0:
        raise ValueError
    parse_specific_string(f, type_name)
    parse_specific_char(f, b')')

    return tuple(dims)

def read_str_array_elems(f, elem_reader, type_name, rank):
    skip_spaces(f)
    try:
        parse_specific_char(f, b'[')
    except ValueError:
        return read_str_empty_array(f, type_name, rank)
    else:
        xs = sepBy(elem_reader, read_str_comma, f)
        skip_spaces(f)
        parse_specific_char(f, b']')
        return xs

def read_str_array_helper(f, elem_reader, type_name, rank):
    def nested_row_reader(_):
        return read_str_array_helper(f, elem_reader, type_name, rank-1)
    if rank == 1:
        row_reader = elem_reader
    else:
        row_reader = nested_row_reader
    return read_str_array_elems(f, row_reader, type_name, rank)

def expected_array_dims(l, rank):
  if rank > 1:
      n = len(l)
      if n == 0:
          elem = []
      else:
          elem = l[0]
      return [n] + expected_array_dims(elem, rank-1)
  else:
      return [len(l)]

def verify_array_dims(l, dims):
    if dims[0] != len(l):
        raise ValueError
    if len(dims) > 1:
        for x in l:
            verify_array_dims(x, dims[1:])

def read_str_array(f, elem_reader, type_name, rank, bt):
    elems = read_str_array_helper(f, elem_reader, type_name, rank)
    if type(elems) == tuple:
        # Empty array
        return np.empty(elems, dtype=bt)
    else:
        dims = expected_array_dims(elems, rank)
        verify_array_dims(elems, dims)
        return np.array(elems, dtype=bt)

################################################################################

READ_BINARY_VERSION = 2

# struct format specified at
# https://docs.python.org/2/library/struct.html#format-characters

def mk_bin_scalar_reader(t):
    def bin_reader(f):
        fmt = FUTHARK_PRIMTYPES[t]['bin_format']
        size = FUTHARK_PRIMTYPES[t]['size']
        tf = FUTHARK_PRIMTYPES[t]['numpy_type']
        return tf(struct.unpack('<' + fmt, f.get_chars(size))[0])
    return bin_reader

read_bin_i8 = mk_bin_scalar_reader('i8')
read_bin_i16 = mk_bin_scalar_reader('i16')
read_bin_i32 = mk_bin_scalar_reader('i32')
read_bin_i64 = mk_bin_scalar_reader('i64')

read_bin_u8 = mk_bin_scalar_reader('u8')
read_bin_u16 = mk_bin_scalar_reader('u16')
read_bin_u32 = mk_bin_scalar_reader('u32')
read_bin_u64 = mk_bin_scalar_reader('u64')

read_bin_f16 = mk_bin_scalar_reader('f16')
read_bin_f32 = mk_bin_scalar_reader('f32')
read_bin_f64 = mk_bin_scalar_reader('f64')

read_bin_bool = mk_bin_scalar_reader('bool')

def read_is_binary(f):
    skip_spaces(f)
    c = f.get_char()
    if c == b'b':
        bin_version = read_bin_u8(f)
        if bin_version != READ_BINARY_VERSION:
            panic(1, "binary-input: File uses version %i, but I only understand version %i.\n",
                  bin_version, READ_BINARY_VERSION)
        return True
    else:
        f.unget_char(c)
        return False

FUTHARK_PRIMTYPES = {
    'i8':  {'binname' : b"  i8",
            'size' : 1,
            'bin_reader': read_bin_i8,
            'str_reader': read_str_i8,
            'bin_format': 'b',
            'numpy_type': np.int8 },

    'i16': {'binname' : b" i16",
            'size' : 2,
            'bin_reader': read_bin_i16,
            'str_reader': read_str_i16,
            'bin_format': 'h',
            'numpy_type': np.int16 },

    'i32': {'binname' : b" i32",
            'size' : 4,
            'bin_reader': read_bin_i32,
            'str_reader': read_str_i32,
            'bin_format': 'i',
            'numpy_type': np.int32 },

    'i64': {'binname' : b" i64",
            'size' : 8,
            'bin_reader': read_bin_i64,
            'str_reader': read_str_i64,
            'bin_format': 'q',
            'numpy_type': np.int64},

    'u8':  {'binname' : b"  u8",
            'size' : 1,
            'bin_reader': read_bin_u8,
            'str_reader': read_str_u8,
            'bin_format': 'B',
            'numpy_type': np.uint8 },

    'u16': {'binname' : b" u16",
            'size' : 2,
            'bin_reader': read_bin_u16,
            'str_reader': read_str_u16,
            'bin_format': 'H',
            'numpy_type': np.uint16 },

    'u32': {'binname' : b" u32",
            'size' : 4,
            'bin_reader': read_bin_u32,
            'str_reader': read_str_u32,
            'bin_format': 'I',
            'numpy_type': np.uint32 },

    'u64': {'binname' : b" u64",
            'size' : 8,
            'bin_reader': read_bin_u64,
            'str_reader': read_str_u64,
            'bin_format': 'Q',
            'numpy_type': np.uint64 },

    'f16': {'binname' : b" f16",
            'size' : 2,
            'bin_reader': read_bin_f16,
            'str_reader': read_str_f16,
            'bin_format': 'e',
            'numpy_type': np.float16 },

    'f32': {'binname' : b" f32",
            'size' : 4,
            'bin_reader': read_bin_f32,
            'str_reader': read_str_f32,
            'bin_format': 'f',
            'numpy_type': np.float32 },

    'f64': {'binname' : b" f64",
            'size' : 8,
            'bin_reader': read_bin_f64,
            'str_reader': read_str_f64,
            'bin_format': 'd',
            'numpy_type': np.float64 },

    'bool': {'binname' : b"bool",
             'size' : 1,
             'bin_reader': read_bin_bool,
             'str_reader': read_str_bool,
             'bin_format': 'b',
             'numpy_type': bool }
}

def read_bin_read_type(f):
    read_binname = f.get_chars(4)

    for (k,v) in FUTHARK_PRIMTYPES.items():
        if v['binname'] == read_binname:
            return k
    panic(1, "binary-input: Did not recognize the type '%s'.\n", read_binname)

def numpy_type_to_type_name(t):
    for (k,v) in FUTHARK_PRIMTYPES.items():
        if v['numpy_type'] == t:
            return k
    raise Exception('Unknown Numpy type: {}'.format(t))

def read_bin_ensure_scalar(f, expected_type):
  dims = read_bin_i8(f)

  if dims != 0:
      panic(1, "binary-input: Expected scalar (0 dimensions), but got array with %i dimensions.\n", dims)

  bin_type = read_bin_read_type(f)
  if bin_type != expected_type:
      panic(1, "binary-input: Expected scalar of type %s but got scalar of type %s.\n",
            expected_type, bin_type)

# ------------------------------------------------------------------------------
# General interface for reading Primitive Futhark Values
# ------------------------------------------------------------------------------

def read_scalar(f, ty):
    if read_is_binary(f):
        read_bin_ensure_scalar(f, ty)
        return FUTHARK_PRIMTYPES[ty]['bin_reader'](f)
    return FUTHARK_PRIMTYPES[ty]['str_reader'](f)

def read_array(f, expected_type, rank):
    if not read_is_binary(f):
        str_reader = FUTHARK_PRIMTYPES[expected_type]['str_reader']
        return read_str_array(f, str_reader, expected_type, rank,
                              FUTHARK_PRIMTYPES[expected_type]['numpy_type'])

    bin_rank = read_bin_u8(f)

    if bin_rank != rank:
        panic(1, "binary-input: Expected %i dimensions, but got array with %i dimensions.\n",
              rank, bin_rank)

    bin_type_enum = read_bin_read_type(f)
    if expected_type != bin_type_enum:
        panic(1, "binary-input: Expected %iD-array with element type '%s' but got %iD-array with element type '%s'.\n",
              rank, expected_type, bin_rank, bin_type_enum)

    shape = []
    elem_count = 1
    for i in range(rank):
        bin_size = read_bin_i64(f)
        elem_count *= bin_size
        shape.append(bin_size)

    bin_fmt = FUTHARK_PRIMTYPES[bin_type_enum]['bin_format']

    # We first read the expected number of types into a bytestring,
    # then use np.frombuffer.  This is because np.fromfile does not
    # work on things that are insufficiently file-like, like a network
    # stream.
    bytes = f.get_chars(elem_count * FUTHARK_PRIMTYPES[expected_type]['size'])
    arr = np.frombuffer(bytes, dtype=FUTHARK_PRIMTYPES[bin_type_enum]['numpy_type'])
    arr.shape = shape

    return arr

if sys.version_info >= (3,0):
    input_reader = ReaderInput(sys.stdin.buffer)
else:
    input_reader = ReaderInput(sys.stdin)

import re

def read_value(type_desc, reader=input_reader):
    """Read a value of the given type.  The type is a string
representation of the Futhark type."""
    m = re.match(r'((?:\[\])*)([a-z0-9]+)$', type_desc)
    if m:
        dims = int(len(m.group(1))/2)
        basetype = m.group(2)
    assert m and basetype in FUTHARK_PRIMTYPES, "Unknown type: {}".format(type_desc)
    if dims > 0:
        return read_array(reader, basetype, dims)
    else:
        return read_scalar(reader, basetype)

def end_of_input(entry, f=input_reader):
    skip_spaces(f)
    if f.get_char() != b'':
        panic(1, "Expected EOF on stdin after reading input for \"%s\".", entry)

def write_value_text(v, out=sys.stdout):
    if type(v) == np.uint8:
        out.write("%uu8" % v)
    elif type(v) == np.uint16:
        out.write("%uu16" % v)
    elif type(v) == np.uint32:
        out.write("%uu32" % v)
    elif type(v) == np.uint64:
        out.write("%uu64" % v)
    elif type(v) == np.int8:
        out.write("%di8" % v)
    elif type(v) == np.int16:
        out.write("%di16" % v)
    elif type(v) == np.int32:
        out.write("%di32" % v)
    elif type(v) == np.int64:
        out.write("%di64" % v)
    elif type(v) in [bool, np.bool_]:
        if v:
            out.write("true")
        else:
            out.write("false")
    elif type(v) == np.float16:
        if np.isnan(v):
            out.write('f16.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f16.inf')
            else:
                out.write('-f16.inf')
        else:
            out.write("%.6ff16" % v)
    elif type(v) == np.float32:
        if np.isnan(v):
            out.write('f32.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f32.inf')
            else:
                out.write('-f32.inf')
        else:
            out.write("%.6ff32" % v)
    elif type(v) == np.float64:
        if np.isnan(v):
            out.write('f64.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f64.inf')
            else:
                out.write('-f64.inf')
        else:
            out.write("%.6ff64" % v)
    elif type(v) == np.ndarray:
        if np.product(v.shape) == 0:
            tname = numpy_type_to_type_name(v.dtype)
            out.write('empty({}{})'.format(''.join(['[{}]'.format(d)
                                                    for d in v.shape]), tname))
        else:
            first = True
            out.write('[')
            for x in v:
                if not first: out.write(', ')
                first = False
                write_value(x, out=out)
            out.write(']')
    else:
        raise Exception("Cannot print value of type {}: {}".format(type(v), v))

type_strs = { np.dtype('int8'): b'  i8',
              np.dtype('int16'): b' i16',
              np.dtype('int32'): b' i32',
              np.dtype('int64'): b' i64',
              np.dtype('uint8'): b'  u8',
              np.dtype('uint16'): b' u16',
              np.dtype('uint32'): b' u32',
              np.dtype('uint64'): b' u64',
              np.dtype('float16'): b' f16',
              np.dtype('float32'): b' f32',
              np.dtype('float64'): b' f64',
              np.dtype('bool'): b'bool'}

def construct_binary_value(v):
    t = v.dtype
    shape = v.shape

    elems = 1
    for d in shape:
        elems *= d

    num_bytes = 1 + 1 + 1 + 4 + len(shape) * 8 + elems * t.itemsize
    bytes = bytearray(num_bytes)
    bytes[0] = np.int8(ord('b'))
    bytes[1] = 2
    bytes[2] = np.int8(len(shape))
    bytes[3:7] = type_strs[t]

    for i in range(len(shape)):
        bytes[7+i*8:7+(i+1)*8] = np.int64(shape[i]).tobytes()

    bytes[7+len(shape)*8:] = np.ascontiguousarray(v).tobytes()

    return bytes

def write_value_binary(v, out=sys.stdout):
    if sys.version_info >= (3,0):
        out = out.buffer
    out.write(construct_binary_value(v))

def write_value(v, out=sys.stdout, binary=False):
    if binary:
        return write_value_binary(v, out=out)
    else:
        return write_value_text(v, out=out)

# End of values.py.
# Start of memory.py.

import ctypes as ct

def addressOffset(x, offset, bt):
  return ct.cast(ct.addressof(x.contents)+int(offset), ct.POINTER(bt))

def allocateMem(size):
  return ct.cast((ct.c_byte * max(0,size))(), ct.POINTER(ct.c_byte))

# Copy an array if its is not-None.  This is important for treating
# Numpy arrays as flat memory, but has some overhead.
def normaliseArray(x):
  if (x.base is x) or (x.base is None):
    return x
  else:
    return x.copy()

def unwrapArray(x):
  return normaliseArray(x).ctypes.data_as(ct.POINTER(ct.c_byte))

def createArray(x, shape, t):
  # HACK: np.ctypeslib.as_array may fail if the shape contains zeroes,
  # for some reason.
  if any(map(lambda x: x == 0, shape)):
      return np.ndarray(shape, dtype=t)
  else:
      return np.ctypeslib.as_array(x, shape=shape).view(t)

def indexArray(x, offset, bt):
  return addressOffset(x, offset*ct.sizeof(bt), bt)[0]

def writeScalarArray(x, offset, v):
  ct.memmove(ct.addressof(x.contents)+int(offset)*ct.sizeof(v), ct.addressof(v), ct.sizeof(v))

# An opaque Futhark value.
class opaque(object):
  def __init__(self, desc, *payload):
    self.data = payload
    self.desc = desc

  def __repr__(self):
    return "<opaque Futhark value of type {}>".format(self.desc)

# End of memory.py.
# Start of panic.py.

def panic(exitcode, fmt, *args):
    sys.stderr.write('%s: ' % sys.argv[0])
    sys.stderr.write(fmt % args)
    sys.stderr.write('\n')
    sys.exit(exitcode)

# End of panic.py.
# Start of tuning.py

def read_tuning_file(kvs, f):
    for line in f.read().splitlines():
        size, value = line.split('=')
        kvs[size] = int(value)
    return kvs

# End of tuning.py.
# Start of scalar.py.

import numpy as np
import math
import struct

def intlit(t, x):
  if t == np.int8:
    return np.int8(x)
  elif t == np.int16:
    return np.int16(x)
  elif t == np.int32:
    return np.int32(x)
  else:
    return np.int64(x)

def signed(x):
  if type(x) == np.uint8:
    return np.int8(x)
  elif type(x) == np.uint16:
    return np.int16(x)
  elif type(x) == np.uint32:
    return np.int32(x)
  else:
    return np.int64(x)

def unsigned(x):
  if type(x) == np.int8:
    return np.uint8(x)
  elif type(x) == np.int16:
    return np.uint16(x)
  elif type(x) == np.int32:
    return np.uint32(x)
  else:
    return np.uint64(x)

def shlN(x,y):
  return x << y

def ashrN(x,y):
  return x >> y

# Python is so slow that we just make all the unsafe operations safe,
# always.

def sdivN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return x // y

def sdiv_upN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return (x+y-intlit(type(x), 1)) // y

def smodN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return x % y

def udivN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed(unsigned(x) // unsigned(y))

def udiv_upN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed((unsigned(x)+unsigned(y)-unsigned(intlit(type(x),1))) // unsigned(y))

def umodN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed(unsigned(x) % unsigned(y))

def squotN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return np.floor_divide(np.abs(x), np.abs(y)) * np.sign(x) * np.sign(y)

def sremN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return np.remainder(np.abs(x), np.abs(y)) * np.sign(x)

def sminN(x,y):
  return min(x,y)

def smaxN(x,y):
  return max(x,y)

def uminN(x,y):
  return signed(min(unsigned(x),unsigned(y)))

def umaxN(x,y):
  return signed(max(unsigned(x),unsigned(y)))

def fminN(x,y):
  return np.fmin(x,y)

def fmaxN(x,y):
  return np.fmax(x,y)

def powN(x,y):
  return x ** y

def fpowN(x,y):
  return x ** y

def sleN(x,y):
  return x <= y

def sltN(x,y):
  return x < y

def uleN(x,y):
  return unsigned(x) <= unsigned(y)

def ultN(x,y):
  return unsigned(x) < unsigned(y)

def lshr8(x,y):
  return np.int8(np.uint8(x) >> np.uint8(y))

def lshr16(x,y):
  return np.int16(np.uint16(x) >> np.uint16(y))

def lshr32(x,y):
  return np.int32(np.uint32(x) >> np.uint32(y))

def lshr64(x,y):
  return np.int64(np.uint64(x) >> np.uint64(y))

def sext_T_i8(x):
  return np.int8(x)

def sext_T_i16(x):
  return np.int16(x)

def sext_T_i32(x):
  return np.int32(x)

def sext_T_i64(x):
  return np.int64(x)

def itob_T_bool(x):
  return bool(x)

def btoi_bool_i8(x):
  return np.int8(x)

def btoi_bool_i16(x):
  return np.int16(x)

def btoi_bool_i32(x):
  return np.int32(x)

def btoi_bool_i64(x):
  return np.int64(x)

def ftob_T_bool(x):
  return bool(x)

def btof_bool_f16(x):
  return np.float16(x)

def btof_bool_f32(x):
  return np.float32(x)

def btof_bool_f64(x):
  return np.float64(x)

def zext_i8_i8(x):
  return np.int8(np.uint8(x))

def zext_i8_i16(x):
  return np.int16(np.uint8(x))

def zext_i8_i32(x):
  return np.int32(np.uint8(x))

def zext_i8_i64(x):
  return np.int64(np.uint8(x))

def zext_i16_i8(x):
  return np.int8(np.uint16(x))

def zext_i16_i16(x):
  return np.int16(np.uint16(x))

def zext_i16_i32(x):
  return np.int32(np.uint16(x))

def zext_i16_i64(x):
  return np.int64(np.uint16(x))

def zext_i32_i8(x):
  return np.int8(np.uint32(x))

def zext_i32_i16(x):
  return np.int16(np.uint32(x))

def zext_i32_i32(x):
  return np.int32(np.uint32(x))

def zext_i32_i64(x):
  return np.int64(np.uint32(x))

def zext_i64_i8(x):
  return np.int8(np.uint64(x))

def zext_i64_i16(x):
  return np.int16(np.uint64(x))

def zext_i64_i32(x):
  return np.int32(np.uint64(x))

def zext_i64_i64(x):
  return np.int64(np.uint64(x))

sdiv8 = sdiv16 = sdiv32 = sdiv64 = sdivN
sdiv_up8 = sdiv1_up6 = sdiv_up32 = sdiv_up64 = sdiv_upN
sdiv_safe8 = sdiv1_safe6 = sdiv_safe32 = sdiv_safe64 = sdivN
sdiv_up_safe8 = sdiv_up1_safe6 = sdiv_up_safe32 = sdiv_up_safe64 = sdiv_upN
smod8 = smod16 = smod32 = smod64 = smodN
smod_safe8 = smod_safe16 = smod_safe32 = smod_safe64 = smodN
udiv8 = udiv16 = udiv32 = udiv64 = udivN
udiv_up8 = udiv_up16 = udiv_up32 = udiv_up64 = udivN
udiv_safe8 = udiv_safe16 = udiv_safe32 = udiv_safe64 = udiv_upN
udiv_up_safe8 = udiv_up_safe16 = udiv_up_safe32 = udiv_up_safe64 = udiv_upN
umod8 = umod16 = umod32 = umod64 = umodN
umod_safe8 = umod_safe16 = umod_safe32 = umod_safe64 = umodN
squot8 = squot16 = squot32 = squot64 = squotN
squot_safe8 = squot_safe16 = squot_safe32 = squot_safe64 = squotN
srem8 = srem16 = srem32 = srem64 = sremN
srem_safe8 = srem_safe16 = srem_safe32 = srem_safe64 = sremN

shl8 = shl16 = shl32 = shl64 = shlN
ashr8 = ashr16 = ashr32 = ashr64 = ashrN
smax8 = smax16 = smax32 = smax64 = smaxN
smin8 = smin16 = smin32 = smin64 = sminN
umax8 = umax16 = umax32 = umax64 = umaxN
umin8 = umin16 = umin32 = umin64 = uminN
pow8 = pow16 = pow32 = pow64 = powN
fpow16 = fpow32 = fpow64 = fpowN
fmax16 = fmax32 = fmax64 = fmaxN
fmin16 = fmin32 = fmin64 = fminN
sle8 = sle16 = sle32 = sle64 = sleN
slt8 = slt16 = slt32 = slt64 = sltN
ule8 = ule16 = ule32 = ule64 = uleN
ult8 = ult16 = ult32 = ult64 = ultN
sext_i8_i8 = sext_i16_i8 = sext_i32_i8 = sext_i64_i8 = sext_T_i8
sext_i8_i16 = sext_i16_i16 = sext_i32_i16 = sext_i64_i16 = sext_T_i16
sext_i8_i32 = sext_i16_i32 = sext_i32_i32 = sext_i64_i32 = sext_T_i32
sext_i8_i64 = sext_i16_i64 = sext_i32_i64 = sext_i64_i64 = sext_T_i64
itob_i8_bool = itob_i16_bool = itob_i32_bool = itob_i64_bool = itob_T_bool
ftob_f16_bool = ftob_f32_bool = ftob_f64_bool = ftob_T_bool

def clz_T(x):
  n = np.int32(0)
  bits = x.itemsize * 8
  for i in range(bits):
    if x < 0:
      break
    n += 1
    x <<= np.int8(1)
  return n

def ctz_T(x):
  n = np.int32(0)
  bits = x.itemsize * 8
  for i in range(bits):
    if (x & 1) == 1:
      break
    n += 1
    x >>= np.int8(1)
  return n

def popc_T(x):
  c = np.int32(0)
  while x != 0:
    x &= x - np.int8(1)
    c += np.int8(1)
  return c

futhark_popc8 = futhark_popc16 = futhark_popc32 = futhark_popc64 = popc_T
futhark_clzz8 = futhark_clzz16 = futhark_clzz32 = futhark_clzz64 = clz_T
futhark_ctzz8 = futhark_ctzz16 = futhark_ctzz32 = futhark_ctzz64 = ctz_T

def ssignum(x):
  return np.sign(x)

def usignum(x):
  if x < 0:
    return ssignum(-x)
  else:
    return ssignum(x)

def sitofp_T_f32(x):
  return np.float32(x)
sitofp_i8_f32 = sitofp_i16_f32 = sitofp_i32_f32 = sitofp_i64_f32 = sitofp_T_f32

def sitofp_T_f64(x):
  return np.float64(x)
sitofp_i8_f64 = sitofp_i16_f64 = sitofp_i32_f64 = sitofp_i64_f64 = sitofp_T_f64

def uitofp_T_f32(x):
  return np.float32(unsigned(x))
uitofp_i8_f32 = uitofp_i16_f32 = uitofp_i32_f32 = uitofp_i64_f32 = uitofp_T_f32

def uitofp_T_f64(x):
  return np.float64(unsigned(x))
uitofp_i8_f64 = uitofp_i16_f64 = uitofp_i32_f64 = uitofp_i64_f64 = uitofp_T_f64

def fptosi_T_i8(x):
  if np.isnan(x) or np.isinf(x):
    return np.int8(0)
  else:
    return np.int8(np.trunc(x))
fptosi_f16_i8 = fptosi_f32_i8 = fptosi_f64_i8 = fptosi_T_i8

def fptosi_T_i16(x):
  if np.isnan(x) or np.isinf(x):
    return np.int16(0)
  else:
    return np.int16(np.trunc(x))
fptosi_f16_i16 = fptosi_f32_i16 = fptosi_f64_i16 = fptosi_T_i16

def fptosi_T_i32(x):
  if np.isnan(x) or np.isinf(x):
    return np.int32(0)
  else:
    return np.int32(np.trunc(x))
fptosi_f16_i32 = fptosi_f32_i32 = fptosi_f64_i32 = fptosi_T_i32

def fptosi_T_i64(x):
  if np.isnan(x) or np.isinf(x):
    return np.int64(0)
  else:
    return np.int64(np.trunc(x))
fptosi_f16_i64 = fptosi_f32_i64 = fptosi_f64_i64 = fptosi_T_i64

def fptoui_T_i8(x):
  if np.isnan(x) or np.isinf(x):
    return np.int8(0)
  else:
    return np.int8(np.trunc(x))
fptoui_f16_i8 = fptoui_f32_i8 = fptoui_f64_i8 = fptoui_T_i8

def fptoui_T_i16(x):
  if np.isnan(x) or np.isinf(x):
    return np.int16(0)
  else:
    return np.int16(np.trunc(x))
fptoui_f16_i16 = fptoui_f32_i16 = fptoui_f64_i16 = fptoui_T_i16

def fptoui_T_i32(x):
  if np.isnan(x) or np.isinf(x):
    return np.int32(0)
  else:
    return np.int32(np.trunc(x))
fptoui_f16_i32 = fptoui_f32_i32 = fptoui_f64_i32 = fptoui_T_i32

def fptoui_T_i64(x):
  if np.isnan(x) or np.isinf(x):
    return np.int64(0)
  else:
    return np.int64(np.trunc(x))
fptoui_f16_i64 = fptoui_f32_i64 = fptoui_f64_i64 = fptoui_T_i64

def fpconv_f16_f32(x):
  return np.float32(x)

def fpconv_f16_f64(x):
  return np.float64(x)

def fpconv_f32_f16(x):
  return np.float16(x)

def fpconv_f32_f64(x):
  return np.float64(x)

def fpconv_f64_f16(x):
  return np.float16(x)

def fpconv_f64_f32(x):
  return np.float32(x)

def futhark_mul_hi8(a, b):
  a = np.uint64(np.uint8(a))
  b = np.uint64(np.uint8(b))
  return np.int8((a*b) >> np.uint64(8))

def futhark_mul_hi16(a, b):
  a = np.uint64(np.uint16(a))
  b = np.uint64(np.uint16(b))
  return np.int16((a*b) >> np.uint64(16))

def futhark_mul_hi32(a, b):
  a = np.uint64(np.uint32(a))
  b = np.uint64(np.uint32(b))
  return np.int32((a*b) >> np.uint64(32))

# This one is done with arbitrary-precision integers.
def futhark_mul_hi64(a, b):
  a = int(np.uint64(a))
  b = int(np.uint64(b))
  return np.int64(np.uint64(a*b >> 64))

def futhark_mad_hi8(a, b, c):
  return futhark_mul_hi8(a,b) + c

def futhark_mad_hi16(a, b, c):
  return futhark_mul_hi16(a,b) + c

def futhark_mad_hi32(a, b, c):
  return futhark_mul_hi32(a,b) + c

def futhark_mad_hi64(a, b, c):
  return futhark_mul_hi64(a,b) + c

def futhark_log64(x):
  return np.float64(np.log(x))

def futhark_log2_64(x):
  return np.float64(np.log2(x))

def futhark_log10_64(x):
  return np.float64(np.log10(x))

def futhark_sqrt64(x):
  return np.sqrt(x)

def futhark_cbrt64(x):
  return np.cbrt(x)

def futhark_exp64(x):
  return np.exp(x)

def futhark_cos64(x):
  return np.cos(x)

def futhark_sin64(x):
  return np.sin(x)

def futhark_tan64(x):
  return np.tan(x)

def futhark_acos64(x):
  return np.arccos(x)

def futhark_asin64(x):
  return np.arcsin(x)

def futhark_atan64(x):
  return np.arctan(x)

def futhark_cosh64(x):
  return np.cosh(x)

def futhark_sinh64(x):
  return np.sinh(x)

def futhark_tanh64(x):
  return np.tanh(x)

def futhark_acosh64(x):
  return np.arccosh(x)

def futhark_asinh64(x):
  return np.arcsinh(x)

def futhark_atanh64(x):
  return np.arctanh(x)

def futhark_atan2_64(x, y):
  return np.arctan2(x, y)

def futhark_hypot64(x, y):
  return np.hypot(x, y)

def futhark_gamma64(x):
  return np.float64(math.gamma(x))

def futhark_lgamma64(x):
  return np.float64(math.lgamma(x))

def futhark_erf64(x):
  return np.float64(math.erf(x))

def futhark_erfc64(x):
  return np.float64(math.erfc(x))

def futhark_round64(x):
  return np.round(x)

def futhark_ceil64(x):
  return np.ceil(x)

def futhark_floor64(x):
  return np.floor(x)

def futhark_nextafter64(x, y):
  return np.nextafter(x, y)

def futhark_isnan64(x):
  return np.isnan(x)

def futhark_isinf64(x):
  return np.isinf(x)

def futhark_to_bits64(x):
  s = struct.pack('>d', x)
  return np.int64(struct.unpack('>q', s)[0])

def futhark_from_bits64(x):
  s = struct.pack('>q', x)
  return np.float64(struct.unpack('>d', s)[0])

def futhark_log32(x):
  return np.float32(np.log(x))

def futhark_log2_32(x):
  return np.float32(np.log2(x))

def futhark_log10_32(x):
  return np.float32(np.log10(x))

def futhark_sqrt32(x):
  return np.float32(np.sqrt(x))

def futhark_cbrt32(x):
  return np.float32(np.cbrt(x))

def futhark_exp32(x):
  return np.exp(x)

def futhark_cos32(x):
  return np.cos(x)

def futhark_sin32(x):
  return np.sin(x)

def futhark_tan32(x):
  return np.tan(x)

def futhark_acos32(x):
  return np.arccos(x)

def futhark_asin32(x):
  return np.arcsin(x)

def futhark_atan32(x):
  return np.arctan(x)

def futhark_cosh32(x):
  return np.cosh(x)

def futhark_sinh32(x):
  return np.sinh(x)

def futhark_tanh32(x):
  return np.tanh(x)

def futhark_acosh32(x):
  return np.arccosh(x)

def futhark_asinh32(x):
  return np.arcsinh(x)

def futhark_atanh32(x):
  return np.arctanh(x)

def futhark_atan2_32(x, y):
  return np.arctan2(x, y)

def futhark_hypot32(x, y):
  return np.hypot(x, y)

def futhark_gamma32(x):
  return np.float32(math.gamma(x))

def futhark_lgamma32(x):
  return np.float32(math.lgamma(x))

def futhark_erf32(x):
  return np.float32(math.erf(x))

def futhark_erfc32(x):
  return np.float32(math.erfc(x))

def futhark_round32(x):
  return np.round(x)

def futhark_ceil32(x):
  return np.ceil(x)

def futhark_floor32(x):
  return np.floor(x)

def futhark_nextafter32(x, y):
  return np.nextafter(x, y)

def futhark_isnan32(x):
  return np.isnan(x)

def futhark_isinf32(x):
  return np.isinf(x)

def futhark_to_bits32(x):
  s = struct.pack('>f', x)
  return np.int32(struct.unpack('>l', s)[0])

def futhark_from_bits32(x):
  s = struct.pack('>l', x)
  return np.float32(struct.unpack('>f', s)[0])

def futhark_log16(x):
  return np.float16(np.log(x))

def futhark_log2_16(x):
  return np.float16(np.log2(x))

def futhark_log10_16(x):
  return np.float16(np.log10(x))

def futhark_sqrt16(x):
  return np.float16(np.sqrt(x))

def futhark_cbrt16(x):
  return np.float16(np.cbrt(x))

def futhark_exp16(x):
  return np.exp(x)

def futhark_cos16(x):
  return np.cos(x)

def futhark_sin16(x):
  return np.sin(x)

def futhark_tan16(x):
  return np.tan(x)

def futhark_acos16(x):
  return np.arccos(x)

def futhark_asin16(x):
  return np.arcsin(x)

def futhark_atan16(x):
  return np.arctan(x)

def futhark_cosh16(x):
  return np.cosh(x)

def futhark_sinh16(x):
  return np.sinh(x)

def futhark_tanh16(x):
  return np.tanh(x)

def futhark_acosh16(x):
  return np.arccosh(x)

def futhark_asinh16(x):
  return np.arcsinh(x)

def futhark_atanh16(x):
  return np.arctanh(x)

def futhark_atan2_16(x, y):
  return np.arctan2(x, y)

def futhark_hypot16(x, y):
  return np.hypot(x, y)

def futhark_gamma16(x):
  return np.float16(math.gamma(x))

def futhark_lgamma16(x):
  return np.float16(math.lgamma(x))

def futhark_erf16(x):
  return np.float16(math.erf(x))

def futhark_erfc16(x):
  return np.float16(math.erfc(x))

def futhark_round16(x):
  return np.round(x)

def futhark_ceil16(x):
  return np.ceil(x)

def futhark_floor16(x):
  return np.floor(x)

def futhark_nextafter16(x, y):
  return np.nextafter(x, y)

def futhark_isnan16(x):
  return np.isnan(x)

def futhark_isinf16(x):
  return np.isinf(x)

def futhark_to_bits16(x):
  s = struct.pack('>e', x)
  return np.int16(struct.unpack('>H', s)[0])

def futhark_from_bits16(x):
  s = struct.pack('>H', np.uint16(x))
  return np.float16(struct.unpack('>e', s)[0])

def futhark_lerp16(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_lerp32(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_lerp64(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_mad16(a, b, c):
  return a * b + c

def futhark_mad32(a, b, c):
  return a * b + c

def futhark_mad64(a, b, c):
  return a * b + c

def futhark_fma16(a, b, c):
  return a * b + c

def futhark_fma32(a, b, c):
  return a * b + c

def futhark_fma64(a, b, c):
  return a * b + c

# End of scalar.py.
# Start of server.py

import sys
import time
import shlex # For string splitting

class Server:
    def __init__(self, ctx):
        self._ctx = ctx
        self._vars = {}

    class Failure(BaseException):
        def __init__(self, msg):
            self.msg = msg

    def _get_arg(self, args, i):
        if i < len(args):
            return args[i]
        else:
            raise self.Failure('Insufficient command args')

    def _get_entry_point(self, entry):
        if entry in self._ctx.entry_points:
            return self._ctx.entry_points[entry]
        else:
            raise self.Failure('Unknown entry point: %s' % entry)

    def _check_var(self, vname):
        if not vname in self._vars:
            raise self.Failure('Unknown variable: %s' % vname)

    def _check_new_var(self, vname):
        if vname in self._vars:
            raise self.Failure('Variable already exists: %s' % vname)

    def _get_var(self, vname):
        self._check_var(vname)
        return self._vars[vname]

    def _cmd_inputs(self, args):
        entry = self._get_arg(args, 0)
        for t in self._get_entry_point(entry)[0]:
            print(t)

    def _cmd_outputs(self, args):
        entry = self._get_arg(args, 0)
        for t in self._get_entry_point(entry)[1]:
            print(t)

    def _cmd_dummy(self, args):
        pass

    def _cmd_free(self, args):
        for vname in args:
            self._check_var(vname)
            del self._vars[vname]

    def _cmd_rename(self, args):
        oldname = self._get_arg(args, 0)
        newname = self._get_arg(args, 1)
        self._check_var(oldname)
        self._check_new_var(newname)
        self._vars[newname] = self._vars[oldname]
        del self._vars[oldname]

    def _cmd_call(self, args):
        entry = self._get_entry_point(self._get_arg(args, 0))
        num_ins = len(entry[0])
        num_outs = len(entry[1])
        exp_len = 1 + num_outs + num_ins

        if len(args) != exp_len:
            raise self.Failure('Invalid argument count, expected %d' % exp_len)

        out_vnames = args[1:num_outs+1]

        for out_vname in out_vnames:
            self._check_new_var(out_vname)

        in_vnames = args[1+num_outs:]
        ins = [ self._get_var(in_vname) for in_vname in in_vnames ]

        try:
            (runtime, vals) = getattr(self._ctx, args[0])(*ins)
        except Exception as e:
            raise self.Failure(str(e))

        print('runtime: %d' % runtime)

        if num_outs == 1:
            self._vars[out_vnames[0]] = vals
        else:
            for (out_vname, val) in zip(out_vnames, vals):
                self._vars[out_vname] = val

    def _store_val(self, f, value):
        # In case we are using the PyOpenCL backend, we first
        # need to convert OpenCL arrays to ordinary NumPy
        # arrays.  We do this in a nasty way.
        if isinstance(value, opaque):
            for component in value.data:
                self._store_val(f, component)
        elif isinstance(value, np.number) or isinstance(value, bool) or isinstance(value, np.bool_) or isinstance(value, np.ndarray):
            # Ordinary NumPy value.
            f.write(construct_binary_value(value))
        else:
            # Assuming PyOpenCL array.
            f.write(construct_binary_value(value.get()))

    def _cmd_store(self, args):
        fname = self._get_arg(args, 0)

        with open(fname, 'wb') as f:
            for i in range(1, len(args)):
                self._store_val(f, self._get_var(args[i]))

    def _restore_val(self, reader, typename):
        if typename in self._ctx.opaques:
            vs = []
            for t in self._ctx.opaques[typename]:
                vs += [read_value(t, reader)]
            return opaque(typename, *vs)
        else:
            return read_value(typename, reader)

    def _cmd_restore(self, args):
        if len(args) % 2 == 0:
            raise self.Failure('Invalid argument count')

        fname = args[0]
        args = args[1:]

        with open(fname, 'rb') as f:
            reader = ReaderInput(f)
            while args != []:
                vname = args[0]
                typename = args[1]
                args = args[2:]

                if vname in self._vars:
                    raise self.Failure('Variable already exists: %s' % vname)

                try:
                    self._vars[vname] = self._restore_val(reader, typename)
                except ValueError:
                    raise self.Failure('Failed to restore variable %s.\n'
                                       'Possibly malformed data in %s.\n'
                                       % (vname, fname))

            skip_spaces(reader)
            if reader.get_char() != b'':
                raise self.Failure('Expected EOF after reading values')

    def _cmd_types(self, args):
        for k in self._ctx.opaques.keys():
            print(k)

    def _cmd_entry_points(self, args):
        for k in self._ctx.entry_points.keys():
            print(k)

    _commands = { 'inputs': _cmd_inputs,
                  'outputs': _cmd_outputs,
                  'call': _cmd_call,
                  'restore': _cmd_restore,
                  'store': _cmd_store,
                  'free': _cmd_free,
                  'rename': _cmd_rename,
                  'clear': _cmd_dummy,
                  'pause_profiling': _cmd_dummy,
                  'unpause_profiling': _cmd_dummy,
                  'report': _cmd_dummy,
                  'types': _cmd_types,
                  'entry_points': _cmd_entry_points,
                 }

    def _process_line(self, line):
        words = shlex.split(line)
        if words == []:
            raise self.Failure('Empty line')
        else:
            cmd = words[0]
            args = words[1:]
            if cmd in self._commands:
                self._commands[cmd](self, args)
            else:
                raise self.Failure('Unknown command: %s' % cmd)

    def run(self):
        while True:
            print('%%% OK', flush=True)
            line = sys.stdin.readline()
            if line == '':
                return
            try:
                self._process_line(line)
            except self.Failure as e:
                print('%%% FAILURE')
                print(e.msg)

# End of server.py
class mean_shift:
  entry_points = {"cluster_2D": (["[][]f32", "[]f32"], ["[][]f32", "[]i64"]), "cluster_5D": (["[][]f32", "[]f32"], ["[][]f32", "[]i64"])}
  opaques = {}
  def __init__(self, build_options=build_options, command_queue=None, interactive=False, platform_pref=preferred_platform, device_pref=preferred_device, default_group_size=default_group_size, default_num_groups=default_num_groups, default_tile_size=default_tile_size, default_reg_tile_size=default_reg_tile_size, default_threshold=default_threshold, sizes=sizes):
    size_heuristics=[("NVIDIA CUDA", cl.device_type.GPU, "lockstep_width", lambda device: np.int32(32)), ("AMD Accelerated Parallel Processing", cl.device_type.GPU, "lockstep_width", lambda device: np.int32(32)), ("", cl.device_type.GPU, "lockstep_width", lambda device: np.int32(1)), ("", cl.device_type.GPU, "num_groups", lambda device: (np.int32(4) * device.get_info(getattr(cl.device_info, "MAX_COMPUTE_UNITS")))), ("", cl.device_type.GPU, "group_size", lambda device: np.int32(256)), ("", cl.device_type.GPU, "tile_size", lambda device: np.int32(16)), ("", cl.device_type.GPU, "reg_tile_size", lambda device: np.int32(4)), ("", cl.device_type.GPU, "threshold", lambda device: np.int32(32768)), ("", cl.device_type.CPU, "lockstep_width", lambda device: np.int32(1)), ("", cl.device_type.CPU, "num_groups", lambda device: device.get_info(getattr(cl.device_info, "MAX_COMPUTE_UNITS"))), ("", cl.device_type.CPU, "group_size", lambda device: np.int32(32)), ("", cl.device_type.CPU, "tile_size", lambda device: np.int32(4)), ("", cl.device_type.CPU, "reg_tile_size", lambda device: np.int32(1)), ("", cl.device_type.CPU, "threshold", lambda device: device.get_info(getattr(cl.device_info, "MAX_COMPUTE_UNITS")))]
    self.global_failure_args_max = 0
    self.failure_msgs=[]
    program = initialise_opencl_object(self,
                                       program_src=fut_opencl_src,
                                       build_options=build_options,
                                       command_queue=command_queue,
                                       interactive=interactive,
                                       platform_pref=platform_pref,
                                       device_pref=device_pref,
                                       default_group_size=default_group_size,
                                       default_num_groups=default_num_groups,
                                       default_tile_size=default_tile_size,
                                       default_reg_tile_size=default_reg_tile_size,
                                       default_threshold=default_threshold,
                                       size_heuristics=size_heuristics,
                                       required_types=["i32", "i64", "f32", "bool"],
                                       user_sizes=sizes,
                                       all_sizes={"cluster_2D.segmap_group_size_22910": {"class": "group_size", "value": None}, "cluster_2D.segmap_group_size_23027": {"class": "group_size", "value": None}, "cluster_2D.segmap_group_size_23035": {"class": "group_size", "value": None}, "cluster_2D.segmap_group_size_23158": {"class": "group_size", "value": None}, "cluster_2D.segmap_num_groups_23160": {"class": "num_groups", "value": None}, "cluster_2D.segred_group_size_23094": {"class": "group_size", "value": None}, "cluster_2D.segred_num_groups_23096": {"class": "num_groups", "value": None}, "cluster_2D.segscan_group_size_23017": {"class": "group_size", "value": None}, "cluster_2D.segscan_num_groups_23019": {"class": "num_groups", "value": None}, "cluster_2D.suff_intra_par_0": {"class": "threshold(32, )", "value": 32}, "cluster_2D.suff_outer_par_1": {"class": "threshold(def, )", "value": None}, "cluster_5D.segmap_group_size_23331": {"class": "group_size", "value": None}, "cluster_5D.segmap_group_size_23562": {"class": "group_size", "value": None}, "cluster_5D.segmap_group_size_23570": {"class": "group_size", "value": None}, "cluster_5D.segmap_group_size_23765": {"class": "group_size", "value": None}, "cluster_5D.segmap_num_groups_23767": {"class": "num_groups", "value": None}, "cluster_5D.segred_group_size_23665": {"class": "group_size", "value": None}, "cluster_5D.segred_num_groups_23667": {"class": "num_groups", "value": None}, "cluster_5D.segscan_group_size_23552": {"class": "group_size", "value": None}, "cluster_5D.segscan_num_groups_23554": {"class": "num_groups", "value": None}, "cluster_5D.suff_intra_par_0": {"class": "threshold(32, )", "value": 32}, "cluster_5D.suff_outer_par_1": {"class": "threshold(def, )", "value": None}})
    self.cluster_2Dzigpuseq_24517_var = program.cluster_2Dzigpuseq_24517
    self.cluster_2Dziscan_stage1_23023_var = program.cluster_2Dziscan_stage1_23023
    self.cluster_2Dziscan_stage2_23023_var = program.cluster_2Dziscan_stage2_23023
    self.cluster_2Dziscan_stage3_23023_var = program.cluster_2Dziscan_stage3_23023
    self.cluster_2Dzisegmap_22967_var = program.cluster_2Dzisegmap_22967
    self.cluster_2Dzisegmap_23025_var = program.cluster_2Dzisegmap_23025
    self.cluster_2Dzisegmap_23174_var = program.cluster_2Dzisegmap_23174
    self.cluster_2Dzisegmap_intragroup_22858_var = program.cluster_2Dzisegmap_intragroup_22858
    self.cluster_2Dzisegmap_intragroup_23798_var = program.cluster_2Dzisegmap_intragroup_23798
    self.cluster_2Dzisegred_large_23133_var = program.cluster_2Dzisegred_large_23133
    self.cluster_2Dzisegred_small_23133_var = program.cluster_2Dzisegred_small_23133
    self.cluster_5Dzigpuseq_24517_var = program.cluster_5Dzigpuseq_24517
    self.cluster_5Dziscan_stage1_23558_var = program.cluster_5Dziscan_stage1_23558
    self.cluster_5Dziscan_stage2_23558_var = program.cluster_5Dziscan_stage2_23558
    self.cluster_5Dziscan_stage3_23558_var = program.cluster_5Dziscan_stage3_23558
    self.cluster_5Dzisegmap_23445_var = program.cluster_5Dzisegmap_23445
    self.cluster_5Dzisegmap_23560_var = program.cluster_5Dzisegmap_23560
    self.cluster_5Dzisegmap_23784_var = program.cluster_5Dzisegmap_23784
    self.cluster_5Dzisegmap_intragroup_23225_var = program.cluster_5Dzisegmap_intragroup_23225
    self.cluster_5Dzisegmap_intragroup_23798_var = program.cluster_5Dzisegmap_intragroup_23798
    self.cluster_5Dzisegred_large_23722_var = program.cluster_5Dzisegred_large_23722
    self.cluster_5Dzisegred_small_23722_var = program.cluster_5Dzisegred_small_23722
    self.gpu_map_transpose_f32_var = program.gpu_map_transpose_f32
    self.gpu_map_transpose_f32_low_height_var = program.gpu_map_transpose_f32_low_height
    self.gpu_map_transpose_f32_low_width_var = program.gpu_map_transpose_f32_low_width
    self.gpu_map_transpose_f32_small_var = program.gpu_map_transpose_f32_small
    self.constants = {}
    cluster_2Dzicounter_mem_24704 = np.zeros(10240, dtype=np.int32)
    static_mem_24781 = opencl_alloc(self, 40960, "static_mem_24781")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_24781, normaliseArray(cluster_2Dzicounter_mem_24704), is_blocking=synchronous)
    self.cluster_2Dzicounter_mem_24704 = static_mem_24781
    cluster_5Dzicounter_mem_24719 = np.zeros(10240, dtype=np.int32)
    static_mem_24783 = opencl_alloc(self, 40960, "static_mem_24783")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_24783, normaliseArray(cluster_5Dzicounter_mem_24719), is_blocking=synchronous)
    self.cluster_5Dzicounter_mem_24719 = static_mem_24783
  def futhark_builtinzhgpu_map_transpose_f32(self, destmem_0, destoffset_1, srcmem_2, srcoffset_3, num_arrays_4, x_elems_5, y_elems_6):
    if ((num_arrays_4 == np.int32(0)) or ((x_elems_5 == np.int32(0)) or (y_elems_6 == np.int32(0)))):
      pass
    else:
      muly_8 = squot32(np.int32(16), x_elems_5)
      mulx_7 = squot32(np.int32(16), y_elems_6)
      if ((num_arrays_4 == np.int32(1)) and ((x_elems_5 == np.int32(1)) or (y_elems_6 == np.int32(1)))):
        if (sext_i32_i64(((x_elems_5 * y_elems_6) * np.int32(4))) != 0):
          cl.enqueue_copy(self.queue, destmem_0, srcmem_2, dest_offset=np.int64(sext_i32_i64(destoffset_1)), src_offset=np.int64(sext_i32_i64(srcoffset_3)), byte_count=np.int64(sext_i32_i64(((x_elems_5 * y_elems_6) * np.int32(4)))))
        if synchronous:
          sync(self)
      else:
        if (sle32(x_elems_5, np.int32(8)) and slt32(np.int32(16), y_elems_6)):
          if ((((1 * (np.int64(sdiv_up32(x_elems_5, np.int32(16))) * np.int64(np.int32(16)))) * (np.int64(sdiv_up32(sdiv_up32(y_elems_6, muly_8), np.int32(16))) * np.int64(np.int32(16)))) * (np.int64(num_arrays_4) * np.int64(np.int32(1)))) != 0):
            self.gpu_map_transpose_f32_low_width_var.set_args(cl.LocalMemory(np.int64(np.int64(1088))), ct.c_int32(destoffset_1), ct.c_int32(srcoffset_3), ct.c_int32(num_arrays_4), ct.c_int32(x_elems_5), ct.c_int32(y_elems_6), ct.c_int32(mulx_7), ct.c_int32(muly_8), destmem_0, srcmem_2)
            cl.enqueue_nd_range_kernel(self.queue, self.gpu_map_transpose_f32_low_width_var, ((np.int64(sdiv_up32(x_elems_5, np.int32(16))) * np.int64(np.int32(16))), (np.int64(sdiv_up32(sdiv_up32(y_elems_6, muly_8), np.int32(16))) * np.int64(np.int32(16))), (np.int64(num_arrays_4) * np.int64(np.int32(1)))), (np.int64(np.int32(16)), np.int64(np.int32(16)), np.int64(np.int32(1))))
            if synchronous:
              sync(self)
        else:
          if (sle32(y_elems_6, np.int32(8)) and slt32(np.int32(16), x_elems_5)):
            if ((((1 * (np.int64(sdiv_up32(sdiv_up32(x_elems_5, mulx_7), np.int32(16))) * np.int64(np.int32(16)))) * (np.int64(sdiv_up32(y_elems_6, np.int32(16))) * np.int64(np.int32(16)))) * (np.int64(num_arrays_4) * np.int64(np.int32(1)))) != 0):
              self.gpu_map_transpose_f32_low_height_var.set_args(cl.LocalMemory(np.int64(np.int64(1088))), ct.c_int32(destoffset_1), ct.c_int32(srcoffset_3), ct.c_int32(num_arrays_4), ct.c_int32(x_elems_5), ct.c_int32(y_elems_6), ct.c_int32(mulx_7), ct.c_int32(muly_8), destmem_0, srcmem_2)
              cl.enqueue_nd_range_kernel(self.queue, self.gpu_map_transpose_f32_low_height_var, ((np.int64(sdiv_up32(sdiv_up32(x_elems_5, mulx_7), np.int32(16))) * np.int64(np.int32(16))), (np.int64(sdiv_up32(y_elems_6, np.int32(16))) * np.int64(np.int32(16))), (np.int64(num_arrays_4) * np.int64(np.int32(1)))), (np.int64(np.int32(16)), np.int64(np.int32(16)), np.int64(np.int32(1))))
              if synchronous:
                sync(self)
          else:
            if (sle32(x_elems_5, np.int32(8)) and sle32(y_elems_6, np.int32(8))):
              if ((1 * (np.int64(sdiv_up32(((num_arrays_4 * x_elems_5) * y_elems_6), np.int32(256))) * np.int64(np.int32(256)))) != 0):
                self.gpu_map_transpose_f32_small_var.set_args(cl.LocalMemory(np.int64(np.int64(1))), ct.c_int32(destoffset_1), ct.c_int32(srcoffset_3), ct.c_int32(num_arrays_4), ct.c_int32(x_elems_5), ct.c_int32(y_elems_6), ct.c_int32(mulx_7), ct.c_int32(muly_8), destmem_0, srcmem_2)
                cl.enqueue_nd_range_kernel(self.queue, self.gpu_map_transpose_f32_small_var, ((np.int64(sdiv_up32(((num_arrays_4 * x_elems_5) * y_elems_6), np.int32(256))) * np.int64(np.int32(256))),), (np.int64(np.int32(256)),))
                if synchronous:
                  sync(self)
            else:
              if ((((1 * (np.int64(sdiv_up32(x_elems_5, np.int32(32))) * np.int64(np.int32(32)))) * (np.int64(sdiv_up32(y_elems_6, np.int32(32))) * np.int64(np.int32(8)))) * (np.int64(num_arrays_4) * np.int64(np.int32(1)))) != 0):
                self.gpu_map_transpose_f32_var.set_args(cl.LocalMemory(np.int64(np.int64(4224))), ct.c_int32(destoffset_1), ct.c_int32(srcoffset_3), ct.c_int32(num_arrays_4), ct.c_int32(x_elems_5), ct.c_int32(y_elems_6), ct.c_int32(mulx_7), ct.c_int32(muly_8), destmem_0, srcmem_2)
                cl.enqueue_nd_range_kernel(self.queue, self.gpu_map_transpose_f32_var, ((np.int64(sdiv_up32(x_elems_5, np.int32(32))) * np.int64(np.int32(32))), (np.int64(sdiv_up32(y_elems_6, np.int32(32))) * np.int64(np.int32(8))), (np.int64(num_arrays_4) * np.int64(np.int32(1)))), (np.int64(np.int32(32)), np.int64(np.int32(8)), np.int64(np.int32(1))))
                if synchronous:
                  sync(self)
    return ()
  def futhark_entry_cluster_2D(self, data_mem_24282, sigma_mem_24283, n_15983):
    max_group_sizze_22852 = self.max_group_size
    fits_22853 = sle64(n_15983, max_group_sizze_22852)
    suff_intra_par_22851 = (self.sizes["cluster_2D.suff_intra_par_0"] <= n_15983)
    intra_suff_and_fits_22854 = (suff_intra_par_22851 and fits_22853)
    segmap_group_sizze_22962 = self.sizes["cluster_2D.segmap_group_size_22910"]
    segmap_usable_groups_22963 = sdiv_up_safe64(n_15983, segmap_group_sizze_22962)
    segscan_group_sizze_23018 = self.sizes["cluster_2D.segscan_group_size_23017"]
    max_num_groups_24516 = self.sizes["cluster_2D.segscan_num_groups_23019"]
    num_groups_23020 = sext_i64_i32(smax64(np.int64(1), smin64(sdiv_up64(n_15983, segscan_group_sizze_23018), sext_i32_i64(max_num_groups_24516))))
    last_index_21141 = (n_15983 - np.int64(1))
    is_empty_21142 = (n_15983 == np.int64(0))
    x_21143 = not(is_empty_21142)
    binop_y_24284 = (np.int64(4) * n_15983)
    bytes_24285 = smax64(np.int64(0), binop_y_24284)
    mem_24286 = opencl_alloc(self, bytes_24285, "mem_24286")
    mem_24289 = opencl_alloc(self, bytes_24285, "mem_24289")
    segmap_group_sizze_23028 = self.sizes["cluster_2D.segmap_group_size_23027"]
    segmap_usable_groups_23029 = sdiv_up64(n_15983, segmap_group_sizze_23028)
    suff_outer_par_23031 = (self.sizes["cluster_2D.suff_outer_par_1"] <= n_15983)
    segred_group_sizze_23126 = self.sizes["cluster_2D.segred_group_size_23094"]
    segmap_group_sizze_23063 = self.sizes["cluster_2D.segmap_group_size_23035"]
    segmap_group_sizze_23169 = self.sizes["cluster_2D.segmap_group_size_23158"]
    mem_24291 = opencl_alloc(self, np.int64(4), "mem_24291")
    mem_24293 = opencl_alloc(self, np.int64(4), "mem_24293")
    if ((1 * (np.int64(np.int64(1)) * np.int64(np.int64(1)))) != 0):
      self.cluster_2Dzigpuseq_24517_var.set_args(self.global_failure, sigma_mem_24283, mem_24291, mem_24293)
      cl.enqueue_nd_range_kernel(self.queue, self.cluster_2Dzigpuseq_24517_var, ((np.int64(np.int64(1)) * np.int64(np.int64(1))),), (np.int64(np.int64(1)),))
      if synchronous:
        sync(self)
    local_memory_capacity_24561 = self.max_local_memory
    if ((intra_suff_and_fits_22854 == True) and sle64(((((np.int64(4) * n_15983) + srem64((np.int64(8) - srem64((np.int64(4) * n_15983), np.int64(8))), np.int64(8))) + ((np.int64(4) * n_15983) + srem64((np.int64(8) - srem64((np.int64(4) * n_15983), np.int64(8))), np.int64(8)))) + ((np.int64(4) * n_15983) + srem64((np.int64(8) - srem64((np.int64(4) * n_15983), np.int64(8))), np.int64(8)))), sext_i32_i64(local_memory_capacity_24561))):
      mem_24305 = opencl_alloc(self, bytes_24285, "mem_24305")
      mem_24308 = opencl_alloc(self, bytes_24285, "mem_24308")
      num_chunks_24523 = sext_i64_i32(sdiv_up64(n_15983, n_15983))
      virt_num_groups_24524 = sext_i64_i32(n_15983)
      if ((1 * (np.int64(n_15983) * np.int64(n_15983))) != 0):
        self.cluster_2Dzisegmap_intragroup_22858_var.set_args(self.global_failure, cl.LocalMemory(np.int64((np.int64(4) * n_15983))), cl.LocalMemory(np.int64((np.int64(4) * n_15983))), cl.LocalMemory(np.int64((np.int64(4) * n_15983))), ct.c_int64(n_15983), data_mem_24282, mem_24291, mem_24293, mem_24305, mem_24308)
        cl.enqueue_nd_range_kernel(self.queue, self.cluster_2Dzisegmap_intragroup_22858_var, ((np.int64(n_15983) * np.int64(n_15983)),), (np.int64(n_15983),))
        if synchronous:
          sync(self)
      ext_mem_24310 = mem_24305
      ext_mem_24309 = mem_24308
    else:
      mem_24297 = opencl_alloc(self, bytes_24285, "mem_24297")
      mem_24300 = opencl_alloc(self, bytes_24285, "mem_24300")
      virt_num_groups_24546 = sext_i64_i32(sdiv_up64(n_15983, segmap_group_sizze_22962))
      if ((1 * (np.int64(segmap_usable_groups_22963) * np.int64(segmap_group_sizze_22962))) != 0):
        self.cluster_2Dzisegmap_22967_var.set_args(self.global_failure, ct.c_int64(n_15983), data_mem_24282, mem_24291, mem_24293, mem_24297, mem_24300)
        cl.enqueue_nd_range_kernel(self.queue, self.cluster_2Dzisegmap_22967_var, ((np.int64(segmap_usable_groups_22963) * np.int64(segmap_group_sizze_22962)),), (np.int64(segmap_group_sizze_22962),))
        if synchronous:
          sync(self)
      ext_mem_24310 = mem_24297
      ext_mem_24309 = mem_24300
    binop_y_24312 = (np.int64(8) * n_15983)
    bytes_24313 = smax64(np.int64(0), binop_y_24312)
    mem_24314 = opencl_alloc(self, bytes_24313, "mem_24314")
    mem_24317 = opencl_alloc(self, bytes_24313, "mem_24317")
    if slt64(np.int64(0), n_15983):
      stage1_max_num_groups_24562 = self.max_group_size
      stage1_num_groups_24563 = smin64(stage1_max_num_groups_24562, num_groups_23020)
      num_threads_24564 = sext_i64_i32((stage1_num_groups_24563 * segscan_group_sizze_23018))
      if ((1 * (np.int64(stage1_num_groups_24563) * np.int64(segscan_group_sizze_23018))) != 0):
        self.cluster_2Dziscan_stage1_23023_var.set_args(self.global_failure, cl.LocalMemory(np.int64(smax64(np.int64(1), (np.int64(8) * segscan_group_sizze_23018)))), ct.c_int64(n_15983), ct.c_int32(num_threads_24564), mem_24291, mem_24293, ext_mem_24309, ext_mem_24310, mem_24314, mem_24317)
        cl.enqueue_nd_range_kernel(self.queue, self.cluster_2Dziscan_stage1_23023_var, ((np.int64(stage1_num_groups_24563) * np.int64(segscan_group_sizze_23018)),), (np.int64(segscan_group_sizze_23018),))
        if synchronous:
          sync(self)
      if ((1 * (np.int64(np.int64(1)) * np.int64(stage1_num_groups_24563))) != 0):
        self.cluster_2Dziscan_stage2_23023_var.set_args(self.global_failure, cl.LocalMemory(np.int64(smax64(np.int64(1), (np.int64(8) * stage1_num_groups_24563)))), ct.c_int64(n_15983), ct.c_int64(stage1_num_groups_24563), ct.c_int32(num_threads_24564), mem_24314)
        cl.enqueue_nd_range_kernel(self.queue, self.cluster_2Dziscan_stage2_23023_var, ((np.int64(np.int64(1)) * np.int64(stage1_num_groups_24563)),), (np.int64(stage1_num_groups_24563),))
        if synchronous:
          sync(self)
      required_groups_24610 = sext_i64_i32(sdiv_up64(n_15983, segscan_group_sizze_23018))
      if ((1 * (np.int64(num_groups_23020) * np.int64(segscan_group_sizze_23018))) != 0):
        self.cluster_2Dziscan_stage3_23023_var.set_args(self.global_failure, ct.c_int64(n_15983), ct.c_int64(num_groups_23020), ct.c_int32(num_threads_24564), ct.c_int32(required_groups_24610), mem_24314)
        cl.enqueue_nd_range_kernel(self.queue, self.cluster_2Dziscan_stage3_23023_var, ((np.int64(num_groups_23020) * np.int64(segscan_group_sizze_23018)),), (np.int64(segscan_group_sizze_23018),))
        if synchronous:
          sync(self)
    if (x_21143 == True):
      read_res_24780 = np.empty(1, dtype=ct.c_int64)
      cl.enqueue_copy(self.queue, read_res_24780, mem_24314, device_offset=(np.int64(last_index_21141) * 8), is_blocking=synchronous)
      sync(self)
      x_22681 = read_res_24780[0]
      last_offset_21144 = x_22681
    else:
      last_offset_21144 = np.int64(0)
    if (is_empty_21142 == True):
      partition_sizze_21146 = np.int64(0)
    else:
      partition_sizze_21146 = last_offset_21144
    virt_num_groups_24623 = sext_i64_i32(sdiv_up64(n_15983, segmap_group_sizze_23028))
    if ((1 * (np.int64(segmap_usable_groups_23029) * np.int64(segmap_group_sizze_23028))) != 0):
      self.cluster_2Dzisegmap_23025_var.set_args(self.global_failure, ct.c_int64(n_15983), mem_24286, mem_24289, ext_mem_24309, ext_mem_24310, mem_24314, mem_24317)
      cl.enqueue_nd_range_kernel(self.queue, self.cluster_2Dzisegmap_23025_var, ((np.int64(segmap_usable_groups_23029) * np.int64(segmap_group_sizze_23028)),), (np.int64(segmap_group_sizze_23028),))
      if synchronous:
        sync(self)
    ext_mem_24309 = None
    ext_mem_24310 = None
    mem_24314 = None
    mem_24317 = None
    eq_x_zz_21161 = (np.int64(0) == last_offset_21144)
    p_and_eq_x_y_21163 = (x_21143 and eq_x_zz_21161)
    empty_slice_21164 = (is_empty_21142 or p_and_eq_x_y_21163)
    m_21165 = (partition_sizze_21146 - np.int64(1))
    zzero_leq_i_p_m_t_s_21166 = sle64(np.int64(0), m_21165)
    i_p_m_t_s_leq_w_21167 = slt64(m_21165, n_15983)
    i_lte_j_21168 = sle64(np.int64(0), partition_sizze_21146)
    y_21169 = (zzero_leq_i_p_m_t_s_21166 and i_p_m_t_s_leq_w_21167)
    y_21170 = (i_lte_j_21168 and y_21169)
    ok_or_empty_21171 = (empty_slice_21164 or y_21170)
    index_certs_21172 = True
    assert ok_or_empty_21171, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/soacs.fut:173:6-16\n   #1  mean_shift.fut:41:7-48:18\n   #2  mean_shift.fut:70:1-74:57\n" % ("Index [:", partition_sizze_21146, "] out of bounds for array of shape [", n_15983, "]."))
    nest_sizze_23125 = (n_15983 * partition_sizze_21146)
    max_num_groups_24632 = self.sizes["cluster_2D.segred_num_groups_23096"]
    num_groups_23127 = sext_i64_i32(smax64(np.int64(1), smin64(sdiv_up64(nest_sizze_23125, segred_group_sizze_23126), sext_i32_i64(max_num_groups_24632))))
    num_whole_tiles_23818 = squot_safe64(partition_sizze_21146, segmap_group_sizze_23063)
    residual_input_23978 = srem_safe64(partition_sizze_21146, segmap_group_sizze_23063)
    cond_23979 = (residual_input_23978 == np.int64(0))
    binop_x_23995 = (segmap_group_sizze_23063 * num_whole_tiles_23818)
    bytes_24328 = (np.int64(4) * segmap_group_sizze_23063)
    bytes_24333 = (np.int64(8) * segmap_group_sizze_23063)
    bytes_24341 = smax64(np.int64(0), bytes_24328)
    bytes_24347 = smax64(np.int64(0), bytes_24333)
    num_bytes_24483 = (np.int64(8) * segmap_group_sizze_23063)
    num_bytes_24487 = (np.int64(4) * segmap_group_sizze_23063)
    local_memory_capacity_24748 = self.max_local_memory
    if ((suff_outer_par_23031 == True) and sle64((((bytes_24347 + srem64((np.int64(8) - srem64(bytes_24347, np.int64(8))), np.int64(8))) + (bytes_24341 + srem64((np.int64(8) - srem64(bytes_24341, np.int64(8))), np.int64(8)))) + (bytes_24341 + srem64((np.int64(8) - srem64(bytes_24341, np.int64(8))), np.int64(8)))), sext_i32_i64(local_memory_capacity_24748))):
      segmap_usable_groups_23064 = sdiv_up64(n_15983, segmap_group_sizze_23063)
      mem_24374 = opencl_alloc(self, bytes_24313, "mem_24374")
      num_chunks_24633 = sext_i64_i32(sdiv_up64(segmap_group_sizze_23063, segmap_group_sizze_23063))
      virt_num_groups_24634 = sext_i64_i32(segmap_usable_groups_23064)
      if ((1 * (np.int64(segmap_usable_groups_23064) * np.int64(segmap_group_sizze_23063))) != 0):
        self.cluster_2Dzisegmap_intragroup_23798_var.set_args(self.global_failure, cl.LocalMemory(np.int64(bytes_24341)), cl.LocalMemory(np.int64(bytes_24341)), cl.LocalMemory(np.int64(bytes_24347)), ct.c_int64(n_15983), ct.c_int64(partition_sizze_21146), ct.c_int64(segmap_usable_groups_23064), ct.c_int64(num_whole_tiles_23818), ct.c_int64(residual_input_23978), ct.c_bool(cond_23979), ct.c_int64(binop_x_23995), data_mem_24282, mem_24286, mem_24289, mem_24291, mem_24293, mem_24374)
        cl.enqueue_nd_range_kernel(self.queue, self.cluster_2Dzisegmap_intragroup_23798_var, ((np.int64(segmap_usable_groups_23064) * np.int64(segmap_group_sizze_23063)),), (np.int64(segmap_group_sizze_23063),))
        if synchronous:
          sync(self)
      ext_mem_24375 = mem_24374
    else:
      mem_24322 = opencl_alloc(self, bytes_24313, "mem_24322")
      mem_24325 = opencl_alloc(self, bytes_24285, "mem_24325")
      if slt64((partition_sizze_21146 * np.int64(2)), segred_group_sizze_23126):
        segment_sizze_nonzzero_24660 = smax64(np.int64(1), partition_sizze_21146)
        num_threads_24661 = (num_groups_23127 * segred_group_sizze_23126)
        if ((1 * (np.int64(num_groups_23127) * np.int64(segred_group_sizze_23126))) != 0):
          self.cluster_2Dzisegred_small_23133_var.set_args(self.global_failure, cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_23126))), cl.LocalMemory(np.int64((np.int64(8) * segred_group_sizze_23126))), ct.c_int64(n_15983), ct.c_int64(partition_sizze_21146), ct.c_int64(num_groups_23127), ct.c_int64(segment_sizze_nonzzero_24660), data_mem_24282, mem_24286, mem_24289, mem_24291, mem_24293, mem_24322, mem_24325)
          cl.enqueue_nd_range_kernel(self.queue, self.cluster_2Dzisegred_small_23133_var, ((np.int64(num_groups_23127) * np.int64(segred_group_sizze_23126)),), (np.int64(segred_group_sizze_23126),))
          if synchronous:
            sync(self)
      else:
        groups_per_segment_24695 = sdiv_up64(num_groups_23127, smax64(np.int64(1), n_15983))
        elements_per_thread_24696 = sdiv_up64(partition_sizze_21146, (segred_group_sizze_23126 * groups_per_segment_24695))
        virt_num_groups_24697 = (groups_per_segment_24695 * n_15983)
        num_threads_24698 = (num_groups_23127 * segred_group_sizze_23126)
        threads_per_segment_24699 = (groups_per_segment_24695 * segred_group_sizze_23126)
        segred_tmp_mem_24700 = opencl_alloc(self, (np.int64(8) * virt_num_groups_24697), "segred_tmp_mem_24700")
        segred_tmp_mem_24702 = opencl_alloc(self, (np.int64(4) * virt_num_groups_24697), "segred_tmp_mem_24702")
        cluster_2Dzicounter_mem_24704 = self.cluster_2Dzicounter_mem_24704
        if ((1 * (np.int64(num_groups_23127) * np.int64(segred_group_sizze_23126))) != 0):
          self.cluster_2Dzisegred_large_23133_var.set_args(self.global_failure, cl.LocalMemory(np.int64(np.int32(1))), cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_23126))), cl.LocalMemory(np.int64((np.int64(8) * segred_group_sizze_23126))), ct.c_int64(n_15983), ct.c_int64(partition_sizze_21146), ct.c_int64(num_groups_23127), ct.c_int64(groups_per_segment_24695), ct.c_int64(elements_per_thread_24696), ct.c_int64(virt_num_groups_24697), data_mem_24282, mem_24286, mem_24289, mem_24291, mem_24293, mem_24322, mem_24325, segred_tmp_mem_24700, segred_tmp_mem_24702, cluster_2Dzicounter_mem_24704)
          cl.enqueue_nd_range_kernel(self.queue, self.cluster_2Dzisegred_large_23133_var, ((np.int64(num_groups_23127) * np.int64(segred_group_sizze_23126)),), (np.int64(segred_group_sizze_23126),))
          if synchronous:
            sync(self)
      mem_24325 = None
      ext_mem_24375 = mem_24322
    mem_24291 = None
    mem_24293 = None
    max_num_groups_24749 = self.sizes["cluster_2D.segmap_num_groups_23160"]
    num_groups_23170 = sext_i64_i32(smax64(np.int64(1), smin64(sdiv_up64(partition_sizze_21146, segmap_group_sizze_23169), sext_i32_i64(max_num_groups_24749))))
    bytes_24379 = (np.int64(8) * partition_sizze_21146)
    mem_24380 = opencl_alloc(self, bytes_24379, "mem_24380")
    virt_num_groups_24750 = sext_i64_i32(sdiv_up64(partition_sizze_21146, segmap_group_sizze_23169))
    if ((1 * (np.int64(num_groups_23170) * np.int64(segmap_group_sizze_23169))) != 0):
      self.cluster_2Dzisegmap_23174_var.set_args(self.global_failure, ct.c_int64(partition_sizze_21146), ct.c_int64(num_groups_23170), ct.c_int32(virt_num_groups_24750), mem_24286, mem_24289, mem_24380)
      cl.enqueue_nd_range_kernel(self.queue, self.cluster_2Dzisegmap_23174_var, ((np.int64(num_groups_23170) * np.int64(segmap_group_sizze_23169)),), (np.int64(segmap_group_sizze_23169),))
      if synchronous:
        sync(self)
    mem_24286 = None
    mem_24289 = None
    bytes_24383 = smax64(np.int64(0), bytes_24379)
    mem_24384 = opencl_alloc(self, bytes_24383, "mem_24384")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_24384, np.int64(0), mem_24380, np.int64(0), np.int64(1), partition_sizze_21146, np.int64(2))
    mem_24380 = None
    mem_out_24513 = mem_24384
    mem_out_24514 = ext_mem_24375
    prim_out_24515 = partition_sizze_21146
    return (mem_out_24513, mem_out_24514, prim_out_24515)
  def futhark_entry_cluster_5D(self, data_mem_24282, sigma_mem_24283, n_20072):
    max_group_sizze_23216 = self.max_group_size
    fits_23217 = sle64(n_20072, max_group_sizze_23216)
    suff_intra_par_23215 = (self.sizes["cluster_5D.suff_intra_par_0"] <= n_20072)
    intra_suff_and_fits_23218 = (suff_intra_par_23215 and fits_23217)
    segmap_group_sizze_23437 = self.sizes["cluster_5D.segmap_group_size_23331"]
    segmap_usable_groups_23438 = sdiv_up_safe64(n_20072, segmap_group_sizze_23437)
    segscan_group_sizze_23553 = self.sizes["cluster_5D.segscan_group_size_23552"]
    max_num_groups_24516 = self.sizes["cluster_5D.segscan_num_groups_23554"]
    num_groups_23555 = sext_i64_i32(smax64(np.int64(1), smin64(sdiv_up64(n_20072, segscan_group_sizze_23553), sext_i32_i64(max_num_groups_24516))))
    last_index_21680 = (n_20072 - np.int64(1))
    is_empty_21681 = (n_20072 == np.int64(0))
    x_21682 = not(is_empty_21681)
    binop_y_24284 = (np.int64(4) * n_20072)
    bytes_24285 = smax64(np.int64(0), binop_y_24284)
    mem_24286 = opencl_alloc(self, bytes_24285, "mem_24286")
    mem_24289 = opencl_alloc(self, bytes_24285, "mem_24289")
    mem_24292 = opencl_alloc(self, bytes_24285, "mem_24292")
    mem_24295 = opencl_alloc(self, bytes_24285, "mem_24295")
    mem_24298 = opencl_alloc(self, bytes_24285, "mem_24298")
    segmap_group_sizze_23563 = self.sizes["cluster_5D.segmap_group_size_23562"]
    segmap_usable_groups_23564 = sdiv_up64(n_20072, segmap_group_sizze_23563)
    suff_outer_par_23566 = (self.sizes["cluster_5D.suff_outer_par_1"] <= n_20072)
    segred_group_sizze_23715 = self.sizes["cluster_5D.segred_group_size_23665"]
    segmap_group_sizze_23616 = self.sizes["cluster_5D.segmap_group_size_23570"]
    segmap_group_sizze_23779 = self.sizes["cluster_5D.segmap_group_size_23765"]
    mem_24300 = opencl_alloc(self, np.int64(4), "mem_24300")
    mem_24302 = opencl_alloc(self, np.int64(4), "mem_24302")
    mem_24304 = opencl_alloc(self, np.int64(4), "mem_24304")
    mem_24306 = opencl_alloc(self, np.int64(4), "mem_24306")
    mem_24308 = opencl_alloc(self, np.int64(4), "mem_24308")
    if ((1 * (np.int64(np.int64(1)) * np.int64(np.int64(1)))) != 0):
      self.cluster_5Dzigpuseq_24517_var.set_args(self.global_failure, sigma_mem_24283, mem_24300, mem_24302, mem_24304, mem_24306, mem_24308)
      cl.enqueue_nd_range_kernel(self.queue, self.cluster_5Dzigpuseq_24517_var, ((np.int64(np.int64(1)) * np.int64(np.int64(1))),), (np.int64(np.int64(1)),))
      if synchronous:
        sync(self)
    local_memory_capacity_24576 = self.max_local_memory
    if ((intra_suff_and_fits_23218 == True) and sle64((((((((np.int64(4) * n_20072) + srem64((np.int64(8) - srem64((np.int64(4) * n_20072), np.int64(8))), np.int64(8))) + ((np.int64(4) * n_20072) + srem64((np.int64(8) - srem64((np.int64(4) * n_20072), np.int64(8))), np.int64(8)))) + ((np.int64(4) * n_20072) + srem64((np.int64(8) - srem64((np.int64(4) * n_20072), np.int64(8))), np.int64(8)))) + ((np.int64(4) * n_20072) + srem64((np.int64(8) - srem64((np.int64(4) * n_20072), np.int64(8))), np.int64(8)))) + ((np.int64(4) * n_20072) + srem64((np.int64(8) - srem64((np.int64(4) * n_20072), np.int64(8))), np.int64(8)))) + ((np.int64(4) * n_20072) + srem64((np.int64(8) - srem64((np.int64(4) * n_20072), np.int64(8))), np.int64(8)))), sext_i32_i64(local_memory_capacity_24576))):
      mem_24329 = opencl_alloc(self, bytes_24285, "mem_24329")
      mem_24332 = opencl_alloc(self, bytes_24285, "mem_24332")
      mem_24335 = opencl_alloc(self, bytes_24285, "mem_24335")
      mem_24338 = opencl_alloc(self, bytes_24285, "mem_24338")
      mem_24341 = opencl_alloc(self, bytes_24285, "mem_24341")
      num_chunks_24523 = sext_i64_i32(sdiv_up64(n_20072, n_20072))
      virt_num_groups_24524 = sext_i64_i32(n_20072)
      if ((1 * (np.int64(n_20072) * np.int64(n_20072))) != 0):
        self.cluster_5Dzisegmap_intragroup_23225_var.set_args(self.global_failure, cl.LocalMemory(np.int64((np.int64(4) * n_20072))), cl.LocalMemory(np.int64((np.int64(4) * n_20072))), cl.LocalMemory(np.int64((np.int64(4) * n_20072))), cl.LocalMemory(np.int64((np.int64(4) * n_20072))), cl.LocalMemory(np.int64((np.int64(4) * n_20072))), cl.LocalMemory(np.int64((np.int64(4) * n_20072))), ct.c_int64(n_20072), data_mem_24282, mem_24300, mem_24302, mem_24304, mem_24306, mem_24308, mem_24329, mem_24332, mem_24335, mem_24338, mem_24341)
        cl.enqueue_nd_range_kernel(self.queue, self.cluster_5Dzisegmap_intragroup_23225_var, ((np.int64(n_20072) * np.int64(n_20072)),), (np.int64(n_20072),))
        if synchronous:
          sync(self)
      ext_mem_24346 = mem_24329
      ext_mem_24345 = mem_24332
      ext_mem_24344 = mem_24335
      ext_mem_24343 = mem_24338
      ext_mem_24342 = mem_24341
    else:
      mem_24312 = opencl_alloc(self, bytes_24285, "mem_24312")
      mem_24315 = opencl_alloc(self, bytes_24285, "mem_24315")
      mem_24318 = opencl_alloc(self, bytes_24285, "mem_24318")
      mem_24321 = opencl_alloc(self, bytes_24285, "mem_24321")
      mem_24324 = opencl_alloc(self, bytes_24285, "mem_24324")
      virt_num_groups_24555 = sext_i64_i32(sdiv_up64(n_20072, segmap_group_sizze_23437))
      if ((1 * (np.int64(segmap_usable_groups_23438) * np.int64(segmap_group_sizze_23437))) != 0):
        self.cluster_5Dzisegmap_23445_var.set_args(self.global_failure, ct.c_int64(n_20072), data_mem_24282, mem_24300, mem_24302, mem_24304, mem_24306, mem_24308, mem_24312, mem_24315, mem_24318, mem_24321, mem_24324)
        cl.enqueue_nd_range_kernel(self.queue, self.cluster_5Dzisegmap_23445_var, ((np.int64(segmap_usable_groups_23438) * np.int64(segmap_group_sizze_23437)),), (np.int64(segmap_group_sizze_23437),))
        if synchronous:
          sync(self)
      ext_mem_24346 = mem_24312
      ext_mem_24345 = mem_24315
      ext_mem_24344 = mem_24318
      ext_mem_24343 = mem_24321
      ext_mem_24342 = mem_24324
    binop_y_24348 = (np.int64(8) * n_20072)
    bytes_24349 = smax64(np.int64(0), binop_y_24348)
    mem_24350 = opencl_alloc(self, bytes_24349, "mem_24350")
    mem_24353 = opencl_alloc(self, bytes_24349, "mem_24353")
    if slt64(np.int64(0), n_20072):
      stage1_max_num_groups_24577 = self.max_group_size
      stage1_num_groups_24578 = smin64(stage1_max_num_groups_24577, num_groups_23555)
      num_threads_24579 = sext_i64_i32((stage1_num_groups_24578 * segscan_group_sizze_23553))
      if ((1 * (np.int64(stage1_num_groups_24578) * np.int64(segscan_group_sizze_23553))) != 0):
        self.cluster_5Dziscan_stage1_23558_var.set_args(self.global_failure, cl.LocalMemory(np.int64(smax64(np.int64(1), (np.int64(8) * segscan_group_sizze_23553)))), ct.c_int64(n_20072), ct.c_int32(num_threads_24579), mem_24300, mem_24302, mem_24304, mem_24306, mem_24308, ext_mem_24342, ext_mem_24343, ext_mem_24344, ext_mem_24345, ext_mem_24346, mem_24350, mem_24353)
        cl.enqueue_nd_range_kernel(self.queue, self.cluster_5Dziscan_stage1_23558_var, ((np.int64(stage1_num_groups_24578) * np.int64(segscan_group_sizze_23553)),), (np.int64(segscan_group_sizze_23553),))
        if synchronous:
          sync(self)
      if ((1 * (np.int64(np.int64(1)) * np.int64(stage1_num_groups_24578))) != 0):
        self.cluster_5Dziscan_stage2_23558_var.set_args(self.global_failure, cl.LocalMemory(np.int64(smax64(np.int64(1), (np.int64(8) * stage1_num_groups_24578)))), ct.c_int64(n_20072), ct.c_int64(stage1_num_groups_24578), ct.c_int32(num_threads_24579), mem_24350)
        cl.enqueue_nd_range_kernel(self.queue, self.cluster_5Dziscan_stage2_23558_var, ((np.int64(np.int64(1)) * np.int64(stage1_num_groups_24578)),), (np.int64(stage1_num_groups_24578),))
        if synchronous:
          sync(self)
      required_groups_24625 = sext_i64_i32(sdiv_up64(n_20072, segscan_group_sizze_23553))
      if ((1 * (np.int64(num_groups_23555) * np.int64(segscan_group_sizze_23553))) != 0):
        self.cluster_5Dziscan_stage3_23558_var.set_args(self.global_failure, ct.c_int64(n_20072), ct.c_int64(num_groups_23555), ct.c_int32(num_threads_24579), ct.c_int32(required_groups_24625), mem_24350)
        cl.enqueue_nd_range_kernel(self.queue, self.cluster_5Dziscan_stage3_23558_var, ((np.int64(num_groups_23555) * np.int64(segscan_group_sizze_23553)),), (np.int64(segscan_group_sizze_23553),))
        if synchronous:
          sync(self)
    if (x_21682 == True):
      read_res_24782 = np.empty(1, dtype=ct.c_int64)
      cl.enqueue_copy(self.queue, read_res_24782, mem_24350, device_offset=(np.int64(last_index_21680) * 8), is_blocking=synchronous)
      sync(self)
      x_22801 = read_res_24782[0]
      last_offset_21683 = x_22801
    else:
      last_offset_21683 = np.int64(0)
    if (is_empty_21681 == True):
      partition_sizze_21685 = np.int64(0)
    else:
      partition_sizze_21685 = last_offset_21683
    virt_num_groups_24638 = sext_i64_i32(sdiv_up64(n_20072, segmap_group_sizze_23563))
    if ((1 * (np.int64(segmap_usable_groups_23564) * np.int64(segmap_group_sizze_23563))) != 0):
      self.cluster_5Dzisegmap_23560_var.set_args(self.global_failure, ct.c_int64(n_20072), mem_24286, mem_24289, mem_24292, mem_24295, mem_24298, ext_mem_24342, ext_mem_24343, ext_mem_24344, ext_mem_24345, ext_mem_24346, mem_24350, mem_24353)
      cl.enqueue_nd_range_kernel(self.queue, self.cluster_5Dzisegmap_23560_var, ((np.int64(segmap_usable_groups_23564) * np.int64(segmap_group_sizze_23563)),), (np.int64(segmap_group_sizze_23563),))
      if synchronous:
        sync(self)
    ext_mem_24342 = None
    ext_mem_24343 = None
    ext_mem_24344 = None
    ext_mem_24345 = None
    ext_mem_24346 = None
    mem_24350 = None
    mem_24353 = None
    eq_x_zz_21707 = (np.int64(0) == last_offset_21683)
    p_and_eq_x_y_21708 = (x_21682 and eq_x_zz_21707)
    empty_slice_21709 = (is_empty_21681 or p_and_eq_x_y_21708)
    m_21710 = (partition_sizze_21685 - np.int64(1))
    zzero_leq_i_p_m_t_s_21711 = sle64(np.int64(0), m_21710)
    i_p_m_t_s_leq_w_21712 = slt64(m_21710, n_20072)
    i_lte_j_21713 = sle64(np.int64(0), partition_sizze_21685)
    y_21714 = (zzero_leq_i_p_m_t_s_21711 and i_p_m_t_s_leq_w_21712)
    y_21715 = (i_lte_j_21713 and y_21714)
    ok_or_empty_21716 = (empty_slice_21709 or y_21715)
    index_certs_21717 = True
    assert ok_or_empty_21716, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/soacs.fut:173:6-16\n   #1  mean_shift.fut:41:7-48:18\n   #2  mean_shift.fut:80:25-69\n   #3  mean_shift.fut:77:1-81:57\n" % ("Index [:", partition_sizze_21685, "] out of bounds for array of shape [", n_20072, "]."))
    nest_sizze_23714 = (n_20072 * partition_sizze_21685)
    max_num_groups_24647 = self.sizes["cluster_5D.segred_num_groups_23667"]
    num_groups_23716 = sext_i64_i32(smax64(np.int64(1), smin64(sdiv_up64(nest_sizze_23714, segred_group_sizze_23715), sext_i32_i64(max_num_groups_24647))))
    num_whole_tiles_23836 = squot_safe64(partition_sizze_21685, segmap_group_sizze_23616)
    residual_input_24086 = srem_safe64(partition_sizze_21685, segmap_group_sizze_23616)
    cond_24087 = (residual_input_24086 == np.int64(0))
    binop_x_24112 = (segmap_group_sizze_23616 * num_whole_tiles_23836)
    bytes_24364 = (np.int64(4) * segmap_group_sizze_23616)
    bytes_24375 = (np.int64(8) * segmap_group_sizze_23616)
    bytes_24383 = smax64(np.int64(0), bytes_24364)
    bytes_24398 = smax64(np.int64(0), bytes_24375)
    num_bytes_24483 = (np.int64(8) * segmap_group_sizze_23616)
    num_bytes_24487 = (np.int64(4) * segmap_group_sizze_23616)
    local_memory_capacity_24763 = self.max_local_memory
    if ((suff_outer_par_23566 == True) and sle64(((((((bytes_24398 + srem64((np.int64(8) - srem64(bytes_24398, np.int64(8))), np.int64(8))) + (bytes_24383 + srem64((np.int64(8) - srem64(bytes_24383, np.int64(8))), np.int64(8)))) + (bytes_24383 + srem64((np.int64(8) - srem64(bytes_24383, np.int64(8))), np.int64(8)))) + (bytes_24383 + srem64((np.int64(8) - srem64(bytes_24383, np.int64(8))), np.int64(8)))) + (bytes_24383 + srem64((np.int64(8) - srem64(bytes_24383, np.int64(8))), np.int64(8)))) + (bytes_24383 + srem64((np.int64(8) - srem64(bytes_24383, np.int64(8))), np.int64(8)))), sext_i32_i64(local_memory_capacity_24763))):
      segmap_usable_groups_23617 = sdiv_up64(n_20072, segmap_group_sizze_23616)
      mem_24434 = opencl_alloc(self, bytes_24349, "mem_24434")
      num_chunks_24648 = sext_i64_i32(sdiv_up64(segmap_group_sizze_23616, segmap_group_sizze_23616))
      virt_num_groups_24649 = sext_i64_i32(segmap_usable_groups_23617)
      if ((1 * (np.int64(segmap_usable_groups_23617) * np.int64(segmap_group_sizze_23616))) != 0):
        self.cluster_5Dzisegmap_intragroup_23798_var.set_args(self.global_failure, cl.LocalMemory(np.int64(bytes_24383)), cl.LocalMemory(np.int64(bytes_24383)), cl.LocalMemory(np.int64(bytes_24383)), cl.LocalMemory(np.int64(bytes_24383)), cl.LocalMemory(np.int64(bytes_24383)), cl.LocalMemory(np.int64(bytes_24398)), ct.c_int64(n_20072), ct.c_int64(partition_sizze_21685), ct.c_int64(segmap_usable_groups_23617), ct.c_int64(num_whole_tiles_23836), ct.c_int64(residual_input_24086), ct.c_bool(cond_24087), ct.c_int64(binop_x_24112), data_mem_24282, mem_24286, mem_24289, mem_24292, mem_24295, mem_24298, mem_24300, mem_24302, mem_24304, mem_24306, mem_24308, mem_24434)
        cl.enqueue_nd_range_kernel(self.queue, self.cluster_5Dzisegmap_intragroup_23798_var, ((np.int64(segmap_usable_groups_23617) * np.int64(segmap_group_sizze_23616)),), (np.int64(segmap_group_sizze_23616),))
        if synchronous:
          sync(self)
      ext_mem_24435 = mem_24434
    else:
      mem_24358 = opencl_alloc(self, bytes_24349, "mem_24358")
      mem_24361 = opencl_alloc(self, bytes_24285, "mem_24361")
      if slt64((partition_sizze_21685 * np.int64(2)), segred_group_sizze_23715):
        segment_sizze_nonzzero_24675 = smax64(np.int64(1), partition_sizze_21685)
        num_threads_24676 = (num_groups_23716 * segred_group_sizze_23715)
        if ((1 * (np.int64(num_groups_23716) * np.int64(segred_group_sizze_23715))) != 0):
          self.cluster_5Dzisegred_small_23722_var.set_args(self.global_failure, cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_23715))), cl.LocalMemory(np.int64((np.int64(8) * segred_group_sizze_23715))), ct.c_int64(n_20072), ct.c_int64(partition_sizze_21685), ct.c_int64(num_groups_23716), ct.c_int64(segment_sizze_nonzzero_24675), data_mem_24282, mem_24286, mem_24289, mem_24292, mem_24295, mem_24298, mem_24300, mem_24302, mem_24304, mem_24306, mem_24308, mem_24358, mem_24361)
          cl.enqueue_nd_range_kernel(self.queue, self.cluster_5Dzisegred_small_23722_var, ((np.int64(num_groups_23716) * np.int64(segred_group_sizze_23715)),), (np.int64(segred_group_sizze_23715),))
          if synchronous:
            sync(self)
      else:
        groups_per_segment_24710 = sdiv_up64(num_groups_23716, smax64(np.int64(1), n_20072))
        elements_per_thread_24711 = sdiv_up64(partition_sizze_21685, (segred_group_sizze_23715 * groups_per_segment_24710))
        virt_num_groups_24712 = (groups_per_segment_24710 * n_20072)
        num_threads_24713 = (num_groups_23716 * segred_group_sizze_23715)
        threads_per_segment_24714 = (groups_per_segment_24710 * segred_group_sizze_23715)
        segred_tmp_mem_24715 = opencl_alloc(self, (np.int64(8) * virt_num_groups_24712), "segred_tmp_mem_24715")
        segred_tmp_mem_24717 = opencl_alloc(self, (np.int64(4) * virt_num_groups_24712), "segred_tmp_mem_24717")
        cluster_5Dzicounter_mem_24719 = self.cluster_5Dzicounter_mem_24719
        if ((1 * (np.int64(num_groups_23716) * np.int64(segred_group_sizze_23715))) != 0):
          self.cluster_5Dzisegred_large_23722_var.set_args(self.global_failure, cl.LocalMemory(np.int64(np.int32(1))), cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_23715))), cl.LocalMemory(np.int64((np.int64(8) * segred_group_sizze_23715))), ct.c_int64(n_20072), ct.c_int64(partition_sizze_21685), ct.c_int64(num_groups_23716), ct.c_int64(groups_per_segment_24710), ct.c_int64(elements_per_thread_24711), ct.c_int64(virt_num_groups_24712), data_mem_24282, mem_24286, mem_24289, mem_24292, mem_24295, mem_24298, mem_24300, mem_24302, mem_24304, mem_24306, mem_24308, mem_24358, mem_24361, segred_tmp_mem_24715, segred_tmp_mem_24717, cluster_5Dzicounter_mem_24719)
          cl.enqueue_nd_range_kernel(self.queue, self.cluster_5Dzisegred_large_23722_var, ((np.int64(num_groups_23716) * np.int64(segred_group_sizze_23715)),), (np.int64(segred_group_sizze_23715),))
          if synchronous:
            sync(self)
      mem_24361 = None
      ext_mem_24435 = mem_24358
    mem_24300 = None
    mem_24302 = None
    mem_24304 = None
    mem_24306 = None
    mem_24308 = None
    max_num_groups_24764 = self.sizes["cluster_5D.segmap_num_groups_23767"]
    num_groups_23780 = sext_i64_i32(smax64(np.int64(1), smin64(sdiv_up64(partition_sizze_21685, segmap_group_sizze_23779), sext_i32_i64(max_num_groups_24764))))
    bytes_24439 = (np.int64(20) * partition_sizze_21685)
    mem_24440 = opencl_alloc(self, bytes_24439, "mem_24440")
    virt_num_groups_24765 = sext_i64_i32(sdiv_up64(partition_sizze_21685, segmap_group_sizze_23779))
    if ((1 * (np.int64(num_groups_23780) * np.int64(segmap_group_sizze_23779))) != 0):
      self.cluster_5Dzisegmap_23784_var.set_args(self.global_failure, ct.c_int64(partition_sizze_21685), ct.c_int64(num_groups_23780), ct.c_int32(virt_num_groups_24765), mem_24286, mem_24289, mem_24292, mem_24295, mem_24298, mem_24440)
      cl.enqueue_nd_range_kernel(self.queue, self.cluster_5Dzisegmap_23784_var, ((np.int64(num_groups_23780) * np.int64(segmap_group_sizze_23779)),), (np.int64(segmap_group_sizze_23779),))
      if synchronous:
        sync(self)
    mem_24286 = None
    mem_24289 = None
    mem_24292 = None
    mem_24295 = None
    mem_24298 = None
    bytes_24443 = smax64(np.int64(0), bytes_24439)
    mem_24444 = opencl_alloc(self, bytes_24443, "mem_24444")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_24444, np.int64(0), mem_24440, np.int64(0), np.int64(1), partition_sizze_21685, np.int64(5))
    mem_24440 = None
    mem_out_24513 = mem_24444
    mem_out_24514 = ext_mem_24435
    prim_out_24515 = partition_sizze_21685
    return (mem_out_24513, mem_out_24514, prim_out_24515)
  def cluster_2D(self, data_mem_24282_ext, sigma_mem_24283_ext):
    n_15983 = None
    try:
      assert ((type(data_mem_24282_ext) in [np.ndarray, cl.array.Array]) and (data_mem_24282_ext.dtype == np.float32)), "Parameter has unexpected type"
      if (n_15983 == None):
        n_15983 = np.int64(data_mem_24282_ext.shape[0])
      else:
        assert (n_15983 == data_mem_24282_ext.shape[0]), "Error: entry point arguments have invalid sizes."
      assert (np.int64(2) == data_mem_24282_ext.shape[1]), "Entry point arguments have invalid sizes."
      if (type(data_mem_24282_ext) == cl.array.Array):
        data_mem_24282 = data_mem_24282_ext.data
      else:
        data_mem_24282 = opencl_alloc(self, np.int64(data_mem_24282_ext.nbytes), "data_mem_24282")
        if (np.int64(data_mem_24282_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, data_mem_24282, normaliseArray(data_mem_24282_ext), is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][]f32", type(data_mem_24282_ext), data_mem_24282_ext))
    try:
      assert ((type(sigma_mem_24283_ext) in [np.ndarray, cl.array.Array]) and (sigma_mem_24283_ext.dtype == np.float32)), "Parameter has unexpected type"
      assert (np.int64(2) == sigma_mem_24283_ext.shape[0]), "Entry point arguments have invalid sizes."
      if (type(sigma_mem_24283_ext) == cl.array.Array):
        sigma_mem_24283 = sigma_mem_24283_ext.data
      else:
        sigma_mem_24283 = opencl_alloc(self, np.int64(sigma_mem_24283_ext.nbytes), "sigma_mem_24283")
        if (np.int64(sigma_mem_24283_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, sigma_mem_24283, normaliseArray(sigma_mem_24283_ext), is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #1 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[]f32", type(sigma_mem_24283_ext), sigma_mem_24283_ext))
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore", invalid="ignore"):
      (mem_out_24513, mem_out_24514, prim_out_24515) = self.futhark_entry_cluster_2D(data_mem_24282, sigma_mem_24283, n_15983)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return (cl.array.Array(self.queue, (prim_out_24515, np.int64(2)), np.float32, data=mem_out_24513), cl.array.Array(self.queue, (n_15983,), np.int64, data=mem_out_24514))
  def cluster_5D(self, data_mem_24282_ext, sigma_mem_24283_ext):
    n_20072 = None
    try:
      assert ((type(data_mem_24282_ext) in [np.ndarray, cl.array.Array]) and (data_mem_24282_ext.dtype == np.float32)), "Parameter has unexpected type"
      if (n_20072 == None):
        n_20072 = np.int64(data_mem_24282_ext.shape[0])
      else:
        assert (n_20072 == data_mem_24282_ext.shape[0]), "Error: entry point arguments have invalid sizes."
      assert (np.int64(5) == data_mem_24282_ext.shape[1]), "Entry point arguments have invalid sizes."
      if (type(data_mem_24282_ext) == cl.array.Array):
        data_mem_24282 = data_mem_24282_ext.data
      else:
        data_mem_24282 = opencl_alloc(self, np.int64(data_mem_24282_ext.nbytes), "data_mem_24282")
        if (np.int64(data_mem_24282_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, data_mem_24282, normaliseArray(data_mem_24282_ext), is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][]f32", type(data_mem_24282_ext), data_mem_24282_ext))
    try:
      assert ((type(sigma_mem_24283_ext) in [np.ndarray, cl.array.Array]) and (sigma_mem_24283_ext.dtype == np.float32)), "Parameter has unexpected type"
      assert (np.int64(5) == sigma_mem_24283_ext.shape[0]), "Entry point arguments have invalid sizes."
      if (type(sigma_mem_24283_ext) == cl.array.Array):
        sigma_mem_24283 = sigma_mem_24283_ext.data
      else:
        sigma_mem_24283 = opencl_alloc(self, np.int64(sigma_mem_24283_ext.nbytes), "sigma_mem_24283")
        if (np.int64(sigma_mem_24283_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, sigma_mem_24283, normaliseArray(sigma_mem_24283_ext), is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #1 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[]f32", type(sigma_mem_24283_ext), sigma_mem_24283_ext))
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore", invalid="ignore"):
      (mem_out_24513, mem_out_24514, prim_out_24515) = self.futhark_entry_cluster_5D(data_mem_24282, sigma_mem_24283, n_20072)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return (cl.array.Array(self.queue, (prim_out_24515, np.int64(5)), np.float32, data=mem_out_24513), cl.array.Array(self.queue, (n_20072,), np.int64, data=mem_out_24514))